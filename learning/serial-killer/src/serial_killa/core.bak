(ns serial-killa.core
  (:require [serial-port :as sp])
  (:gen-class))

;; TODO buffer update und kettler update trennen!!


(use 'serial-port)
(def kettler (atom {:msg-status "new" :status-str "" :buffer []}))

(defn manage-buffer [buffer character]
  (if (and (= 13 (last buffer)) (= 10 character))
    {:msg-status "ack" :status-str (clojure.string/join (map str (map char (pop buffer))))
     :buffer []}
    {:msg-status (:msg-status @kettler)  :status-str (:status-str @kettler) :buffer (conj buffer character)}
    )
  )
  
(defn parse-int [s]
  (Integer. (re-find  #"\d+" s )))

(defn status-from-string [str]
  (let [stat (clojure.string/split str #"\t")]
    (println str)
    {
     :pulse (parse-int (nth stat 0))
     :rpm (parse-int (nth stat 1))
     :speed (parse-int (nth stat 2))
     :dist (parse-int (nth stat 3))
     :req-power (parse-int (nth stat 4))
     :energy (parse-int (nth stat 5))
     :time (nth stat 6)
     :power (parse-int (nth stat 7))}
    )
  )



(defn add-new-char
  [char]
  (let [old-buf (:buffer @kettler)
        ket-dict  (manage-buffer old-buf char) 
        new-buf (:buffer ket-dict)
        new-stat (:status-str ket-dict)
        msg-stat (:msg-status ket-dict)
        ]
    (swap! kettler (fn [state] {:msg-status msg-stat :status-str new-stat :buffer new-buf}))
    )
  )

(def b-reset (byte-array [(byte 0x52) (byte 0x53) (byte 0x0a) (byte 0x0d)]))

(def b-pw110 (byte-array [(byte 0x50) (byte 0x57) (byte 0x20) (byte 0x31) (byte 0x31) (byte 0x30) (byte 0x0a) (byte 0x0d)]))

(def b-cm (byte-array [(byte 0x43) (byte 0x4d) (byte 0x0a) (byte 0x0d)]))

(def b-status (byte-array [(byte 0x53) (byte 0x54) (byte 0x0a) (byte 0x0d)]))

(defn byte-array-from-string [s]
  (byte-array (map byte (char-array s))))


(defn get-status [port]
    (write port b-status)
    (status-from-string (:status-str @kettler)))

(defn update-power [port delta]
  (let [cur_pow_setpoint (:req-power (get-status port))
        new_pow_setpoint (+ cur_pow_setpoint delta)]
    (set-power port new_pow_setpoint)))

(defn set-power [port pw]
  (write port (byte-array-from-string (clojure.string/join ["PW " (str pw) "\n\r"]))))

(defn -main
  "I don't do a whole lot ... yet."
  [& args]
  (def port (open "/dev/ttyUSB0" 9600))
  (on-byte port (fn [x] (add-new-char x)))
  (write port b-cm)
  (write port b-status)
  ;;(write port b-pw110)
  (println @kettler)
;;  (status-from-string (:status-str @kettler))
  (set-power port 25)
  (write port b-status)
  (dotimes [_ 15]
    (Thread/sleep 1000)
    (update-power port 5)
    (println @kettler)
    (println (get-status port)))
  
  (close port)

)
