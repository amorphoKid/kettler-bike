(undo-tree-save-format-version . 1)
"131946204b1c0d1610ef9581c3483a5481faec1e"
[nil nil nil nil (25525 61308 552318 854000) 0 nil]
([nil nil ((nil rear-nonsticky nil 40 . 41) (#("
" 0 1 (fontified nil)) . -922) (40 . 923) (t 25524 42773 339400 72000)) nil (25525 61308 552313 687000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -923) (undo-tree-id17 . -1) 924 (923 . 924) (923 . 924)) nil (25525 61308 552306 965000) 0 nil])
([nil nil ((nil rear-nonsticky nil 923 . 924) (#("
" 0 1 (fontified nil)) . -1826) (923 . 1827)) nil (25525 61308 552295 909000) 0 nil])
([nil nil ((#("#(< (:hr @pars) (:hr-target @pars))" 0 5 (fontified t) 5 6 (face clojure-keyword-face fontified t) 6 8 (face clojure-keyword-face fontified t) 8 17 (fontified t) 17 18 (face clojure-keyword-face fontified t) 18 27 (face clojure-keyword-face fontified t) 27 35 (fontified t)) . 1216)) nil (25525 61308 552290 780000) 0 nil])
([nil nil ((#("#(> (:hr @pars) (:hr-target @pars))" 0 5 (fontified t) 5 6 (face clojure-keyword-face fontified t) 6 8 (face clojure-keyword-face fontified t) 8 17 (fontified t) 17 18 (face clojure-keyword-face fontified t) 18 27 (face clojure-keyword-face fontified t) 27 35 (fontified t)) . 1295)) nil (25525 61308 552287 58000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 1441)) nil (25525 61308 552283 410000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 1441)) nil (25525 61308 552279 539000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 1441)) nil (25525 61308 552275 817000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1441)) nil (25525 61308 552272 39000) 0 nil])
([nil nil ((#("(update-hr pars 1)" 0 18 (fontified t)) . 1494)) nil (25525 61308 552268 151000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 1494)) nil (25525 61308 552264 151000) 0 nil])
([nil nil ((#("                                     
" 0 37 (fontified t) 37 38 (fontified t)) . 1457) (undo-tree-id16 . -36) 1493) nil (25525 61308 552259 336000) 0 nil])
([nil nil ((#("                                     (update-hr pars -1))
" 0 58 (fontified t)) . 1586) (undo-tree-id15 . -33) 1619) nil (25525 61308 552250 521000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 1566)) nil (25525 61308 552242 447000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 1566)) nil (25525 61308 552238 614000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 1566)) nil (25525 61308 552234 318000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1566)) nil (25525 61308 552230 355000) 0 nil])
([nil nil ((1505 . 1514) (#("f" 0 1 (face clojure-keyword-face fontified t)) . -1505) (undo-tree-id7 . -1) (#("a" 0 1 (face clojure-keyword-face fontified t)) . -1506) (undo-tree-id8 . -1) (#("t" 0 1 (face clojure-keyword-face fontified t)) . -1507) (undo-tree-id9 . -1) 1508 (1502 . 1508) (#("w" 0 1 (face clojure-keyword-face fontified t)) . 1502) (#("p" 0 1 (face clojure-keyword-face fontified t)) . 1502) (#("-" 0 1 (face clojure-keyword-face fontified t)) . 1502) (#("e" 0 1 (face clojure-keyword-face fontified t)) . 1502) (#("s" 0 1 (face clojure-keyword-face fontified t)) . 1502) (#("a" 0 1 (face clojure-keyword-face fontified t)) . 1502) (#("e" 0 1 (face clojure-keyword-face fontified t)) . 1502) (#("r" 0 1 (face clojure-keyword-face fontified t)) . 1502) (#("c" 0 1 (face clojure-keyword-face fontified t)) . 1502) (#("e" 0 1 (face clojure-keyword-face fontified t)) . 1502) (#("d" 0 1 (face clojure-keyword-face fontified t)) . 1502) (1379 . 1388) (#("c" 0 1 (face clojure-keyword-face fontified t)) . -1379) (undo-tree-id10 . -1) (#("h" 0 1 (face clojure-keyword-face fontified t)) . -1380) (undo-tree-id11 . -1) (#("e" 0 1 (face clojure-keyword-face fontified t)) . -1381) (undo-tree-id12 . -1) (#("c" 0 1 (face clojure-keyword-face fontified t)) . -1382) (undo-tree-id13 . -1) (#("k" 0 1 (face clojure-keyword-face fontified t)) . -1383) (undo-tree-id14 . -1) 1384 (1379 . 1384) (#("w" 0 1 (face clojure-keyword-face fontified t)) . 1379) (#("p" 0 1 (face clojure-keyword-face fontified t)) . 1379) (#("-" 0 1 (face clojure-keyword-face fontified t)) . 1379) (#("w" 0 1 (face clojure-keyword-face fontified t)) . 1379) (#("c" 0 1 (face clojure-keyword-face fontified t)) . 1379) (1379 . 1381) (#("increase" 0 8 (face clojure-keyword-face fontified t)) . 1379)) nil (25525 61308 552213 818000) 0 nil])
([nil nil ((#("     :get-state [{:conditions []
                    :on-success #(println @pars)
                    :transition :start}]
" 0 5 (fontified t) 5 6 (face clojure-keyword-face fontified t) 6 15 (face clojure-keyword-face fontified t) 15 18 (fontified t) 18 19 (face clojure-keyword-face fontified t) 19 29 (face clojure-keyword-face fontified t) 29 33 (fontified t) 33 53 (fontified t) 53 54 (face clojure-keyword-face fontified t) 54 64 (face clojure-keyword-face fontified t) 64 66 (fontified t) 66 82 (fontified t) 82 102 (fontified t) 102 103 (face clojure-keyword-face fontified t) 103 113 (face clojure-keyword-face fontified t) 113 114 (fontified t) 114 115 (face clojure-keyword-face fontified t) 115 120 (face clojure-keyword-face fontified t) 120 122 (fontified t) 122 123 (fontified t)) . 1373) (undo-tree-id0 . -86) (undo-tree-id1 . -86) (undo-tree-id2 . 118) (undo-tree-id3 . -4) (undo-tree-id4 . -86) (undo-tree-id5 . -4) (undo-tree-id6 . -86) 1459) nil (25525 61308 552166 467000) 0 nil])
([nil nil ((#("increase" 0 8 (face clojure-keyword-face fontified t)) . 1250)) nil (25525 61308 552102 5000) 0 nil])
([nil nil ((#("-" 0 1 (face clojure-keyword-face fontified t)) . 1250)) nil (25525 61308 552435 92000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1252 . 1253) (nil fontified nil 1251 . 1253) (1251 . 1253) 1250) nil (25525 61423 428916 390000) 0 nil] [nil nil ((#("pw" 0 2 (face clojure-keyword-face fontified t)) . 1250)) ((1250 . 1252)) (25525 61308 552084 153000) 0 nil])
([nil nil ((#("j" 0 1 (face clojure-keyword-face fontified t)) . -1262) (undo-tree-id45 . -1) (1262 . 1263) 1261 (1262 . 1264) (1259 . 1260) (1250 . 1261)) nil (25525 61423 428896 57000) 0 nil])
nil
([nil nil ((#("x" 0 1 (face clojure-keyword-face fontified t)) . 1262) (undo-tree-id44 . 1)) nil (25525 61423 428864 651000) 0 nil])
([nil nil ((#("x" 0 1 (face clojure-keyword-face fontified t)) . 1262) (undo-tree-id43 . 1)) nil (25525 61423 428842 559000) 0 nil])
([nil nil ((#("p" 0 1 (face clojure-keyword-face fontified t)) . 1262) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . 1) (undo-tree-id42 . -1)) nil (25525 61423 428819 837000) 0 nil])
([nil nil ((#("p" 0 1 (face clojure-keyword-face fontified t)) . 1262) (undo-tree-id37 . -1) (undo-tree-id38 . 1)) nil (25525 61423 428773 654000) 0 nil])
([nil nil ((#("w" 0 1 (face clojure-keyword-face rear-nonsticky t fontified t)) . 1262) (undo-tree-id36 . 1)) nil (25525 61423 428742 211000) 0 nil])
([nil nil ((#("w" 0 1 (face clojure-keyword-face fontified t)) . 1262) (undo-tree-id35 . 1)) nil (25525 61423 428719 952000) 0 nil])
([nil nil ((#("{:conditions []
                   :transition :decrease-pw}
                  start-trans]" 0 1 (fontified t) 1 2 (face clojure-keyword-face fontified t) 2 12 (face clojure-keyword-face fontified t) 12 14 (fontified t) 14 16 (fontified t) 16 35 (fontified t) 35 36 (face clojure-keyword-face fontified t) 36 46 (face clojure-keyword-face fontified t) 46 47 (fontified t) 47 48 (face clojure-keyword-face fontified t) 48 59 (face clojure-keyword-face fontified t) 59 72 (fontified t) 72 91 (fontified t)) . 1282) (undo-tree-id31 . -90) (undo-tree-id32 . -90) (undo-tree-id33 . -90) (undo-tree-id34 . -90) 1372) nil (25525 61423 428695 860000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -1283) (undo-tree-id30 . -1) (1283 . 1284) 1264 (1263 . 1264)) nil (25525 61423 428647 10000) 0 nil])
([nil nil ((#("                  
" 0 18 (fontified t) 18 19 (fontified t)) . 1265) (undo-tree-id22 . -18) (undo-tree-id23 . -17) (undo-tree-id24 . 1) (undo-tree-id25 . -18) (undo-tree-id26 . 1) (undo-tree-id27 . -18) (undo-tree-id28 . -18) (undo-tree-id29 . -19) 1282) nil (25525 61423 428613 752000) 0 nil])
([nil nil ((#("   (let [start-trans {:conditions []
" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 15 (fontified t) 15 22 (fontified t) 22 23 (face clojure-keyword-face fontified t) 23 33 (face clojure-keyword-face fontified t) 33 37 (fontified t)) . 953) (undo-tree-id21 . -3) 956) nil (25525 61423 428455 350000) 0 nil])
([nil nil ((#("                      :on-success #(println @pars)
" 0 22 (fontified t) 22 23 (face clojure-keyword-face fontified t) 23 33 (face clojure-keyword-face fontified t) 33 50 (fontified t) 50 51 (fontified t)) . 953) (undo-tree-id20 . -3) 956) nil (25525 61423 428418 463000) 0 nil])
([nil nil ((#("                      :transition :start}]
" 0 22 (fontified t) 22 23 (face clojure-keyword-face fontified t) 23 33 (face clojure-keyword-face fontified t) 33 34 (fontified t) 34 35 (face clojure-keyword-face fontified t) 35 40 (face clojure-keyword-face fontified t) 40 42 (fontified t) 42 43 (fontified t)) . 953) (undo-tree-id19 . -3) 956) nil (25525 61423 428385 890000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 1268)) nil (25525 61423 428358 576000) 0 nil])
([nil nil ((1267 . 1268) (#(")" 0 1 (fontified t)) . 1267) (undo-tree-id18 . -1)) nil (25525 61423 428333 558000) 0 nil])
([nil nil ((#("println \"Hello, World!\"" 0 8 (fontified t) 8 23 (face font-lock-string-face fontified t)) . 1332) (t 25525 61423 443244 364000)) nil (25525 61485 267934 782000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 1331)) nil (25525 61485 267920 597000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 1331)) nil (25525 61485 267908 560000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1334 . 1335) (#("
" 0 1 (fontified nil)) . -1681) (1332 . 1682) 1331) nil (25525 61485 267895 153000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 1331)) nil (25525 61485 267877 469000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 1679) (undo-tree-id56 . -1) (undo-tree-id57 . -1)) nil (25525 61485 267863 432000) 0 nil])
([nil nil ((1679 . 1680)) nil (25525 61485 267832 155000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -1677) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#(")" 0 1 (fontified t)) . -1678) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#(")" 0 1 (fontified t)) . -1679) (undo-tree-id54 . -1) (undo-tree-id55 . -1) 1680) nil (25525 61485 267808 656000) 0 nil])
([nil nil ((1677 . 1681)) nil (25525 61485 267661 68000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-doc-face cider-locals nil help-echo cider--help-echo fontified t)) . 1285) (#("t" 0 1 (face font-lock-doc-face cider-locals nil help-echo cider--help-echo fontified t)) . 1285) (undo-tree-id62 . -1) (#("d" 0 1 (face font-lock-doc-face cider-locals nil help-echo cider--help-echo fontified t)) . 1285) (1287 . 1288) (nil fontified nil 1282 . 1284) (#("  " 0 2 (fontified nil)) . 1282) (1284 . 1286) (1286 . 1287) (nil fontified nil 1282 . 1284) (#("  " 0 2 (fontified nil)) . 1282) (1284 . 1286) (1285 . 1286) (t 25525 61485 281179 790000)) nil (25525 61572 446590 148000) 0 nil])
([nil nil ((#("I don't do a whole lot ... yet." 0 31 (face font-lock-doc-face cider-locals ("args") help-echo cider--help-echo fontified t)) . 1285) (undo-tree-id61 . 31)) nil (25525 61572 446561 667000) 0 nil])
([nil nil ((1381 . 1383) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1311 . 1312) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1310 . 1311) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1309 . 1310) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1308 . 1309) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1307 . 1308) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1306 . 1307) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1305 . 1306) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1304 . 1305) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1303 . 1304) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1302 . 1303) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1301 . 1302) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1300 . 1301) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1299 . 1300) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1298 . 1299) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1297 . 1298) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1296 . 1297) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1295 . 1296) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1294 . 1295) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1293 . 1294) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1292 . 1293) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1291 . 1292) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1290 . 1291) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1289 . 1290) (#("p" 0 1 (face font-lock-doc-face cider-locals ("args") help-echo cider--help-echo fontified t)) . -1289) (undo-tree-id58 . -1) 1290 (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1289 . 1290) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1288 . 1289) (#("p" 0 1 (face font-lock-doc-face cider-locals ("args") help-echo cider--help-echo fontified t)) . -1288) (undo-tree-id59 . -1) (#(" " 0 1 (face font-lock-doc-face cider-locals ("args") help-echo cider--help-echo fontified t)) . -1289) (undo-tree-id60 . -1) 1290 (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1289 . 1290) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1288 . 1289) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1287 . 1288) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1286 . 1287) (nil fontified nil 1282 . 1284) (nil help-echo cider--help-echo 1282 . 1284) (nil cider-locals ("args") 1282 . 1284) (#("  " 0 2 (cider-locals ("args") help-echo cider--help-echo fontified nil)) . 1282) (1284 . 1286) (1285 . 1286)) nil (25525 61572 446781 624000) 0 nil])
([nil nil ((1381 . 1386) (#("cwhr" 0 2 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 2 4 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo)) . 1381) (undo-tree-id81 . 4)) nil (25525 61639 778176 711000) 0 nil] [nil nil ((#(":" 0 1 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo)) . 1380)) ((1380 . 1381)) (25525 61572 446216 565000) 0 nil])
([nil nil ((#("     :hr 000
" 0 5 (cider-locals ("args") fontified t help-echo cider--help-echo) 5 6 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 6 8 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 8 13 (cider-locals ("args") fontified t help-echo cider--help-echo)) . 1399) (undo-tree-id79 . 6) (undo-tree-id80 . -5) 1404) nil (25525 61639 778167 452000) 0 nil])
nil
([nil nil ((#("     :rpm 000
" 0 5 (cider-locals ("args") fontified t help-echo cider--help-echo) 5 6 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 6 7 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 7 9 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 9 13 (cider-locals ("args") fontified t help-echo cider--help-echo) 13 14 (cider-locals ("args") fontified t help-echo cider--help-echo)) . 1399) (undo-tree-id77 . 14) (undo-tree-id78 . -5) 1404) nil (25525 61639 778155 582000) 0 nil])
([nil nil ((#("     :speed 000
" 0 5 (cider-locals ("args") fontified t help-echo cider--help-echo) 5 6 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 6 11 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 11 15 (cider-locals ("args") fontified t help-echo cider--help-echo) 15 16 (cider-locals ("args") fontified t help-echo cider--help-echo)) . 1399) (undo-tree-id75 . 16) (undo-tree-id76 . -5) 1404) nil (25525 61639 778142 693000) 0 nil])
([nil nil ((#("     :dist 000
" 0 5 (cider-locals ("args") fontified t help-echo cider--help-echo) 5 6 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 6 10 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 10 14 (cider-locals ("args") fontified t help-echo cider--help-echo) 14 15 (cider-locals ("args") fontified t help-echo cider--help-echo)) . 1399) (undo-tree-id73 . 15) (undo-tree-id74 . -5) 1404) nil (25525 61639 778131 82000) 0 nil])
([nil nil ((#("     :req-power 025
" 0 5 (cider-locals ("args") fontified t help-echo cider--help-echo) 5 6 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 6 15 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 15 19 (cider-locals ("args") fontified t help-echo cider--help-echo) 19 20 (cider-locals ("args") fontified t help-echo cider--help-echo)) . 1399) (undo-tree-id71 . 20) (undo-tree-id72 . -5) 1404) nil (25525 61639 778118 212000) 0 nil])
([nil nil ((#("     :energy 0000
" 0 5 (cider-locals ("args") fontified t help-echo cider--help-echo) 5 6 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 6 12 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 12 17 (cider-locals ("args") fontified t help-echo cider--help-echo) 17 18 (cider-locals ("args") fontified t help-echo cider--help-echo)) . 1399) (undo-tree-id69 . 18) (undo-tree-id70 . -5) 1404) nil (25525 61639 778105 27000) 0 nil])
([nil nil ((#("     :time \"00:00\"
" 0 5 (cider-locals ("args") fontified t help-echo cider--help-echo) 5 6 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 6 10 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 10 11 (cider-locals ("args") fontified t help-echo cider--help-echo) 11 12 (face font-lock-string-face cider-locals ("args") fontified t help-echo cider--help-echo) 12 17 (face font-lock-string-face cider-locals ("args") fontified t help-echo cider--help-echo) 17 18 (face font-lock-string-face cider-locals ("args") fontified t help-echo cider--help-echo) 18 19 (cider-locals ("args") fontified t help-echo cider--help-echo)) . 1399) (undo-tree-id67 . 19) (undo-tree-id68 . -5) 1404) nil (25525 61639 778087 139000) 0 nil])
([nil nil ((#("     :power 000}
" 0 5 (cider-locals ("args") fontified t help-echo cider--help-echo) 5 6 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 6 11 (face clojure-keyword-face cider-locals ("args") fontified t help-echo cider--help-echo) 11 16 (cider-locals ("args") fontified t help-echo cider--help-echo) 16 17 (cider-locals ("args") fontified t help-echo cider--help-echo)) . 1399) (undo-tree-id65 . 17) (undo-tree-id66 . -5) 1404) nil (25525 61639 778074 472000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("args" "ref" "pars") fontified t help-echo cider--help-echo)) . 1436) (#("(" 0 1 (cider-locals ("args" "ref" "sm" "pars") fontified t help-echo cider--help-echo)) . -1427) (undo-tree-id63 . -1) (undo-tree-id64 . -1) 1428 (#(" " 0 1 (cider-locals ("args" "ref" "sm" "pars") fontified t help-echo cider--help-echo)) . 1428) (#("f" 0 1 (cider-locals ("args" "ref" "sm" "pars") fontified t help-echo cider--help-echo)) . 1428) (#("e" 0 1 (cider-locals ("args" "ref" "sm" "pars") fontified t help-echo cider--help-echo)) . 1428) (#("r" 0 1 (cider-locals ("args" "ref" "sm" "pars") fontified t help-echo cider--help-echo)) . 1428) (1349 . 1350) (1335 . 1340)) nil (25525 61639 778052 214000) 0 nil])
([nil nil ((#("r" 0 1 (cider-locals ("args" "ref") fontified t help-echo cider--help-echo)) . 1336) (t 25525 61639 776853 133000)) nil (25525 61757 147850 813000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("args" "ef") fontified t help-echo cider--help-echo)) . 1336)) nil (25525 61757 147846 165000) 0 nil])
([nil nil ((#("f" 0 1 (cider-locals ("args" "f") fontified t help-echo cider--help-echo)) . 1336)) nil (25525 61757 147842 54000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("args" "demo_pars") fontified t help-echo cider--help-echo)) . 1336)) nil (25525 61757 147838 240000) 0 nil])
([nil nil ((#("(" 0 1 (cider-locals ("args" "demo_pars") fontified t help-echo cider--help-echo)) . 1335)) nil (25525 61757 147834 258000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("args") fontified t help-echo cider--help-echo)) . 1344)) nil (25525 61757 147830 203000) 0 nil])
([nil nil ((1344 . 1349)) nil (25525 61757 147826 629000) 0 nil])
([nil nil ((1409 . 1410)) nil (25525 61757 147822 647000) 0 nil])
([nil nil ((1408 . 1409)) nil (25525 61757 147818 351000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("args" "ref") fontified t help-echo cider--help-echo)) . -1410) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 1411) nil (25525 61757 147811 796000) 0 nil])
([nil nil ((1410 . 1411)) nil (25525 61757 147769 556000) 0 nil])
([nil nil ((1284 . 1285) (1220 . 1232) (1207 . 1220) (1208 . 1244) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified nil)) . 1207) (undo-tree-id88 . -1) (1208 . 1209) (1224 . 1262) (1190 . 1191) (1222 . 1223) (1205 . 1207) (#("e" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -1205) (undo-tree-id89 . -1) (#("o" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -1206) (undo-tree-id90 . -1) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -1207) (undo-tree-id91 . -1) 1208 (1203 . 1208) (t 25525 61757 154083 749000)) nil (25525 61888 196680 676000) 0 nil])
([nil nil ((1271 . 1274) (1192 . 1193) (1139 . 1140) 1169) nil (25525 61888 196635 825000) 0 nil])
([nil nil ((1086 . 1106) 1085) nil (25525 61888 196624 770000) 0 nil])
([nil nil ((1106 . 1123)) nil (25525 61888 196616 862000) 0 nil])
([nil nil ((1123 . 1144)) nil (25525 61888 196610 307000) 0 nil])
([nil nil ((1144 . 1181)) nil (25525 61888 196603 418000) 0 nil])
([nil nil ((1181 . 1188)) nil (25525 61888 196596 641000) 0 nil])
([nil nil ((#("l" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -1187) (undo-tree-id86 . -1) (undo-tree-id87 . -1) 1188) nil (25525 61888 196587 30000) 0 nil])
([nil nil ((1187 . 1193)) nil (25525 61888 196565 456000) 0 nil])
([nil nil ((1193 . 1195)) nil (25525 61888 196557 938000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -1194) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 1195) nil (25525 61888 196547 327000) 0 nil])
([nil nil ((1194 . 1197)) nil (25525 61888 196490 698000) 0 nil])
([nil nil ((1756 . 1763) (#("a" 0 1 (cider-locals ("pars" "args" "sm" "pars" "_") fontified t help-echo cider--help-echo)) . -1756) (undo-tree-id92 . -1) 1757 (1754 . 1757) (1745 . 1754) (#("i" 0 1 (cider-locals ("pars" "args" "sm" "pars") fontified t help-echo cider--help-echo)) . -1725) (undo-tree-id93 . -1) 1726 (1725 . 1726) (1738 . 1745) (t 25525 61888 211302 564000)) nil (25525 61938 925001 706000) 0 nil])
([nil nil ((#("      " 0 6 (cider-locals ("pars" "args" "sm" "pars" "_") fontified t help-echo cider--help-echo)) . -1770) 1787) nil (25525 61938 924950 522000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1765 . 1766) (#("
" 0 1 (fontified nil cider-locals ("args"))) . -1785) (1763 . 1786) 1745 (t 25525 61938 930285 361000)) nil (25525 61980 829326 767000) 0 nil])
([nil nil ((#("      (thread/delay 500)
" 0 6 (cider-locals ("pars" "args" "sm" "pars" "_") fontified t help-echo cider--help-echo) 6 7 (cider-locals ("pars" "args" "sm" "pars" "_") fontified t help-echo cider--help-echo) 7 13 (face font-lock-type-face cider-locals ("pars" "args" "sm" "pars" "_") fontified t help-echo cider--help-echo) 13 24 (cider-locals ("pars" "args" "sm" "pars" "_") fontified t help-echo cider--help-echo) 24 25 (cider-locals ("pars" "args" "sm" "pars" "_") help-echo cider--help-echo fontified t)) . 1739) (undo-tree-id94 . -25) (undo-tree-id95 . -23) (undo-tree-id96 . -6) (undo-tree-id97 . -6) (undo-tree-id98 . -6) (undo-tree-id99 . -6) (undo-tree-id100 . -6) (undo-tree-id101 . -2) (undo-tree-id102 . -2) 1741) nil (25525 61980 829317 507000) 0 nil])
([nil nil ((1741 . 1745)) nil (25525 62080 656309 950000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1135 . 1136) (nil fontified nil 1051 . 1136) (1051 . 1136) 1050 (t 25525 61980 839463 273000)) nil (25525 62121 822651 798000) 0 nil] [nil nil ((nil rear-nonsticky nil 1136 . 1137) (nil fontified nil 1052 . 1137) (1052 . 1137) 1051 (t 25525 61980 839463 273000)) ((#("{:conditions [#(= (:mode @pars) \"hr-target\")]
               :transition :hr-target}]" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 1 2 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 2 12 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 12 16 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 16 17 (face font-lock-function-name-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 17 19 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 19 20 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 20 24 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 24 32 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 32 43 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 43 46 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 46 61 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 61 62 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 62 72 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 72 73 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 73 74 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 74 83 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 83 84 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 84 85 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo rear-nonsticky nil fontified nil)) . 1052) (undo-tree-id103 . -84) (undo-tree-id104 . -84) (undo-tree-id105 . -46) (undo-tree-id106 . -84) (nil fontified t 1095 . 1098) (nil fontified t 1084 . 1095) (nil fontified t 1076 . 1084) (nil fontified t 1072 . 1076) (nil fontified t 1071 . 1072) (nil fontified t 1069 . 1071) (nil fontified t 1068 . 1069) (nil fontified t 1064 . 1068) (nil fontified t 1054 . 1064) (nil fontified t 1053 . 1054) (nil fontified t 1052 . 1053) (nil rear-nonsticky t 1136 . 1137)) (25525 62080 655339 5000) 0 nil])
([nil nil ((#("j" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1080) (undo-tree-id108 . -1) (1080 . 1081) 1081 (1080 . 1081) (1051 . 1066)) nil (25525 62121 822644 298000) 0 nil])
nil
([nil nil ((#("d#(= (:mode @pars) \"hr-target\")" 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 3 4 (face font-lock-function-name-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 4 6 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 6 7 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 7 11 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 11 19 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 19 30 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 30 31 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1080) (undo-tree-id107 . 31)) nil (25525 62121 822632 336000) 0 nil])
([nil nil ((#("hr-target" 0 9 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1110)) nil (25525 62121 822600 947000) 0 nil])
([nil nil ((1110 . 1115)) nil (25525 62121 822589 133000) 0 nil])
([nil nil ((1117 . 1118) (t 25525 62121 826788 721000)) nil (25525 62155 39939 179000) 0 nil])
([nil nil ((#("]" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo rear-nonsticky t fontified t)) . 1116)) nil (25525 62155 39927 809000) 0 nil])
([nil nil ((#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1116) (undo-tree-id109 . 1)) nil (25525 62178 571085 480000) 0 nil])
([nil nil ((#("u" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1124) (undo-tree-id121 . -1) (undo-tree-id122 . -1) 1125 (1124 . 1125) (1117 . 1124) (t 25525 62155 56173 769000) 1115) nil (25525 62260 177713 931000) 0 nil] [nil nil ((1117 . 1124) (t 25525 62155 56173 769000) 1116) ((#("
      " 0 7 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1117)) (25525 62178 570211 144000) 0 nil])
([nil nil ((#("      
" 0 6 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 6 7 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1118) (undo-tree-id119 . 1) (undo-tree-id120 . 1)) nil (25525 62260 177682 154000) 0 nil])
nil
([nil nil ((1116 . 1131)) nil (25525 62260 177660 61000) 0 nil])
([nil nil ((1131 . 1134)) nil (25525 62260 177651 747000) 0 nil])
([nil nil ((1134 . 1144)) nil (25525 62260 177643 858000) 0 nil])
([nil nil ((#("ä" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1143) (undo-tree-id118 . -1) 1144) nil (25525 62260 177633 710000) 0 nil])
([nil nil ((1143 . 1145)) nil (25525 62260 177617 81000) 0 nil])
([nil nil ((1145 . 1146)) nil (25525 62260 177609 229000) 0 nil])
([nil nil ((#("ü" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1145) (undo-tree-id117 . -1) 1146) nil (25525 62260 177599 229000) 0 nil])
([nil nil ((1145 . 1153)) nil (25525 62260 177582 581000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1150) (undo-tree-id114 . -1) (#("\"" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1151) (undo-tree-id115 . -1) (#("s" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1152) (undo-tree-id116 . -1) 1153) nil (25525 62260 177570 174000) 0 nil])
([nil nil ((1150 . 1159)) nil (25525 62260 177537 619000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1158) (undo-tree-id113 . -1) 1159) nil (25525 62260 177527 805000) 0 nil])
([nil nil ((1158 . 1159)) nil (25525 62260 177509 397000) 0 nil])
([nil nil ((1153 . 1154)) nil (25525 62260 177501 768000) 0 nil])
([nil nil ((1159 . 1160)) nil (25525 62260 177493 898000) 0 nil])
([nil nil ((#("]" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1161) (undo-tree-id111 . -1) (undo-tree-id112 . -1) 1162) nil (25525 62260 177483 250000) 0 nil])
([nil nil ((1161 . 1162)) nil (25525 62260 177456 806000) 0 nil])
([nil nil ((1115 . 1116)) nil (25525 62260 177448 213000) 0 nil])
([nil nil ((1115 . 1116)) nil (25525 62260 177438 769000) 0 nil])
([nil nil ((#("}" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1115) (undo-tree-id110 . -1) (#("x" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1115) (#("d" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1115)) nil (25525 62260 177419 362000) 0 nil])
([nil nil ((#("y" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1130) (1130 . 1131) (#("v" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1130) (undo-tree-id135 . -1) 1131 (1130 . 1131) (1160 . 1161) (#("}" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1160) (#("y" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1160) (1160 . 1161) (t 25525 62260 574247 961000)) nil (25525 62400 706198 590000) 0 nil])
([nil nil ((#(" :on-success #(println \"start\")}" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 1 2 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 2 12 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 12 15 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 15 22 (face font-lock-function-name-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 22 23 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 23 30 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 30 32 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1129) (undo-tree-id127 . -31) (undo-tree-id128 . 31) (undo-tree-id129 . -31) (undo-tree-id130 . -31) (undo-tree-id131 . -31) (undo-tree-id132 . -32) (undo-tree-id133 . -31) (undo-tree-id134 . -31) 1160) nil (25525 62400 706170 54000) 0 nil])
([nil nil ((#("               " 0 15 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1082) (undo-tree-id125 . -15) (undo-tree-id126 . -15) 1097 (1082 . 1097) (1082 . 1083) 1097) nil (25525 62400 706115 481000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1113 . 1114) (nil fontified nil 1082 . 1114) (1082 . 1114)) nil (25525 62400 706090 445000) 0 nil])
([nil nil ((#("}" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo rear-nonsticky t fontified t)) . 1113)) nil (25525 62400 706079 853000) 0 nil])
([nil nil ((1147 . 1148)) nil (25525 62400 706072 464000) 0 nil])
([nil nil ((1082 . 1097) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1082) 1142) nil (25525 62400 706063 557000) 0 nil])
([nil nil ((1161 . 1162)) nil (25525 62400 706052 835000) 0 nil])
([nil nil ((#("i" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1161) (undo-tree-id123 . -1) (undo-tree-id124 . -1) 1162) nil (25525 62400 706041 354000) 0 nil])
([nil nil ((1162 . 1163)) nil (25525 62400 705982 393000) 0 nil])
([nil nil ((#("V" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . -1764) (undo-tree-id147 . -1) 1765 (1764 . 1765) (t 25525 62400 731667 725000)) nil (25525 62765 190954 752000) 0 nil])
([nil nil ((#("(let [pars demo_pars
        sm (state-machine  (kettler-control pars) :start)]
    (dotimes [_ 40]
      (Thread/sleep 1000)
      (update-state sm))))" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo) 1 4 (face font-lock-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo) 4 21 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars") fontified t help-echo cider--help-echo) 21 59 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars") fontified t help-echo cider--help-echo) 59 71 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars") fontified t help-echo cider--help-echo) 71 72 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars") fontified t help-echo cider--help-echo) 72 77 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars") fontified t help-echo cider--help-echo) 77 79 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars") fontified t help-echo cider--help-echo) 79 80 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars") fontified t help-echo cider--help-echo) 80 85 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars") fontified t help-echo cider--help-echo) 85 92 (face font-lock-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars") fontified t help-echo cider--help-echo) 92 100 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars" "_") fontified t help-echo cider--help-echo) 100 101 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars" "_") fontified t help-echo cider--help-echo) 101 102 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars" "_") fontified t help-echo cider--help-echo rear-nonsticky t) 102 106 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars" "_") fontified t help-echo cider--help-echo) 106 107 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars" "_") fontified t help-echo cider--help-echo) 107 113 (face font-lock-type-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars" "_") fontified t help-echo cider--help-echo) 113 125 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars" "_") fontified t help-echo cider--help-echo) 125 126 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars" "_") fontified t help-echo cider--help-echo) 126 150 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars" "_") fontified t help-echo cider--help-echo) 150 151 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args" "sm" "pars") fontified t help-echo cider--help-echo) 151 152 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . 1764) (undo-tree-id160 . -151) (undo-tree-id161 . 152) (undo-tree-id162 . -151) (undo-tree-id163 . -148) (undo-tree-id164 . -19) (undo-tree-id165 . -19) (undo-tree-id166 . -143) (undo-tree-id167 . -100) (undo-tree-id168 . -100)) ((1764 . 1916)) (25525 62767 53795 617000) 0 nil])
([nil nil ((#("p" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1616) (undo-tree-id248 . -1) (undo-tree-id249 . -1) 1617 (1616 . 1617) (1763 . 1764) (#(")" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . -1763) (undo-tree-id250 . -1) (undo-tree-id251 . -1) 1764 (1763 . 1764)) nil (25525 62888 225507 179000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1767 . 1768) (nil fontified nil 1616 . 1768) (1616 . 1768)) nil (25525 62888 225477 291000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo rear-nonsticky t fontified t)) . 1767)) nil (25525 62888 225469 161000) 0 nil])
([nil nil ((#("j" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . -1648) (undo-tree-id242 . -1) (1648 . 1649) 1649 (1648 . 1650) (#("j" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . -1648) (undo-tree-id243 . -1) (1648 . 1649) 1647 (1634 . 1640) (1635 . 1637) (#("  " 0 2 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "defn" "let") fontified nil help-echo cider--help-echo)) . 1634) (undo-tree-id244 . -2) (undo-tree-id245 . -2) (1636 . 1637) (1634 . 1636) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "defn" "let") fontified nil help-echo cider--help-echo)) . 1633) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (1634 . 1635) (1616 . 1634)) nil (25525 62888 225456 550000) 0 nil])
([nil nil ((#("j" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1648) (undo-tree-id241 . 1)) nil (25525 62888 225410 163000) 0 nil])
([nil nil ((#("k" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1648) (undo-tree-id240 . 1)) nil (25525 62888 225398 256000) 0 nil])
([nil nil ((#("[" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1648) (undo-tree-id239 . 1)) nil (25525 62888 225386 293000) 0 nil])
([nil nil ((#("p" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1648) (undo-tree-id238 . 1)) nil (25525 62888 225374 515000) 0 nil])
([nil nil ((#("a" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1648) (undo-tree-id237 . 1)) nil (25525 62888 225361 516000) 0 nil])
([nil nil ((#("r" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1648) (undo-tree-id236 . 1)) nil (25525 62888 225168 983000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1648) (undo-tree-id235 . 1)) nil (25525 62888 225157 558000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1648) (undo-tree-id234 . 1)) nil (25525 62888 225145 836000) 0 nil])
([nil nil ((#("d" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1648) (undo-tree-id233 . 1)) nil (25525 62888 225134 225000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1648) (undo-tree-id232 . 1)) nil (25525 62888 225122 670000) 0 nil])
([nil nil ((#("m" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1648) (undo-tree-id231 . 1)) nil (25525 62888 225111 337000) 0 nil])
([nil nil ((#("o" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1648) (undo-tree-id230 . 1)) nil (25525 62888 225099 559000) 0 nil])
([nil nil ((#("_" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1648) (undo-tree-id229 . 1)) nil (25525 62888 225087 707000) 0 nil])
([nil nil ((#("p" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1648) (undo-tree-id228 . 1)) nil (25525 62888 225075 745000) 0 nil])
([nil nil ((#("a" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1648) (undo-tree-id227 . 1)) nil (25525 62888 225064 319000) 0 nil])
([nil nil ((#("r" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1648) (undo-tree-id226 . 1)) nil (25525 62888 225052 597000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1648) (undo-tree-id225 . 1)) nil (25525 62888 225041 97000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1647) (undo-tree-id224 . -1)) nil (25525 62894 887285 190000) 0 nil])
([nil nil ((#("j" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified nil help-echo cider--help-echo)) . 1646) (1646 . 1647) (1639 . 1642) (#("i " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "parsi") fontified nil help-echo cider--help-echo) 1 2 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "parsi") fontified nil help-echo cider--help-echo)) . 1639) (1639 . 1641) (#("       " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified nil help-echo cider--help-echo) 1 2 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified nil help-echo cider--help-echo) 2 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified nil help-echo cider--help-echo) 3 4 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified nil help-echo cider--help-echo) 4 5 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified nil help-echo cider--help-echo) 5 6 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified nil help-echo cider--help-echo) 6 7 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified nil help-echo cider--help-echo)) . 1648) (1655 . 1656) (1646 . 1647) (#("t
" 0 1 (face font-lock-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo) 1 2 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1)) ((1646 . 1648) (#("t" 0 1 (face font-lock-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified nil help-echo cider--help-echo)) . 1646) (#("[" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars" "sm") fontified nil help-echo cider--help-echo)) . 1655) (1648 . 1655) (#("i " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "parsi") fontified nil help-echo cider--help-echo) 1 2 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "parsi") fontified nil help-echo cider--help-echo)) . 1639) (1639 . 1641) (#(" sm" 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1639) (#("j" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified nil help-echo cider--help-echo)) . 1646) (undo-tree-id252 . -1) (1646 . 1647)) (25525 62897 776789 359000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1640)) nil (25525 62962 319749 456000) 0 nil] [nil nil ((#("(" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id199 . 1)) ((1646 . 1647)) (25525 62894 61284 97000) 0 nil])
([nil nil ((#("m" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "m" "pars") fontified t help-echo cider--help-echo)) . 1640)) nil (25525 62962 319745 456000) 0 nil])
([nil nil ((#("l" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id198 . 1)) ((1646 . 1647)) (25525 62893 661345 594000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 1639)) nil (25525 62962 319741 531000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id195 . 1) (undo-tree-id196 . -1) (undo-tree-id197 . -1)) ((1646 . 1647)) (25525 62893 141247 406000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm") fontified t help-echo cider--help-echo)) . 1770) (undo-tree-id262 . -1)) nil (25525 62962 319736 809000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id194 . 1)) ((1646 . 1647)) (25525 62892 892967 319000) 0 nil])
([nil nil ((1770 . 1772)) nil (25525 62962 319729 457000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id193 . 1)) ((1646 . 1647)) (25525 62892 708715 851000) 0 nil])
([nil nil ((1634 . 1636) 1633) nil (25525 62962 319725 346000) 0 nil])
([nil nil ((#("[" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id192 . 1)) ((1646 . 1647)) (25525 62892 540552 296000) 0 nil])
([nil nil ((1775 . 1776)) nil (25525 62962 319721 105000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id191 . 1)) ((1646 . 1647)) (25525 62892 406894 971000) 0 nil])
([nil nil ((1845 . 1846) (1938 . 1941) (1923 . 1938) (#("." 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -1923) (undo-tree-id258 . -1) (undo-tree-id259 . -1) 1924 (1923 . 1924) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -1923) (undo-tree-id260 . -1) (undo-tree-id261 . -1) 1924 (1918 . 1924)) nil (25525 62962 319714 420000) 0 nil])
([nil nil ((#("m" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id190 . 1)) ((1646 . 1647)) (25525 62892 189338 188000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args" "ref") fontified t help-echo cider--help-echo)) . 1845) (undo-tree-id257 . 1)) nil (25525 62962 319691 69000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id189 . 1)) ((1646 . 1647)) (25525 62891 997007 766000) 0 nil])
([nil nil ((1845 . 1846) (#("_" 0 1 (face font-lock-variable-name-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args" "ref") fontified t help-echo cider--help-echo)) . 1845) (undo-tree-id256 . 1)) nil (25525 62962 319680 588000) 0 nil])
([nil nil ((#("(" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id188 . 1)) ((1646 . 1647)) (25525 62891 836215 757000) 0 nil])
([nil nil ((1918 . 1920) 1929) nil (25525 62962 319640 292000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id187 . 1)) ((1646 . 1647)) (25525 62891 692519 618000) 0 nil])
([nil nil ((1920 . 1927) (t 25525 62962 336638 211000)) nil (25525 63379 808837 519000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id186 . 1)) ((1646 . 1647)) (25525 62891 532046 714000) 0 nil])
([nil nil ((#("u" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . -1924) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("r" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . -1925) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . -1926) (undo-tree-id269 . -1) (undo-tree-id270 . -1) 1927) nil (25525 63379 808829 834000) 0 nil])
([nil nil ((#("a" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id185 . 1)) ((1646 . 1647)) (25525 62891 380034 700000) 0 nil])
([nil nil ((1924 . 1928)) nil (25525 63379 808804 816000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id184 . 1)) ((1646 . 1647)) (25525 62891 212571 240000) 0 nil])
([nil nil ((1951 . 1952)) nil (25525 63379 808800 742000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id183 . 1)) ((1646 . 1647)) (25525 62891 36401 655000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . -1951) (undo-tree-id263 . -1) (undo-tree-id264 . -1) 1952) nil (25525 63379 808794 446000) 0 nil])
([nil nil ((#("-" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id182 . 1)) ((1646 . 1647)) (25525 62890 867784 261000) 0 nil])
([nil nil ((1951 . 1952)) nil (25525 63379 808749 595000) 0 nil])
([nil nil ((#("m" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id181 . 1)) ((1646 . 1647)) (25525 62890 716593 692000) 0 nil])
([nil nil ((1953 . 1954) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified nil help-echo cider--help-echo)) . 1951) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (1952 . 1953) (1772 . 1774) (#(")" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm") fontified t help-echo cider--help-echo)) . -1772) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (#(")" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_") fontified t help-echo cider--help-echo)) . -1773) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (#("
" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1774) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("(" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1775) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (#("T" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1776) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (#("h" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1777) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("r" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1778) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("e" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1779) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (#("a" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified nil help-echo cider--help-echo)) . -1780) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (#("d" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified nil help-echo cider--help-echo)) . -1781) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("/" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1782) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (#("s" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1783) (undo-tree-id296 . -1) (#("l" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1784) (undo-tree-id297 . -1) (#("e" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1785) (undo-tree-id298 . -1) (#("e" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1786) (undo-tree-id299 . -1) (#("p" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1787) (undo-tree-id300 . -1) 1788 (1784 . 1788) (1775 . 1784) (t 25525 63379 817484 283000)) nil (25525 63559 131191 539000) 0 nil])
([nil nil ((#("a" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id180 . 1)) ((1646 . 1647)) (25525 62890 555740 576000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1956 . 1957) (#("
" 0 1 (fontified nil cider-locals nil)) . -2083) (1954 . 2084) 1953) nil (25525 63559 131064 153000) 0 nil])
([nil nil ((#("c" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id179 . 1)) ((1646 . 1647)) (25525 62890 402781 234000) 0 nil])
([nil nil ((#("pars" 0 4 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . 1974)) nil (25525 63559 131355 314000) 0 nil])
([nil nil ((#("h" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id178 . 1)) ((1646 . 1647)) (25525 62890 220555 962000) 0 nil])
([nil nil ((#("j" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2060) (undo-tree-id421 . -1) (2060 . 2061) 2061 (2060 . 2074) (1981 . 1983) (1974 . 1981)) nil (25525 63673 249661 526000) 0 nil] [nil nil ((#(" {:" 0 2 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t) 2 3 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . 1974)) ((1974 . 1977)) (25525 63559 131044 690000) 0 nil])
([nil nil ((#("i" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id177 . 1)) ((1646 . 1647)) (25525 62890 67736 542000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059)) nil (25525 63673 249651 341000) 0 nil])
nil
([nil nil ((#("n" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id176 . 1)) ((1646 . 1647)) (25525 62889 908802 455000) 0 nil])
([nil nil ((#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id420 . 1)) nil (25525 63673 249646 860000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id175 . 1)) ((1646 . 1647)) (25525 62889 755891 613000) 0 nil])
([nil nil ((#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id419 . 1)) nil (25525 63673 249639 378000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id174 . 1)) ((1646 . 1647)) (25525 62889 583216 504000) 0 nil])
([nil nil ((#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id418 . 1)) nil (25525 63673 249632 82000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id173 . 1)) ((1646 . 1647)) (25525 62889 340133 597000) 0 nil])
([nil nil ((#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified nil help-echo cider--help-echo)) . 2059) (undo-tree-id417 . 1)) nil (25525 63673 249624 675000) 0 nil])
([nil nil ((#("(" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id172 . 1)) ((1646 . 1647)) (25525 62889 176567 214000) 0 nil])
([nil nil ((#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified nil help-echo cider--help-echo)) . 2059) (undo-tree-id416 . 1)) nil (25525 63673 249617 138000) 0 nil])
([nil nil ((#("k" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id171 . 1)) ((1646 . 1647)) (25525 62888 779979 705000) 0 nil])
([nil nil ((#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified nil help-echo cider--help-echo)) . 2059) (undo-tree-id415 . 1)) nil (25525 63673 249609 527000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id170 . 1)) ((1646 . 1647)) (25525 62888 225770 43000) 0 nil])
([nil nil ((#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id414 . 1)) nil (25525 63673 249602 120000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "pars") fontified t help-echo cider--help-echo)) . 1646) (undo-tree-id169 . 1)) ((1646 . 1647)) (25525 62888 224465 278000) 0 nil])
([nil nil ((#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id413 . 1)) nil (25525 63673 249594 583000) 0 nil])
nil
([nil nil ((#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id412 . 1)) nil (25525 63673 249586 657000) 0 nil])
([nil nil ((#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id411 . 1)) nil (25525 63673 249578 861000) 0 nil])
([nil nil ((#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id410 . 1)) nil (25525 63673 249570 880000) 0 nil])
([nil nil ((#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id409 . 1)) nil (25525 63673 249563 121000) 0 nil])
([nil nil ((#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id408 . 1)) nil (25525 63673 249555 380000) 0 nil])
([nil nil ((#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id407 . 1)) nil (25525 63673 249547 640000) 0 nil])
([nil nil ((#(":" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id406 . 1)) nil (25525 63673 249540 343000) 0 nil])
([nil nil ((#("h" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id405 . 1)) nil (25525 63673 249532 436000) 0 nil])
([nil nil ((#("r" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id404 . 1)) nil (25525 63673 249525 159000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id403 . 1)) nil (25525 63673 249517 788000) 0 nil])
([nil nil ((#("(" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id402 . 1)) nil (25525 63673 249510 529000) 0 nil])
([nil nil ((#("+" 0 1 (face font-lock-function-name-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id401 . 1)) nil (25525 63673 249503 159000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id400 . 1)) nil (25525 63673 249495 418000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-function-name-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id399 . 1)) nil (25525 63673 249487 696000) 0 nil])
([nil nil ((#("a" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id398 . 1)) nil (25525 63673 249480 289000) 0 nil])
([nil nil ((#("l" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id397 . 1)) nil (25525 63673 249472 919000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id396 . 1)) nil (25525 63673 249465 178000) 0 nil])
([nil nil ((#("(" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id395 . 1)) nil (25525 63673 249457 752000) 0 nil])
([nil nil ((#(":" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id394 . 1)) nil (25525 63673 249450 142000) 0 nil])
([nil nil ((#("h" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id393 . 1)) nil (25525 63673 249442 512000) 0 nil])
([nil nil ((#("r" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id392 . 1)) nil (25525 63673 249434 623000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id391 . 1)) nil (25525 63673 249426 975000) 0 nil])
([nil nil ((#("@" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id390 . 1)) nil (25525 63673 249419 346000) 0 nil])
([nil nil ((#("p" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id389 . 1)) nil (25525 63673 249411 587000) 0 nil])
([nil nil ((#("a" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id388 . 1)) nil (25525 63673 249403 957000) 0 nil])
([nil nil ((#("r" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id387 . 1)) nil (25525 63673 249396 69000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2059) (undo-tree-id386 . 1)) nil (25525 63673 249386 958000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2038) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2039) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2040) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2041) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2042) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2043) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2044) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2045) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2046) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2047) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2048) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2049) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2050) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2051) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2052) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2053) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2054) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2055) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2056) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2057) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2058) (undo-tree-id384 . -1) (undo-tree-id385 . -1) 2059) nil (25525 63673 249325 51000) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . -2034) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2035) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2036) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -2037) (undo-tree-id342 . -1) (undo-tree-id343 . -1) 2038) nil (25525 63673 249140 944000) 0 nil])
([nil nil ((2034 . 2035)) nil (25525 63673 249108 945000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2034) (undo-tree-id329 . 1) (#(")" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2034) (undo-tree-id330 . 1) (#(")" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2034) (undo-tree-id331 . 1) (#("}" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2034) (undo-tree-id332 . 1) (#(")" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2034) (undo-tree-id333 . 1) (#(")" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . 2034) (undo-tree-id334 . 1) (#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . 2034)) nil (25525 63673 249100 834000) 0 nil])
([nil nil ((2034 . 2035)) nil (25525 63673 249075 816000) 0 nil])
([nil nil ((2035 . 2037)) nil (25525 63673 249071 871000) 0 nil])
([nil nil ((#("." 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . -1978) (undo-tree-id327 . -1) (undo-tree-id328 . -1) 1979) nil (25525 63673 249066 946000) 0 nil])
([nil nil ((1978 . 1979)) nil (25525 63673 249055 946000) 0 nil])
([nil nil ((#("(" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . -1991) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (#(":" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . -1992) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (#("m" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . -1993) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (#("o" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . -1994) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (#("d" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . -1995) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (#("e" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . -1996) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . -1997) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("@" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . -1998) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (#("p" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . -1999) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (#("a" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . -2000) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (#("r" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . -2001) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (#("s" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . -2002) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (#(")" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . -2003) (undo-tree-id325 . -1) (undo-tree-id326 . -1) 2004) nil (25525 63673 249041 539000) 0 nil])
([nil nil ((1991 . 1998)) nil (25525 63673 248921 23000) 0 nil])
([nil nil ((2023 . 2024) (t 25525 63673 271483 273000)) nil (25525 63706 309680 652000) 0 nil])
([nil nil ((2023 . 2026)) nil (25525 63706 309673 837000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . -2024) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (#("," 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . -2025) (undo-tree-id424 . -1) (undo-tree-id425 . -1) 2026) nil (25525 63706 309665 41000) 0 nil])
([nil nil ((#("i" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . 2024)) nil (25525 63706 309611 23000) 0 nil])
([nil nil ((2024 . 2028)) nil (25525 63715 397529 646000) 0 nil])
([nil nil ((#("V" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -1953) (undo-tree-id433 . -1) (undo-tree-id434 . -1) 1954 (1953 . 1954) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -1953) (undo-tree-id435 . -1) (undo-tree-id436 . -1) 1954 (1953 . 1954) (1970 . 1973) (1965 . 1970) (#("o" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -1965) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -1966) (undo-tree-id439 . -1) (undo-tree-id440 . -1) 1967 (1962 . 1967) (1956 . 1962) (#("e" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") fontified t help-echo cider--help-echo)) . -1956) (undo-tree-id441 . -1) 1957 (1953 . 1957) (t 25525 63706 340820 417000)) nil (25525 63777 543800 50000) 0 nil] [nil nil ((2018 . 2074) (#("                                                        " 0 56 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified nil)) . 2017) (undo-tree-id426 . -56) (undo-tree-id427 . -56) (2016 . 2074) (t 25525 63706 340820 417000)) ((#("
                                                        
" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t) 1 57 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified nil) 57 58 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified nil)) . 2016) (undo-tree-id428 . -58) (undo-tree-id429 . -58) (undo-tree-id430 . -58) (2017 . 2073) (#("                                                        " 0 56 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "pars" "sm" "_" "args") help-echo cider--help-echo fontified t)) . 2018) (undo-tree-id431 . -55) (undo-tree-id432 . -55)) (25525 63715 396716 959000) 0 nil])
([nil nil ((1953 . 1954) 1952) nil (25525 63942 930060 71000) 0 nil])
nil
([nil nil ((#("              " 0 14 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1052) (undo-tree-id471 . -14) 1066 (1052 . 1066) (1052 . 1053) 1066 (t 25525 63777 569399 726000)) nil (25525 64164 375350 42000) 0 nil] [nil nil ((nil rear-nonsticky nil 1261 . 1262) (nil fontified nil 1177 . 1262) (1177 . 1262) 1176 (t 25525 63777 569399 726000)) ((#("{:conditions [#(= (:mode @pars) \"hr-target\")]
               :transition :hr-target}
" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 1 2 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 2 12 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 12 16 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 16 17 (face font-lock-function-name-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 17 19 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 19 20 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 20 24 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 24 32 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 32 43 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 43 46 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 46 61 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 61 62 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 62 72 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 72 73 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 73 74 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 74 83 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 83 84 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 84 85 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo rear-nonsticky nil fontified nil)) . 1177) (undo-tree-id458 . -84) (nil fontified t 1220 . 1223) (nil fontified t 1209 . 1220) (nil fontified t 1201 . 1209) (nil fontified t 1197 . 1201) (nil fontified t 1196 . 1197) (nil fontified t 1194 . 1196) (nil fontified t 1193 . 1194) (nil fontified t 1189 . 1193) (nil fontified t 1179 . 1189) (nil fontified t 1178 . 1179) (nil fontified t 1177 . 1178) (nil rear-nonsticky t 1261 . 1262)) (25525 63942 929203 125000) 0 nil] [nil nil ((nil rear-nonsticky nil 1151 . 1152) (nil fontified nil 1067 . 1152) (1067 . 1152) 1066 (t 25525 63777 569399 726000)) ((#("{:conditions [#(= (:mode @pars) \"hr-target\")]
               :transition :hr-target}
" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 1 2 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 2 12 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 12 16 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 16 17 (face font-lock-function-name-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 17 19 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 19 20 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 20 24 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 24 32 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 32 43 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 43 46 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 46 61 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 61 62 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 62 72 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 72 73 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 73 74 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 74 83 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 83 84 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 84 85 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo rear-nonsticky nil fontified nil)) . 1067) (undo-tree-id454 . -84) (undo-tree-id455 . -85) (undo-tree-id456 . -85) (undo-tree-id457 . -85) (nil fontified t 1110 . 1113) (nil fontified t 1099 . 1110) (nil fontified t 1091 . 1099) (nil fontified t 1087 . 1091) (nil fontified t 1086 . 1087) (nil fontified t 1084 . 1086) (nil fontified t 1083 . 1084) (nil fontified t 1079 . 1083) (nil fontified t 1069 . 1079) (nil fontified t 1068 . 1069) (nil fontified t 1067 . 1068) (nil rear-nonsticky t 1151 . 1152)) (25525 63932 763030 686000) 0 nil] [nil nil ((nil rear-nonsticky nil 1150 . 1151) (nil fontified nil 1066 . 1151) (1066 . 1151) 1065 (t 25525 63777 569399 726000)) ((#("{:conditions [#(= (:mode @pars) \"hr-target\")]
               :transition :hr-target}
" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 1 2 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 2 12 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 12 16 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 16 17 (face font-lock-function-name-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 17 19 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 19 20 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 20 24 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 24 32 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 32 43 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 43 46 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 46 61 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 61 62 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 62 72 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 72 73 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 73 74 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 74 83 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 83 84 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 84 85 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo rear-nonsticky nil fontified nil)) . 1066) (undo-tree-id450 . -84) (undo-tree-id451 . -85) (undo-tree-id452 . -85) (undo-tree-id453 . -85) (nil fontified t 1109 . 1112) (nil fontified t 1098 . 1109) (nil fontified t 1090 . 1098) (nil fontified t 1086 . 1090) (nil fontified t 1085 . 1086) (nil fontified t 1083 . 1085) (nil fontified t 1082 . 1083) (nil fontified t 1078 . 1082) (nil fontified t 1068 . 1078) (nil fontified t 1067 . 1068) (nil fontified t 1066 . 1067) (nil rear-nonsticky t 1150 . 1151)) (25525 63927 949834 346000) 0 nil] [nil nil ((nil rear-nonsticky nil 1051 . 1052) (nil fontified nil 967 . 1052) (967 . 1052) 966 (t 25525 63777 569399 726000)) ((#("{:conditions [#(= (:mode @pars) \"hr-target\")]
               :transition :hr-target}
" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 1 2 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 2 12 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 12 16 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 16 17 (face font-lock-function-name-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 17 19 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 19 20 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 20 24 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 24 32 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 32 43 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 43 46 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 46 61 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 61 62 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 62 72 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 72 73 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 73 74 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 74 83 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 83 84 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 84 85 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo rear-nonsticky nil fontified nil)) . 967) (undo-tree-id446 . -84) (undo-tree-id447 . -85) (undo-tree-id448 . -85) (undo-tree-id449 . -85) (nil fontified t 1010 . 1013) (nil fontified t 999 . 1010) (nil fontified t 991 . 999) (nil fontified t 987 . 991) (nil fontified t 986 . 987) (nil fontified t 984 . 986) (nil fontified t 983 . 984) (nil fontified t 979 . 983) (nil fontified t 969 . 979) (nil fontified t 968 . 969) (nil fontified t 967 . 968) (nil rear-nonsticky t 1051 . 1052)) (25525 63921 616650 600000) 0 nil] [nil nil ((nil rear-nonsticky nil 1052 . 1053) (nil fontified nil 968 . 1053) (968 . 1053) 967 (t 25525 63777 569399 726000)) ((#("{:conditions [#(= (:mode @pars) \"hr-target\")]
               :transition :hr-target}
" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 1 2 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 2 12 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 12 16 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 16 17 (face font-lock-function-name-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 17 19 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 19 20 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 20 24 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 24 32 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 32 43 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 43 46 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 46 61 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 61 62 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 62 72 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 72 73 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 73 74 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 74 83 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 83 84 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified nil) 84 85 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo rear-nonsticky nil fontified nil)) . 968) (undo-tree-id442 . -84) (undo-tree-id443 . -85) (undo-tree-id444 . -85) (undo-tree-id445 . -85) (nil fontified t 1011 . 1014) (nil fontified t 1000 . 1011) (nil fontified t 992 . 1000) (nil fontified t 988 . 992) (nil fontified t 987 . 988) (nil fontified t 985 . 987) (nil fontified t 984 . 985) (nil fontified t 980 . 984) (nil fontified t 970 . 980) (nil fontified t 969 . 970) (nil fontified t 968 . 969) (nil rear-nonsticky t 1052 . 1053)) (25525 63917 270173 979000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1136 . 1137) (nil fontified nil 1052 . 1137) (1052 . 1137)) nil (25525 64164 375339 987000) 0 nil])
nil
nil
nil
nil
nil
([nil nil ((#("
" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1137) (undo-tree-id470 . 1)) nil (25525 64164 375334 24000) 0 nil])
([nil nil ((1085 . 1087) (#("hr" 0 2 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1085)) nil (25525 64164 375326 691000) 0 nil])
([nil nil ((#("V" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1269) (undo-tree-id469 . -1) 1270 (1269 . 1270) (1126 . 1128) (#("hr" 0 2 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1126)) nil (25525 64164 375320 691000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1268 . 1269) (#("
" 0 1 (fontified nil cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars"))) . -1454) (1262 . 1455) 1254) nil (25525 64164 375310 969000) 0 nil])
([nil nil ((#("V" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1653) (undo-tree-id468 . -1) 1654 (1653 . 1654) (1343 . 1345) (#("r" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1343) (#("h" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1343) (#("w" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1343) (#("p" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1343) (#("w" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1343) (#("c" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1343) (1343 . 1347) (1270 . 1272) (#("hr" 0 2 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1270)) nil (25525 64164 375300 765000) 0 nil])
([nil nil ((#("                                      
" 0 21 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo) 21 39 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . 1804) (undo-tree-id467 . -5) 1809) nil (25525 64164 375285 210000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1652 . 1653) (#("
" 0 1 (fontified nil cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars"))) . -1838) (1646 . 1839) 1645) nil (25525 64164 375276 858000) 0 nil])
([nil nil ((1727 . 1736) (#("t" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1727) (#("e" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1727) (#("g" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1727) (#("r" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1727) (#("a" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1727) (#("t" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1727) (#("-" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1727) (#("r" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1727) (#("h" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1727) (1654 . 1663) (#("t" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1654) (#("e" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1654) (#("g" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1654) (#("r" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1654) (#("a" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1654) (#("hr-t" 0 4 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1654)) nil (25525 64164 375263 710000) 0 nil])
([nil nil ((#("             
" 0 13 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo) 13 14 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1249) (undo-tree-id463 . 1) (undo-tree-id464 . -13) (undo-tree-id465 . -12) (undo-tree-id466 . -13) 1261) nil (25525 64164 375249 525000) 0 nil])
([nil nil ((#("V" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -965) (undo-tree-id462 . -1) 966 (965 . 966) (1618 . 1621) (#("update" 0 6 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . 1618)) nil (25525 64164 375231 192000) 0 nil])
([nil nil ((#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1361) (#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1289) (#("   " 0 2 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 2 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo rear-nonsticky t fontified t)) . -1245) (#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1221) (#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1178) (#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1150) (undo-tree-id461 . -3) (#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1115) (1046 . 1057) (#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1022) (#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -955) 1352) nil (25525 64164 375215 767000) 0 nil])
([nil nil ((#("b" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . 2410)) nil (25525 64164 375201 175000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . 2410)) nil (25525 64164 375196 601000) 0 nil])
([nil nil ((#("b" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . 2410)) nil (25525 64164 375192 638000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . 2410)) nil (25525 64164 375188 138000) 0 nil])
([nil nil ((2416 . 2419) (#("t" 0 1 (face font-lock-string-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . -2416) (undo-tree-id459 . -1) (undo-tree-id460 . -1) 2417 (2410 . 2417)) nil (25525 64164 375176 656000) 0 nil])
([nil nil ((#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1970) (#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1946) (#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1910) (#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1832) (#("   " 0 2 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo) 2 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1782) (#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1751) (#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1718) (#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1646) (#("   " 0 2 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 2 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo rear-nonsticky t fontified t)) . -1602) (#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1574) (#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1541) (#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1469) (#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1425) (#("   " 0 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -1394) 2012 (t 25525 64164 421807 954000)) nil (25525 64292 918310 919000) 0 nil])
([nil nil ((1242 . 1245) (1242 . 1243) 1245) nil (25525 64292 918287 123000) 0 nil])
([nil nil ((1426 . 1429) (1426 . 1427) 1428) nil (25525 64292 918276 660000) 0 nil])
([nil nil ((1607 . 1610) (1607 . 1608) 1609) nil (25525 64292 918265 790000) 0 nil])
([nil nil ((1776 . 1779) (1791 . 1794) (1791 . 1792) 1793) nil (25525 64292 918253 938000) 0 nil])
([nil nil ((#(":cfrupdate-power" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 1 4 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 4 11 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 11 16 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 1775) (undo-tree-id472 . 15) (undo-tree-id473 . -4)) nil (25525 64292 918238 939000) 0 nil])
([nil nil ((1775 . 1781)) nil (25525 64292 918179 32000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sms") fontified t help-echo cider--help-echo)) . 2005) (#("r" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "smrs") fontified t help-echo cider--help-echo)) . 2005) (#("a" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "smars") fontified t help-echo cider--help-echo)) . 2005) (#("p" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "smpars") fontified t help-echo cider--help-echo)) . 2005) (2004 . 2005) (#("m" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "smpars") fontified t help-echo cider--help-echo)) . -2004) (undo-tree-id482 . -1) 2005 (2003 . 2005) (t 25525 64292 959317 311000)) nil (25525 64597 58084 324000) 0 nil])
([nil nil ((#(" (state-machine  (kettler-control pars) :start)]" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 1 2 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 2 3 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 3 4 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 4 5 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 5 6 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 6 7 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 7 8 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 8 9 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 9 10 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 10 11 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 11 12 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 12 13 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 13 14 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 14 15 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 15 16 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 16 17 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 17 18 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 18 19 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 19 20 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 20 21 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 21 40 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 40 41 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 41 46 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 46 48 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo)) . 2017) (undo-tree-id477 . -47) (undo-tree-id478 . 47) (undo-tree-id479 . -47) (undo-tree-id480 . -47) (undo-tree-id481 . -47) 2064) nil (25525 64597 58069 825000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2304 . 2305) (nil fontified nil 2257 . 2305) (2257 . 2305) 2256) nil (25525 64597 58047 603000) 0 nil])
([nil nil ((#("d" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") fontified t help-echo cider--help-echo)) . 2256) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1)) nil (25525 64597 58040 122000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") help-echo cider--help-echo fontified t)) . 2256)) nil (25525 64597 58239 134000) 0 nil])
([nil nil ((#("j" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") help-echo cider--help-echo fontified t)) . -2309) (undo-tree-id504 . -1) (2307 . 2310) (#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") help-echo cider--help-echo fontified t)) . 2307) (2307 . 2308) (2289 . 2294)) nil (25525 64657 811639 5000) 0 nil] [nil nil ((#("pars" 0 4 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") help-echo cider--help-echo fontified t)) . 2289)) ((2289 . 2293)) (25525 64597 57985 494000) 0 nil])
([nil nil ((#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") help-echo cider--help-echo fontified t)) . 2307)) nil (25525 64657 811628 801000) 0 nil])
nil
([nil nil ((#("x" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") help-echo cider--help-echo fontified t)) . 2307)) nil (25525 64657 811624 376000) 0 nil])
([nil nil ((#("]" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") help-echo cider--help-echo rear-nonsticky t fontified t)) . 2307) (undo-tree-id503 . 1)) nil (25525 64657 811619 820000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") fontified t help-echo cider--help-echo)) . 2307) (undo-tree-id502 . 1)) nil (25525 64657 811611 524000) 0 nil])
([nil nil ((#("m" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") fontified t help-echo cider--help-echo)) . 2307) (undo-tree-id501 . 1)) nil (25525 64657 811603 636000) 0 nil])
([nil nil ((#("o" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") fontified t help-echo cider--help-echo)) . 2307) (undo-tree-id500 . 1)) nil (25525 64657 811595 395000) 0 nil])
([nil nil ((#("-" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") fontified t help-echo cider--help-echo)) . 2307) (undo-tree-id499 . 1)) nil (25525 64657 811587 581000) 0 nil])
([nil nil ((#("p" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") fontified t help-echo cider--help-echo)) . 2307) (undo-tree-id498 . 1)) nil (25525 64657 811580 433000) 0 nil])
([nil nil ((#("a" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") fontified t help-echo cider--help-echo)) . 2307) (undo-tree-id497 . 1)) nil (25525 64657 811573 25000) 0 nil])
([nil nil ((#("r" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") fontified t help-echo cider--help-echo)) . 2307) (undo-tree-id496 . 1)) nil (25525 64657 811565 896000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") fontified t help-echo cider--help-echo)) . 2307) (undo-tree-id495 . 1)) nil (25525 64657 811558 230000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") fontified t help-echo cider--help-echo)) . 2307) (undo-tree-id494 . 1)) nil (25525 64657 811550 822000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") fontified t help-echo cider--help-echo)) . 2307) (undo-tree-id493 . 1)) nil (25525 64657 811542 897000) 0 nil])
([nil nil ((2009 . 2011) (2307 . 2309) (#(")" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "args") help-echo cider--help-echo fontified t)) . -2306) (undo-tree-id492 . -1) 2307 (2306 . 2307)) nil (25525 64657 811534 175000) 0 nil])
([nil nil ((#("  dd(let [sm
" 0 4 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm") fontified t help-echo cider--help-echo) 4 5 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm") fontified t help-echo cider--help-echo) 5 6 (face font-lock-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm") fontified t help-echo cider--help-echo) 6 7 (face font-lock-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm") fontified t help-echo cider--help-echo) 7 8 (face font-lock-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm") fontified t help-echo cider--help-echo) 8 9 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 9 10 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 10 11 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 11 12 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo) 12 13 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo)) . 2007) (undo-tree-id485 . 9) (undo-tree-id486 . -12) (undo-tree-id487 . 1) (undo-tree-id488 . -12) (undo-tree-id489 . -12) (undo-tree-id490 . -3) (undo-tree-id491 . -12) 2010) nil (25525 64657 811522 897000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm") fontified t help-echo cider--help-echo)) . 2078)) nil (25525 64657 811497 435000) 0 nil])
([nil nil ((2077 . 2078) (#(")" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "_") fontified t help-echo cider--help-echo)) . -2077) (undo-tree-id483 . -1) 2078 (2076 . 2077) (#(")" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "sm" "_") fontified t help-echo cider--help-echo)) . -2076) (undo-tree-id484 . -1) 2077) nil (25525 64657 811491 435000) 0 nil])
([nil nil ((#("  " 0 2 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "_") fontified t help-echo cider--help-echo)) . -2053) (#("  " 0 2 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm" "_") fontified t help-echo cider--help-echo)) . -2029) (#("  " 0 2 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "sm") fontified t help-echo cider--help-echo)) . -2009) 2069) nil (25525 64657 811451 103000) 0 nil])
([nil nil ((2073 . 2074)) nil (25525 64657 811435 752000) 0 nil])
([nil nil ((1982 . 1983) (t 25525 64657 859180 239000)) nil (25525 64662 3298 125000) 0 nil])
([nil nil ((#("w" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . -2318) (undo-tree-id506 . -1) (undo-tree-id507 . -1) 2319 (2318 . 2319) (t 25525 64662 39049 639000)) nil (25525 64750 273000 998000) 0 nil])
([nil nil ((#("hr" 0 2 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . 2380)) nil (25525 64775 978908 397000) 0 nil] [nil nil ((#("  " 0 2 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified nil help-echo cider--help-echo)) . -2318) (undo-tree-id509 . -2) 2320 (2318 . 2320) (2318 . 2319) 2355) ((#("
" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") help-echo cider--help-echo fontified nil)) . 2318) (undo-tree-id510 . 1) (#("  " 0 2 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified nil help-echo cider--help-echo)) . 2318) (2318 . 2320)) (25525 64750 272755 524000) 0 nil] [nil nil ((#("  " 0 2 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified nil help-echo cider--help-echo)) . -2318) (undo-tree-id505 . -2) 2320 (2318 . 2320) (2318 . 2319) 2332) ((#("
" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") help-echo cider--help-echo fontified nil)) . 2318) (undo-tree-id508 . 1) (#("  " 0 2 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified nil help-echo cider--help-echo)) . 2318) (2318 . 2320)) (25525 64740 885732 865000) 0 nil])
([nil nil ((2380 . 2387)) nil (25525 64775 978900 138000) 0 nil])
nil
nil
([nil nil ((#("-" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . -2385) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (#("x" 0 1 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . -2386) (undo-tree-id513 . -1) (undo-tree-id514 . -1) 2387) nil (25525 64775 978880 880000) 0 nil])
([nil nil ((#("b" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . -2398) (undo-tree-id515 . -1) (undo-tree-id516 . -1) 2399 (2398 . 2399) (t 25525 64776 45613 119000)) nil (25525 64796 821579 828000) 0 nil])
([nil nil ((2378 . 2379) (2379 . 2381) (2368 . 2370) (#("hr" 0 2 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . 2368) (t 25525 64796 885008 888000)) nil (25525 64895 867438 138000) 0 nil])
([nil nil ((#("d(xx:pulse-target @demo-pars)" 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo) 1 4 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo) 4 5 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo) 5 10 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo) 10 12 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo) 12 17 (face clojure-keyword-face cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo) 17 29 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . 2378) (undo-tree-id521 . -22) (undo-tree-id522 . 29) (undo-tree-id523 . -22)) nil (25525 64895 867414 657000) 0 nil])
([nil nil ((2377 . 2379)) nil (25525 64895 867385 177000) 0 nil])
([nil nil ((2377 . 2378)) nil (25525 64895 867378 232000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("state" "on-success" "_" "transition" "transition-list" "pars" "args") fontified t help-echo cider--help-echo)) . -2380) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) 2381) nil (25525 64895 867361 436000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -24) (undo-tree-id13 . -2) (undo-tree-id14 . -2) 26 (24 . 26) (24 . 25) 25 (t 25525 64895 912224 390000)) nil (25526 59 583090 451000) 0 nil])
([nil nil ((nil rear-nonsticky nil 26 . 27) (#("
" 0 1 (fontified nil)) . -106) (24 . 107)) nil (25526 59 583075 358000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24) (undo-tree-id12 . -1)) nil (25526 59 583068 951000) 0 nil])
([nil nil ((#("[serial-killa.statemachine :as stm])" 0 27 (fontified t) 27 28 (fontified t face clojure-keyword-face) 28 30 (fontified t face clojure-keyword-face) 30 36 (fontified t)) . 69) (undo-tree-id5 . -35) (undo-tree-id6 . -35) (undo-tree-id7 . -36) (undo-tree-id8 . -35) (undo-tree-id9 . -36) (undo-tree-id10 . -35) (undo-tree-id11 . -35) 104) nil (25526 59 583494 90000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -37) (undo-tree-id26 . -1) (37 . 38) 38 (53 . 59) (#("sp" 0 1 (fontified t) 1 2 (fontified t)) . 53)) nil (25526 79 169588 677000) 0 nil] [nil nil ((49 . 62) (#(" " 0 1 (fontified nil)) . 49) (48 . 49) (53 . 59) (#("s" 0 1 (fontified t)) . -53) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("p" 0 1 (fontified t)) . -54) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 55 (56 . 57) (#(")" 0 1 (fontified t)) . -55) (undo-tree-id4 . -1) 56 (55 . 56)) ((#(")" 0 1 (fontified nil)) . 55) (55 . 56) (#(")" 0 1 (fontified nil)) . 56) (53 . 55) (#("mockup" 0 6 (fontified nil)) . 53) (#("
" 0 1 (fontified t)) . 48) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (49 . 50) (#("             " 0 13 (fontified t)) . 49) (undo-tree-id18 . -12) (undo-tree-id19 . -12)) (25526 59 582958 953000) 0 nil])
([nil nil ((#("serial" 0 6 (fontified t)) . 37) (undo-tree-id52 . 6)) nil (25526 379 290950 123000) 0 nil] [nil nil ((1 . 2) (1 . 2) (#("(ns state-machine.core
  (:require [serial-port :as mockup]
" 0 1 (fontified t) 1 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 22 (fontified t face font-lock-type-face) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t rear-nonsticky t) 25 26 (fontified t) 26 27 (fontified t face clojure-keyword-face) 27 34 (fontified t face clojure-keyword-face) 34 47 (fontified t) 47 48 (fontified t) 48 49 (fontified t face clojure-keyword-face) 49 51 (fontified t face clojure-keyword-face) 51 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t)) . 1) (undo-tree-id20 . -36) (undo-tree-id21 . 24) (undo-tree-id22 . -23) (undo-tree-id23 . -36) (undo-tree-id24 . -23) (undo-tree-id25 . -36) 37) ((1 . 61) (#("
" 0 1 (fontified nil)) . 1) (undo-tree-id27 . 1) (#("u" 0 1 (fontified t)) . 1)) (25526 79 169331 423000) 0 nil])
nil
([nil nil ((#("-" 0 1 (fontified t)) . 37) (undo-tree-id51 . 1)) nil (25526 379 290941 771000) 0 nil])
nil
([nil nil ((68 . 69) (37 . 43) (#("port" 0 4 (fontified t)) . 37) (undo-tree-id50 . 4)) nil (25526 379 290933 142000) 0 nil])
([nil nil ((#("            d
" 0 13 (fontified t) 13 14 (fontified t)) . 56) (undo-tree-id42 . -12) (undo-tree-id43 . 1) (undo-tree-id44 . -12) (undo-tree-id45 . -12) (undo-tree-id46 . -12) (undo-tree-id47 . 1) (undo-tree-id48 . -12) (undo-tree-id49 . -12) 68) nil (25526 379 290922 457000) 0 nil])
([nil nil ((2106 . 2107) 2106) nil (25526 379 290894 587000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2109 . 2110) (#("
" 0 1 (cider-locals ("args") fontified nil)) . -2831) (2107 . 2832)) nil (25526 379 290889 550000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . 2106)) nil (25526 379 290884 32000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . 2106) (undo-tree-id41 . -1)) nil (25526 379 290879 254000) 0 nil])
([nil nil ((#("V" 0 1 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t)) . -2111) (undo-tree-id40 . -1) 2112 (2111 . 2112) (2361 . 2363) (2361 . 2362)) nil (25526 379 290870 921000) 0 nil])
([nil nil ((#("  (def sim-pars {
                 :time-inc 0.1
                 :relax-time 7
                 :max-pulse 170
                 :ctrl-treshold 10
                 :pulse-perf-drift 0.08
                 :max-drift 20
                 :rest-pulse 70})
  
  ;; labels taken from serial :pulse :rpm :speed :dist :req-power :energy :time :power
  (def kettler-state (atom {
                            :pulse 70
                            :pulse-target 145
                            :power 80
                            :req-power 80
                            :time 0 
                            :rpm 100
                            :speed 10
                            :dist 0
                            :energy 0}))
" 0 3 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 3 6 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face font-lock-keyword-face) 6 7 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 7 15 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face font-lock-variable-name-face) 15 18 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 18 35 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 35 36 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 36 44 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 44 66 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 66 67 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 67 77 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 77 97 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 97 98 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 98 107 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 107 129 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 129 130 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 130 143 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 143 164 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 164 165 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 165 181 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 181 204 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 204 205 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 205 214 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 214 235 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 235 236 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 236 246 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 246 251 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 251 252 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 252 254 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 254 255 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 255 257 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 257 260 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face font-lock-comment-delimiter-face) 260 342 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face font-lock-comment-face) 342 345 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 345 348 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face font-lock-keyword-face) 348 349 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 349 362 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face font-lock-variable-name-face) 362 399 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 399 400 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 400 405 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 405 435 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 435 437 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 437 438 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 438 450 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 450 455 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 455 483 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 483 484 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 484 489 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 489 500 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 500 502 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 502 503 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 503 518 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 518 521 (help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t fontified t) 521 522 (help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face fontified t) 522 531 (help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face fontified t) 531 535 (help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t fontified t) 535 563 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 563 564 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 564 568 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 568 600 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 600 601 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 601 604 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 604 637 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 637 638 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 638 643 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 643 675 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 675 676 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 676 680 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 680 711 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 711 712 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 712 718 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t face clojure-keyword-face) 718 723 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t) 723 724 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t)) . 2109) (undo-tree-id32 . 722) (undo-tree-id33 . -684) (undo-tree-id34 . -723) (undo-tree-id35 . -1) (undo-tree-id36 . -684) (undo-tree-id37 . -684) (undo-tree-id38 . -1) (undo-tree-id39 . -684) 2793) nil (25526 379 290859 162000) 0 nil])
([nil nil ((nil rear-nonsticky nil 957 . 958) (#("
" 0 1 (cider-locals nil cider-block-dynamic-font-lock t fontified nil)) . -1679) (955 . 1680)) nil (25526 379 290828 848000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -1627) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -1593) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -1557) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -1522) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -1487) (#("  " 0 2 (cider-locals nil cider-block-dynamic-font-lock t fontified t)) . -1447) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -1411) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -1367) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -1331) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -1278) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -1193) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -1192) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -1175) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -1146) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -1108) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -1075) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -1045) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -1016) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -987) (#("  " 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t) 1 2 (fontified t rear-nonsticky t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -956) (undo-tree-id30 . -2) (undo-tree-id31 . -2) 1641) nil (25526 379 291152 804000) 0 nil])
([nil nil ((1640 . 1641)) nil (25526 547 278416 687000) 0 nil] [nil nil ((#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . -1669) (undo-tree-id28 . -2) (undo-tree-id29 . -2) 1671 (1668 . 1671) 1640) ((#("
  " 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars")) 1 3 (fontified nil help-echo cider--help-echo cider-locals ("pars"))) . 1668) (undo-tree-id53 . -3) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (1669 . 1671)) (25526 379 290784 163000) 0 nil])
([nil nil ((2092 . 2105) (#("pars" 0 4 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t)) . 2092)) nil (25526 547 278411 761000) 0 nil])
nil
([nil nil ((#("pars" 0 4 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t)) . 2285) (undo-tree-id117 . 1)) nil (25526 547 278406 2000) 0 nil])
([nil nil ((2285 . 2293)) nil (25526 547 278398 335000) 0 nil])
([nil nil ((#("." 0 1 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t)) . -2292) (undo-tree-id116 . -1) 2293) nil (25526 547 278393 558000) 0 nil])
([nil nil ((2292 . 2297)) nil (25526 547 278385 595000) 0 nil])
([nil nil ((2297 . 2340)) nil (25526 547 278381 391000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2319) (undo-tree-id95 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2320) (undo-tree-id96 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2321) (undo-tree-id97 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2322) (undo-tree-id98 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2323) (undo-tree-id99 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2324) (undo-tree-id100 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2325) (undo-tree-id101 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2326) (undo-tree-id102 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2327) (undo-tree-id103 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2328) (undo-tree-id104 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2329) (undo-tree-id105 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2330) (undo-tree-id106 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2331) (undo-tree-id107 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2332) (undo-tree-id108 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2333) (undo-tree-id109 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2334) (undo-tree-id110 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2335) (undo-tree-id111 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2336) (undo-tree-id112 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2337) (undo-tree-id113 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2338) (undo-tree-id114 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t)) . -2339) (undo-tree-id115 . -1) 2340) nil (25526 547 278366 225000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2300) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2301) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2302) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2303) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2304) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified nil cider-locals ("pars"))) . -2305) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2306) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2307) (undo-tree-id83 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2308) (undo-tree-id84 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2309) (undo-tree-id85 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2310) (undo-tree-id86 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2311) (undo-tree-id87 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2312) (undo-tree-id88 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2313) (undo-tree-id89 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2314) (undo-tree-id90 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2315) (undo-tree-id91 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2316) (undo-tree-id92 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2317) (undo-tree-id93 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2318) (undo-tree-id94 . -1) 2319) nil (25526 547 278271 709000) 0 nil])
([nil nil ((#("a" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2294) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("t" 0 1 (help-echo cider--help-echo fontified t cider-locals nil cider-block-dynamic-font-lock t)) . -2295) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2296) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("
" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars") cider-block-dynamic-font-lock t)) . -2297) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2298) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2299) (undo-tree-id67 . -1) (undo-tree-id68 . -1) 2300) nil (25526 547 278170 822000) 0 nil])
([nil nil ((2294 . 2298)) nil (25526 547 278094 157000) 0 nil])
([nil nil ((55 . 56) (t 25526 547 314332 355000)) nil (25526 572 569966 18000) 0 nil])
([nil nil ((#("mockup" 0 6 (cider-block-dynamic-font-lock t cider-locals nil help-echo cider--help-echo fontified t)) . 48) (t 25526 572 613786 35000)) nil (25526 1082 647601 261000) 0 nil])
([nil nil ((48 . 50)) nil (25526 1082 647581 706000) 0 nil])
([nil nil ((55 . 58) (t 25526 1082 952364 901000)) nil (25526 1218 211230 488000) 0 nil])
([nil nil ((55 . 57)) nil (25526 1218 211222 506000) 0 nil])
([nil nil ((#("x" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 55) (#("x" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 55) (#("x" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 55) (#("x" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 55) (#("x" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 55)) nil (25526 1456 104777 502000) 0 nil])
([nil nil ((37 . 38) (t 25526 1218 259043 127000)) nil (25526 1460 196552 151000) 0 nil] [nil nil ((#("  " 0 2 (cider-block-dynamic-font-lock t cider-locals nil help-echo cider--help-echo fontified t)) . -53) (undo-tree-id6 . -2) (undo-tree-id7 . -2) 55 (52 . 55) (t 25526 1218 259043 127000) 37) ((#("
  " 0 1 (cider-block-dynamic-font-lock t cider-locals nil help-echo cider--help-echo fontified t) 1 3 (cider-block-dynamic-font-lock t cider-locals nil help-echo cider--help-echo fontified nil)) . 52) (undo-tree-id8 . -3) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (53 . 55)) (25526 1456 103997 131000) 0 nil] [nil nil ((38 . 52) (37 . 38) (t 25526 1218 259043 127000)) ((#("b" 0 1 (cider-block-dynamic-font-lock t cider-locals nil help-echo cider--help-echo fontified nil)) . 37) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (#("
             " 0 14 (cider-block-dynamic-font-lock t cider-locals nil help-echo cider--help-echo fontified t)) . 38) (undo-tree-id3 . -13) (undo-tree-id4 . -1) (undo-tree-id5 . -13)) (25526 1399 905018 843000) 0 nil])
([nil nil ((37 . 43) (t 25526 1460 243309 119000)) nil (25526 1493 428926 423000) 0 nil])
nil
nil
([nil nil ((43 . 50)) nil (25526 1493 428921 812000) 0 nil])
([nil nil ((#("b" 0 1 (cider-block-dynamic-font-lock t cider-locals nil help-echo cider--help-echo fontified t)) . -48) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("n" 0 1 (cider-block-dynamic-font-lock t cider-locals nil help-echo cider--help-echo fontified t)) . -49) (undo-tree-id13 . -1) (undo-tree-id14 . -1) 50) nil (25526 1493 428914 979000) 0 nil])
([nil nil ((48 . 50)) nil (25526 1493 428863 999000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2232) (#("u" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2232) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("/" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2232) (#("u" 0 1 (face font-lock-type-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2232) (#("m" 0 1 (face font-lock-type-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2232) (2234 . 2236) (2232 . 2234) (2231 . 2233) (#("/" 0 1 (face font-lock-function-name-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2231) (undo-tree-id36 . -1) 2232 (2230 . 2232) (2231 . 2262) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified nil)) . 2230) (undo-tree-id37 . -1) (2231 . 2232) (#("i" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2231) (undo-tree-id38 . -1) 2232 (2231 . 2232) (t 25526 1493 462537 737000)) nil (25526 1839 372549 799000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2236 . 2237) (#("
" 0 1 (fontified nil cider-locals ("args" "n"))) . -2276) (2232 . 2277) 2231) nil (25526 1839 372509 449000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2232) (undo-tree-id19 . -1) 2233 (#(")" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2272) (undo-tree-id20 . -1) 2273 (2271 . 2273) (#(")" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2271) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 2272 (2232 . 2233) (#("
" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2232) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2233) (undo-tree-id26 . -1) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2234) (undo-tree-id27 . -1) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2235) (undo-tree-id28 . -1) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo rear-nonsticky t fontified t)) . -2236) (undo-tree-id29 . -1) 2237) nil (25526 1839 372497 282000) 0 nil])
([nil nil ((2388 . 2421) (#("                " 0 16 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2388) (2361 . 2362) (2272 . 2306) (#("                               " 0 31 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . 2272) 2417) nil (25526 1839 372452 691000) 0 nil])
([nil nil ((2387 . 2389)) nil (25526 1839 372445 506000) 0 nil])
([nil nil ((#("V" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2388)) nil (25526 1839 372440 765000) 0 nil])
([nil nil ((#("                 " 0 17 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2405) (undo-tree-id15 . -13) (undo-tree-id16 . -13) (undo-tree-id17 . -13) (undo-tree-id18 . -13) 2418) nil (25526 1839 372429 154000) 0 nil])
([nil nil ((2233 . 2236) (t 25526 1839 404656 560000)) nil (25526 1857 754386 997000) 0 nil])
([nil nil ((2231 . 2232) (t 25526 1857 794243 603000)) nil (25526 2258 62677 4000) 0 nil])
([nil nil ((#("x" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2231) (undo-tree-id44 . 1)) nil (25526 2258 62665 930000) 0 nil])
([nil nil ((#("(" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2231) (undo-tree-id39 . 1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1)) nil (25526 2258 62647 579000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2389)) nil (25526 2258 62570 747000) 0 nil])
([nil nil ((2569 . 2603) (t 25526 2258 95345 783000)) nil (25526 2277 692480 372000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2640 . 2641) (nil fontified nil 2603 . 2641) (2603 . 2641) 2602) nil (25526 2336 803333 705000) 0 nil] [nil nil ((nil rear-nonsticky nil 2603 . 2604) (nil fontified nil 2603 . 2604) (2603 . 2604) 2602) ((#(")" 0 1 (cider-locals ("pars") help-echo cider--help-echo rear-nonsticky nil fontified nil)) . 2603) (nil rear-nonsticky t 2603 . 2604)) (25526 2277 692295 561000) 0 nil])
([nil nil ((#("b" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2635)) nil (25526 2336 803327 649000) 0 nil])
nil
([nil nil ((#("u" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2635)) nil (25526 2336 803323 742000) 0 nil])
([nil nil ((#("f" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2635)) nil (25526 2336 803319 298000) 0 nil])
([nil nil ((#("f" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2635)) nil (25526 2336 803315 242000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2634)) nil (25526 2336 803310 890000) 0 nil])
([nil nil ((#("(" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803306 668000) 0 nil])
([nil nil ((#("u" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803302 224000) 0 nil])
([nil nil ((#("p" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803298 187000) 0 nil])
([nil nil ((#("d" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803294 57000) 0 nil])
([nil nil ((#("a" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803290 132000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803286 113000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803282 113000) 0 nil])
([nil nil ((#("-" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803278 39000) 0 nil])
([nil nil ((#("p" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803273 725000) 0 nil])
([nil nil ((#("o" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803269 58000) 0 nil])
([nil nil ((#("w" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803265 3000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803261 151000) 0 nil])
([nil nil ((#("r" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified nil)) . 2603)) nil (25526 2336 803257 318000) 0 nil])
([nil nil ((#("-" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803253 558000) 0 nil])
([nil nil ((#("p" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803249 170000) 0 nil])
([nil nil ((#("i" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803245 3000) 0 nil])
([nil nil ((#("d" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803240 392000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803235 929000) 0 nil])
([nil nil ((#("k" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803231 151000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803227 77000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803222 22000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803217 744000) 0 nil])
([nil nil ((#("l" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803213 96000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803208 800000) 0 nil])
([nil nil ((#("r" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803204 337000) 0 nil])
([nil nil ((#("-" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803200 115000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803195 856000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803191 763000) 0 nil])
([nil nil ((#("a" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803187 208000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803183 23000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603)) nil (25526 2336 803178 560000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2603) (undo-tree-id46 . -1)) nil (25526 2336 803173 375000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("pars") help-echo cider--help-echo rear-nonsticky t fontified t)) . 2603)) nil (25526 2336 803164 245000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . 2603) (undo-tree-id45 . 1)) nil (25526 2336 803157 764000) 0 nil])
([nil nil ((2569 . 2570)) nil (25526 2336 803073 359000) 0 nil])
([nil nil ((3028 . 3032) (#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . -3028) (undo-tree-id0 . -1) (#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . -3029) (undo-tree-id1 . -1) 3030 (3029 . 3030) (#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . -3029) (undo-tree-id2 . -1) 3030 (#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . -3030) (undo-tree-id3 . -1) 3031 (3030 . 3031) (2978 . 2982) (2972 . 2978) (#(" " 0 1 (help-echo cider--help-echo fontified nil cider-locals ("state" "pars" "control" "sm"))) . 2971) (undo-tree-id4 . -1) (2933 . 2935) (2970 . 2971) (2967 . 2970) (#("]" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . 2967) (#("0" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . 2967) (#("4" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . 2967) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . 2967) (#("_" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . 2967) (#("[" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . 2967) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . 2967) (#("s" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . 2967) (#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . 2967) (#("m" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . 2967) (#("i" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . 2967) (#("t" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . 2967) (#("o" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . 2967) (#("d" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . 2967) (2955 . 2967) (#(":" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm") face clojure-keyword-face)) . -2955) (undo-tree-id5 . -1) (#("m" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm") face clojure-keyword-face)) . -2956) (undo-tree-id6 . -1) (#("o" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm") face clojure-keyword-face)) . -2957) (undo-tree-id7 . -1) (#("i" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm") face clojure-keyword-face)) . -2958) (undo-tree-id8 . -1) (#("d" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm") face clojure-keyword-face)) . -2959) (undo-tree-id9 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm") face clojure-keyword-face)) . -2960) (undo-tree-id10 . -1) 2961 (2953 . 2961) (2949 . 2953) (#("s" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm") face font-lock-string-face)) . -2949) (undo-tree-id11 . -1) (#("t" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm") face font-lock-string-face)) . -2950) (undo-tree-id12 . -1) 2951 (2941 . 2951) (#(":" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm") face clojure-keyword-face)) . -2941) (undo-tree-id13 . -1) (#("o" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm") face clojure-keyword-face)) . -2942) (undo-tree-id14 . -1) (#("d" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm") face clojure-keyword-face)) . -2943) (undo-tree-id15 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm") face clojure-keyword-face)) . -2944) (undo-tree-id16 . -1) 2945 (2941 . 2945) (2934 . 2941) (2923 . 2930) (2922 . 2923) (2908 . 2909) (2920 . 2921) (2906 . 2920) (2899 . 2906) (#("." 0 1 (fontified t help-echo cider--help-echo cider-locals ("state" "pars" "control" "90" "pw-target" "demo-pars" "ref-set" "dosync" "20000" "Thread/sleep" "demo-pars" "kettler-control" "state-machine" "long-thread" "future" "135" "hr-target" "ref" "demo-pars" "def" "args" "state-machine" "for" "loop" "demo" "-main" "defn" "sm"))) . -2899) (undo-tree-id17 . -1) 2900 (2892 . 2900) (2887 . 2892) (2884 . 2887) (2881 . 2884) (2875 . 2880) (#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("t" "pars" "control"))) . -2875) (undo-tree-id18 . -1) (#("s" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ts" "pars" "control"))) . -2876) (undo-tree-id19 . -1) (#("r" 0 1 (fontified t help-echo cider--help-echo cider-locals ("tsr" "pars" "control"))) . -2877) (undo-tree-id20 . -1) (#("a" 0 1 (fontified t help-echo cider--help-echo cider-locals ("tsra" "pars" "control"))) . -2878) (undo-tree-id21 . -1) (#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("tsrat" "pars" "control"))) . -2879) (undo-tree-id22 . -1) 2880 (2874 . 2880) (2866 . 2874) (#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("contt"))) . -2866) (undo-tree-id23 . -1) 2867 (2862 . 2867) (#("sm" 0 2 (fontified t help-echo cider--help-echo cider-locals ("sm"))) . 2862) (t 25526 2336 853610 98000)) nil (25527 18719 876674 132000) 0 nil])
([nil nil ((3011 . 3019) (#("    " 0 4 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . 3011) (2983 . 2991) (#("    " 0 4 (help-echo cider--help-echo fontified t cider-locals ("state" "pars" "control" "sm"))) . 2983) 3023) nil (25527 18719 877039 167000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3355 . 3356) (#("
" 0 1 (cider-locals ("state" "pars" "control" "sm" "args") fontified nil)) . -3444) (3353 . 3445) 3287) nil (25527 18739 47859 961000) 0 nil] [nil nil ((nil rear-nonsticky nil 3359 . 3360) (#("
" 0 1 (cider-locals ("state" "pars" "control" "sm" "args") fontified nil)) . -3448) (3357 . 3449) 3354) ((#("
  (Thread/sleep 20000) 
  (dosync (ref-set demo-pars {:mode \"pw-target\"  :pw-target 90})) 
" 0 1 (fontified t help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args")) 1 2 (fontified nil help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args")) 2 3 (fontified nil rear-nonsticky nil help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args")) 3 4 (fontified nil help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args")) 4 10 (fontified nil help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args") face font-lock-type-face) 10 25 (fontified nil help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args")) 25 28 (fontified nil help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args")) 28 34 (fontified nil help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args") face font-lock-keyword-face) 34 55 (fontified nil help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args")) 55 56 (fontified nil help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args") face clojure-keyword-face) 56 60 (fontified nil help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args") face clojure-keyword-face) 60 61 (fontified nil help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args")) 61 72 (fontified nil help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args") face font-lock-string-face) 72 74 (fontified nil help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args")) 74 75 (fontified nil help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args") face clojure-keyword-face) 75 84 (fontified nil help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args") face clojure-keyword-face) 84 90 (fontified nil help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args")) 90 91 (fontified nil help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args")) 91 92 (cider-locals ("state" "pars" "control" "sm" "args") fontified nil)) . 3357) (undo-tree-id24 . -3) (undo-tree-id25 . -91) (undo-tree-id26 . -1) (undo-tree-id27 . -91) (undo-tree-id28 . -1) (undo-tree-id29 . -3) (3448 . 3449) (nil rear-nonsticky t 3359 . 3360)) (25527 18719 876420 781000) 0 nil])
([nil nil ((#("pw-target" 0 9 (fontified t help-echo cider--help-echo cider-locals ("state" "pars" "control" "sm" "args") face font-lock-string-face)) . 3415)) nil (25527 18739 47851 128000) 0 nil])
nil
([nil nil ((3415 . 3419)) nil (25527 18739 47837 183000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -37) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -38) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("a" 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -39) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -40) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -41) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("-" 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -42) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("m" 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -43) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("a" 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -44) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("c" 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -45) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("h" 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -46) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("i" 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -47) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("n" 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -48) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -49) (undo-tree-id54 . -1) (undo-tree-id55 . -1) 50 (t 25527 18739 449744 808000)) nil (25527 18822 817244 783000) 0 nil])
([nil nil ((#("." 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . 37)) nil (25527 18822 817042 589000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t)) . -37) (undo-tree-id62 . -1) 38 (37 . 38) (t 25527 18822 858407 767000)) nil (25527 18874 153409 533000) 0 nil])
([nil nil ((#("(" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3211)) nil (25527 18874 153399 163000) 0 nil])
([nil nil ((#("(" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3195)) nil (25527 18874 153394 922000) 0 nil])
([nil nil ((#("s" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3195)) nil (25527 18874 153390 885000) 0 nil])
([nil nil ((#("t" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3195)) nil (25527 18874 153386 552000) 0 nil])
([nil nil ((#("a" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3195)) nil (25527 18874 153382 385000) 0 nil])
([nil nil ((#("t" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3195)) nil (25527 18874 153378 34000) 0 nil])
([nil nil ((#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3195)) nil (25527 18874 153373 108000) 0 nil])
([nil nil ((#("-" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3195)) nil (25527 18874 153368 293000) 0 nil])
([nil nil ((#("m" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3195)) nil (25527 18874 153363 719000) 0 nil])
([nil nil ((#("a" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3195)) nil (25527 18874 153359 331000) 0 nil])
([nil nil ((#("c" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3195)) nil (25527 18874 153354 942000) 0 nil])
([nil nil ((#("h" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3195)) nil (25527 18874 153350 720000) 0 nil])
([nil nil ((#("i" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3195)) nil (25527 18874 153346 350000) 0 nil])
([nil nil ((#("n" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3195)) nil (25527 18874 153342 35000) 0 nil])
([nil nil ((#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3195)) nil (25527 18874 153337 146000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3195)) nil (25527 18874 153332 295000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3195)) nil (25527 18874 153327 517000) 0 nil])
([nil nil ((#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . 3220)) nil (25527 18874 153322 887000) 0 nil])
([nil nil ((#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . -3227) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . -3228) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("args"))) . -3229) (undo-tree-id60 . -1) (undo-tree-id61 . -1) 3230) nil (25527 18874 153315 221000) 0 nil])
([nil nil ((3227 . 3229)) nil (25527 18874 153259 390000) 0 nil])
([nil nil ((3246 . 3247) (#("2" 0 1 (cider-locals ("args") help-echo cider--help-echo fontified t)) . 3246) (t 25527 18874 186268 366000)) nil (25527 19101 769253 506000) 0 nil])
([nil nil ((3337 . 3338) (#("2" 0 1 (cider-locals ("args") help-echo cider--help-echo fontified t)) . 3337)) nil (25527 19101 769242 932000) 0 nil])
([nil nil ((#("  (def demo-pars (ref 
    {
     :mode \"hr-target\"
     :pulse-target 135 
    }))
" 0 3 (cider-locals ("args") help-echo cider--help-echo fontified t) 3 6 (face font-lock-keyword-face cider-locals ("args") help-echo cider--help-echo fontified t) 6 7 (cider-locals ("args" "ref") help-echo cider--help-echo fontified t) 7 16 (face font-lock-variable-name-face cider-locals ("args" "ref") help-echo cider--help-echo fontified t) 16 34 (cider-locals ("args" "ref") help-echo cider--help-echo fontified t) 34 35 (face clojure-keyword-face cider-locals ("args" "ref") help-echo cider--help-echo fontified t) 35 39 (face clojure-keyword-face cider-locals ("args" "ref") help-echo cider--help-echo fontified t) 39 40 (cider-locals ("args" "ref") help-echo cider--help-echo fontified t) 40 51 (face font-lock-string-face cider-locals ("args" "ref") help-echo cider--help-echo fontified t) 51 57 (cider-locals ("args" "ref") help-echo cider--help-echo fontified t) 57 58 (face clojure-keyword-face cider-locals ("args" "ref") help-echo cider--help-echo fontified t) 58 70 (face clojure-keyword-face cider-locals ("args" "ref") help-echo cider--help-echo fontified t) 70 83 (cider-locals ("args" "ref") help-echo cider--help-echo fontified t) 83 84 (cider-locals ("args") help-echo cider--help-echo fontified t)) . 3088) (undo-tree-id0 . -83) (undo-tree-id1 . -83) (undo-tree-id2 . -21) (undo-tree-id3 . -83) (undo-tree-id4 . -84) (undo-tree-id5 . -21) (undo-tree-id6 . -83) (undo-tree-id7 . -76) (undo-tree-id8 . -83) 3171) nil (25527 19101 769230 25000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3028 . 3029) (#("
" 0 1 (fontified nil cider-locals ("args"))) . -3110) (3026 . 3111) 2997) nil (25527 19101 769122 637000) 0 nil])
([nil nil ((2950 . 2951) (t 25527 19102 91807 599000)) nil (25527 19204 226109 366000) 0 nil])
([nil nil ((#("r" 0 1 (cider-locals ("args") fontified t help-echo cider--help-echo)) . 3247) (3247 . 3248) (t 25527 19204 270842 403000)) nil (25527 19278 598026 849000) 0 nil])
([nil nil ((3247 . 3248) (#("1" 0 1 (cider-locals ("args") fontified t help-echo cider--help-echo)) . 3247) (undo-tree-id9 . 1)) nil (25527 19278 598018 701000) 0 nil])
([nil nil ((3338 . 3339) (#("1" 0 1 (cider-locals ("args") fontified t help-echo cider--help-echo)) . 3338)) nil (25527 19368 632155 564000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2527 . 2528) (nil fontified nil 2485 . 2528) (2485 . 2528) 2484 (t 25527 19278 640264 984000)) nil (25527 19382 986302 49000) 0 nil] [nil nil ((nil rear-nonsticky nil 2528 . 2529) (nil fontified nil 2486 . 2529) (2486 . 2529) 2485 (t 25527 19278 640264 984000)) ((#("(mu/update-kettler kettler-state sim-pars)
" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified nil) 1 3 (face font-lock-type-face cider-locals ("pars") help-echo cider--help-echo fontified nil) 3 42 (cider-locals ("pars") help-echo cider--help-echo fontified nil) 42 43 (cider-locals ("pars") help-echo cider--help-echo rear-nonsticky nil fontified nil)) . 2486) (undo-tree-id10 . -42) (undo-tree-id11 . -43) (undo-tree-id12 . -43) (undo-tree-id13 . -43) (nil rear-nonsticky t 2528 . 2529)) (25527 19368 631365 172000) 0 nil])
([nil nil ((#("                 " 0 17 (cider-locals ("pars") fontified t)) . -2649) (2528 . 2561) 2634) nil (25527 19382 986284 883000) 0 nil])
nil
([nil nil ((#("(mu/update-kettler kettler-state sim-pars)
" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t) 1 3 (face font-lock-type-face cider-locals ("pars") help-echo cider--help-echo fontified t) 3 42 (cider-locals ("pars") help-echo cider--help-echo fontified t) 42 43 (cider-locals ("pars") help-echo cider--help-echo rear-nonsticky t fontified t)) . 2485) (undo-tree-id50 . -42) (undo-tree-id51 . -42) (undo-tree-id52 . -42) (undo-tree-id53 . -42) (undo-tree-id54 . -43) (undo-tree-id55 . -42) (undo-tree-id56 . -42) 2527 (t 25527 19383 26807 951000)) nil (25527 19493 818661 387000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id49 . 1)) nil (25527 19493 818635 888000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id48 . 1)) nil (25527 19493 818628 185000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id47 . 1)) nil (25527 19493 818620 685000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id46 . 1)) nil (25527 19493 818613 241000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id45 . 1)) nil (25527 19493 818605 0) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id44 . 1)) nil (25527 19493 818597 686000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id43 . 1)) nil (25527 19493 818590 56000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id42 . 1)) nil (25527 19493 818582 242000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id41 . 1)) nil (25527 19493 818574 686000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id40 . 1)) nil (25527 19493 818566 983000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id39 . 1)) nil (25527 19493 818559 835000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id38 . 1)) nil (25527 19493 818552 150000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id37 . 1)) nil (25527 19493 818544 687000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id36 . 1)) nil (25527 19493 818536 836000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id35 . 1)) nil (25527 19493 818528 854000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id34 . 1)) nil (25527 19493 818520 818000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id33 . 1)) nil (25527 19493 818513 484000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id32 . 1)) nil (25527 19493 818506 22000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id31 . 1)) nil (25527 19493 818498 429000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id30 . 1)) nil (25527 19493 818490 4000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id29 . 1)) nil (25527 19493 818482 78000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id28 . 1)) nil (25527 19493 818474 189000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id27 . 1)) nil (25527 19493 818466 486000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id26 . 1)) nil (25527 19493 818458 394000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id25 . 1)) nil (25527 19493 818450 505000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id24 . 1)) nil (25527 19493 818442 301000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id23 . 1)) nil (25527 19493 818434 265000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id22 . 1)) nil (25527 19493 818426 487000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id21 . 1)) nil (25527 19493 818418 376000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id20 . 1)) nil (25527 19493 818410 117000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id19 . 1)) nil (25527 19493 818402 80000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id18 . 1)) nil (25527 19493 818393 840000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2485) (undo-tree-id17 . 1)) nil (25527 19493 818385 562000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2685 . 2686) (nil fontified nil 2685 . 2686) (2685 . 2686) 2684) nil (25527 19493 818377 840000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . 2684) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1)) nil (25527 19493 818852 511000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2066 . 2067) (nil fontified nil 2024 . 2067) (2024 . 2067) 2023) nil (25527 19503 882184 34000) 0 nil] [nil nil ((nil rear-nonsticky nil 2067 . 2068) (nil fontified nil 2025 . 2068) (2025 . 2068) 2024) ((#("(mu/update-kettler kettler-state sim-pars)
" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified nil) 1 3 (face font-lock-type-face cider-locals ("pars") help-echo cider--help-echo fontified nil) 3 42 (cider-locals ("pars") help-echo cider--help-echo fontified nil) 42 43 (cider-locals ("pars") help-echo cider--help-echo rear-nonsticky nil fontified nil)) . 2025) (undo-tree-id57 . -42) (undo-tree-id58 . -43) (undo-tree-id59 . -43) (undo-tree-id60 . -43) (nil rear-nonsticky t 2067 . 2068)) (25527 19493 818323 750000) 0 nil])
([nil nil ((2067 . 2100) 2148) nil (25527 19503 882169 164000) 0 nil])
nil
([nil nil ((#("V" 0 1 (face font-lock-function-name-face cider-locals ("value" "property") help-echo cider--help-echo fontified t)) . -1647) (undo-tree-id90 . -1) 1648 (1647 . 1648) (1677 . 1684) (1674 . 1677) (1658 . 1674) (1656 . 1658) (#(" " 0 1 (cider-locals ("defn" "def" "defn" "defn") help-echo cider--help-echo fontified nil)) . 1655) (undo-tree-id91 . -1) (1656 . 1657) (1647 . 1656) (#("
" 0 1 (cider-locals ("defn" "def" "defn" "defn") help-echo cider--help-echo fontified t)) . -1647) (undo-tree-id92 . -1) (#("
" 0 1 (cider-locals ("defn" "def" "defn" "defn") help-echo cider--help-echo fontified t)) . -1648) (undo-tree-id93 . -1) (#("
" 0 1 (cider-locals ("defn" "def" "defn" "defn") help-echo cider--help-echo fontified t)) . -1649) (undo-tree-id94 . -1) (#(" " 0 1 (cider-locals ("defn" "def" "defn" "defn") help-echo cider--help-echo fontified t)) . -1650) (undo-tree-id95 . -1) (#(" " 0 1 (cider-locals ("defn" "def" "defn" "defn") help-echo cider--help-echo fontified t)) . -1651) (undo-tree-id96 . -1) 1652 (1650 . 1652) (#("  " 0 2 (cider-locals ("defn" "def" "defn" "defn") help-echo cider--help-echo fontified nil)) . 1649) (undo-tree-id97 . -2) (1649 . 1652) (#("  " 0 2 (cider-locals ("defn" "def" "defn" "defn") help-echo cider--help-echo fontified nil)) . 1648) (undo-tree-id98 . -2) (1648 . 1651) (#(" " 0 1 (cider-locals ("defn" "def" "defn" "defn") help-echo cider--help-echo fontified nil)) . 1647) (undo-tree-id99 . -1) (1648 . 1649) (1638 . 1648) (#("#" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . 1638) (1639 . 1640) (1638 . 1639) (1637 . 1638) (t 25527 19503 932562 973000)) nil (25527 19868 867058 765000) 0 nil])
([nil nil ((#("(defn set-kettler
  [property value]
  (swap! 
" 0 1 (cider-locals nil help-echo cider--help-echo fontified t) 1 5 (face font-lock-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 5 6 (cider-locals ("value" "property") help-echo cider--help-echo fontified t) 6 17 (face font-lock-function-name-face cider-locals ("value" "property") help-echo cider--help-echo fontified t) 17 18 (cider-locals ("value" "property") help-echo cider--help-echo fontified t) 18 21 (cider-locals ("value" "property") help-echo cider--help-echo fontified t) 21 30 (cider-locals ("value" "property") help-echo cider--help-echo fontified t) 30 37 (cider-locals ("value" "property") help-echo cider--help-echo fontified t) 37 40 (cider-locals ("value" "property") fontified t help-echo cider--help-echo) 40 45 (face font-lock-function-name-face cider-locals ("value" "property") fontified t help-echo cider--help-echo) 45 46 (cider-locals ("value" "property") fontified t help-echo cider--help-echo) 46 47 (cider-locals ("value" "property") fontified t help-echo cider--help-echo)) . 1638) (undo-tree-id85 . -37) (undo-tree-id86 . -37) (undo-tree-id87 . -37) (undo-tree-id88 . 38) (undo-tree-id89 . -37) 1675) nil (25527 19868 866965 526000) 0 nil])
([nil nil ((2866 . 2867) (2859 . 2866) (2856 . 2859) (2855 . 2856) (2851 . 2855) (#("e" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2851) (undo-tree-id83 . -1) 2852 (2839 . 2852) (2833 . 2839) (#("." 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2833) (undo-tree-id84 . -1) 2834 (2823 . 2834) (2787 . 2823) (2787 . 2788) 2823) nil (25527 19868 866927 656000) 0 nil])
([nil nil ((#("  (def demo-pars (ref 
    {
     :mode \"hr-target\"
     :pulse-target 135 
    }))
" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo) 1 2 (cider-locals ("pars") fontified t help-echo cider--help-echo rear-nonsticky t) 2 3 (cider-locals ("pars") fontified t help-echo cider--help-echo) 3 6 (face font-lock-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo) 6 7 (cider-locals ("pars" "ref") fontified t help-echo cider--help-echo) 7 16 (face font-lock-variable-name-face cider-locals ("pars" "ref") fontified t help-echo cider--help-echo) 16 34 (cider-locals ("pars" "ref") fontified t help-echo cider--help-echo) 34 35 (face clojure-keyword-face cider-locals ("pars" "ref") fontified t help-echo cider--help-echo) 35 39 (face clojure-keyword-face cider-locals ("pars" "ref") fontified t help-echo cider--help-echo) 39 40 (cider-locals ("pars" "ref") fontified t help-echo cider--help-echo) 40 51 (face font-lock-string-face cider-locals ("pars" "ref") fontified t help-echo cider--help-echo) 51 57 (cider-locals ("pars" "ref") fontified t help-echo cider--help-echo) 57 58 (face clojure-keyword-face cider-locals ("pars" "ref") fontified t help-echo cider--help-echo) 58 70 (face clojure-keyword-face cider-locals ("pars" "ref") fontified t help-echo cider--help-echo) 70 83 (cider-locals ("pars" "ref") fontified t help-echo cider--help-echo) 83 84 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . 3169) (undo-tree-id73 . -83) (undo-tree-id74 . -21) (undo-tree-id75 . -83) (undo-tree-id76 . 62) (undo-tree-id77 . -83) (undo-tree-id78 . -84) (undo-tree-id79 . -21) (undo-tree-id80 . -83) (undo-tree-id81 . -76) (undo-tree-id82 . -83) 3252) nil (25527 19868 866889 305000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil cider-locals ("pars"))) . -1722) (1638 . 1723)) nil (25527 19868 866816 602000) 0 nil])
([nil nil ((#("V" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -1638) (undo-tree-id72 . -1) 1639 (1638 . 1639) (1723 . 1724)) nil (25527 19868 866806 103000) 0 nil])
([nil nil ((1749 . 1766) (#("    " 0 4 (cider-locals ("ref") fontified t help-echo cider--help-echo)) . 1749) (1713 . 1730) (#("     " 0 5 (cider-locals ("ref") fontified t help-echo cider--help-echo)) . 1713) (1678 . 1695) (#("     " 0 5 (cider-locals ("ref") fontified t help-echo cider--help-echo)) . 1678) (1660 . 1676) (#("    " 0 4 (cider-locals ("ref") fontified t help-echo cider--help-echo)) . 1660) (#("  " 0 1 (cider-locals nil fontified t help-echo cider--help-echo) 1 2 (cider-locals nil fontified t help-echo cider--help-echo rear-nonsticky t)) . -1639) 1715) nil (25527 19868 866785 547000) 0 nil])
([nil nil ((1769 . 1770)) nil (25527 19868 866768 233000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("ref") fontified t help-echo cider--help-echo)) . -1768) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#(")" 0 1 (cider-locals ("ref") fontified t help-echo cider--help-echo)) . -1769) (undo-tree-id70 . -1) (undo-tree-id71 . -1) 1770) nil (25527 19868 866757 381000) 0 nil])
([nil nil ((1768 . 1769)) nil (25527 19868 866721 363000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747)) nil (25527 19868 866712 900000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (#("
" 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1)) nil (25527 19868 866684 827000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("defn" "ref") fontified t help-echo cider--help-echo)) . 1747) (t 25527 19868 914870 317000)) nil (25527 19890 458902 838000) 0 nil])
([nil nil ((2980 . 2991)) nil (25527 19890 458840 80000) 0 nil])
([nil nil ((2940 . 2942) (t 25527 19890 524537 710000)) nil (25527 19965 95073 84000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("defn" "ref" "pars") fontified t help-echo cider--help-echo)) . 2940) (#("t" 0 1 (cider-locals ("defn" "ref" "pars") fontified t help-echo cider--help-echo)) . 2940) (#("a" 0 1 (cider-locals ("defn" "ref" "pars") fontified t help-echo cider--help-echo)) . 2940) (#("d" 0 1 (cider-locals ("defn" "ref" "pars") fontified t help-echo cider--help-echo)) . 2940) (#("p" 0 1 (cider-locals ("defn" "ref" "pars") fontified t help-echo cider--help-echo)) . 2940) (#("u" 0 1 (cider-locals ("defn" "ref" "pars") fontified t help-echo cider--help-echo)) . 2940) (#("x" 0 1 (cider-locals ("defn" "ref" "pars") fontified t help-echo cider--help-echo)) . 2940) (#("x" 0 1 (cider-locals ("defn" "ref" "pars") fontified t help-echo cider--help-echo)) . 2940)) nil (25527 20444 595706 190000) 0 nil])
([nil nil ((2940 . 2943)) ((#("set" 0 3 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2940) (t 25527 19965 153443 535000)) (25527 20447 802453 951000) 0 nil])
([nil nil ((3102 . 3107) (#("v" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face)) . -3102) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("i" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face)) . -3103) (undo-tree-id38 . -1) (undo-tree-id39 . -1) 3104 (3095 . 3104) (#("long" 0 4 (help-echo cider--help-echo fontified t cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face)) . 3095) (t 25527 19965 153443 535000)) nil (25527 20471 899824 479000) 0 nil] [nil nil ((#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . -3108) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . -3109) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 3110 (3107 . 3110) (3106 . 3107) (3105 . 3106) (#("n" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face)) . -3105) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 3106 (3105 . 3106) (#("b" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face)) . -3105) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 3106 (3105 . 3106) (#("b" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face)) . -3105) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("n" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face)) . -3106) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 3107 (3105 . 3107) (#("b" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face)) . -3105) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("n" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face)) . -3106) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 3107 (3096 . 3107) (#("a" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face)) . -3096) (undo-tree-id16 . -1) 3097 (3095 . 3097) (#("long" 0 4 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face)) . 3095) (t 25527 19965 153443 535000)) ((3095 . 3099) (#("sa" 0 1 (fontified nil help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face) 1 2 (fontified nil help-echo cider--help-echo cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face)) . 3095) (undo-tree-id17 . -2) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (3096 . 3097) (#("tatemachibn" 0 9 (fontified nil help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face) 9 10 (fontified nil help-echo cider--help-echo cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face) 10 11 (fontified nil help-echo cider--help-echo cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face)) . 3096) (undo-tree-id20 . -11) (undo-tree-id21 . -9) (undo-tree-id22 . -9) (3105 . 3107) (#("bn" 0 1 (fontified nil help-echo cider--help-echo cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face) 1 2 (fontified nil help-echo cider--help-echo cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face)) . 3105) (undo-tree-id23 . -2) (3105 . 3107) (#("b" 0 1 (fontified nil help-echo cider--help-echo cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face)) . 3105) (undo-tree-id24 . -1) (3105 . 3106) (#("n" 0 1 (fontified nil help-echo cider--help-echo cider-locals ("pars" "state" "pars" "control") face font-lock-function-name-face)) . 3105) (undo-tree-id25 . -1) (3105 . 3106) (#("b" 0 1 (fontified nil help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face)) . 3105) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("e" 0 1 (fontified nil help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face)) . 3106) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("
  " 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars")) 1 2 (fontified nil help-echo cider--help-echo cider-locals ("pars")) 2 3 (fontified nil help-echo cider--help-echo cider-locals ("pars"))) . 3107) (undo-tree-id32 . -3) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (3108 . 3110)) (25527 20444 280611 771000) 0 nil])
([nil nil ((#("long" 0 4 (help-echo cider--help-echo fontified t cider-locals ("pars" "args"))) . 3370) (undo-tree-id35 . 1)) nil (25527 20471 899779 185000) 0 nil])
nil
([nil nil ((3370 . 3382)) nil (25527 20471 899727 650000) 0 nil])
([nil nil ((#("            :on-success #(println \"start\")
" 0 12 (fontified t help-echo cider--help-echo cider-locals ("pars")) 12 13 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 13 23 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 23 26 (fontified t help-echo cider--help-echo cider-locals ("pars")) 26 33 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face) 33 34 (fontified t help-echo cider--help-echo cider-locals ("pars")) 34 41 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-string-face) 41 43 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 1994) (undo-tree-id75 . -22) (undo-tree-id76 . 20) 2016 (t 25527 20472 223342 344000)) nil (25527 20624 660615 292000) 0 nil])
([nil nil ((#("                                 (println \"pw-target\")
" 0 34 (fontified t help-echo cider--help-echo cider-locals ("pars")) 34 41 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face) 41 42 (fontified t help-echo cider--help-echo cider-locals ("pars")) 42 53 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-string-face) 53 55 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2138) (undo-tree-id74 . -22) 2160) nil (25527 20624 660603 236000) 0 nil])
([nil nil ((#("(println @kettler-state)" 0 1 (fontified t cider-locals ("pars")) 1 8 (fontified t cider-locals ("pars") face font-lock-function-name-face) 8 24 (fontified t cider-locals ("pars"))) . 2171)) nil (25527 20624 660594 792000) 0 nil])
([nil nil ((2171 . 2172)) nil (25527 20624 660590 478000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-keyword-face)) . 2092) (undo-tree-id73 . 1)) nil (25527 20624 660585 663000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2092) (undo-tree-id72 . 1)) nil (25527 20624 660577 385000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2092) (undo-tree-id71 . 1)) nil (25527 20624 660570 219000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2092) (undo-tree-id70 . 1)) nil (25527 20624 660562 349000) 0 nil])
([nil nil ((#("                                 x)
" 0 15 (fontified t help-echo cider--help-echo cider-locals ("pars")) 15 34 (fontified t help-echo cider--help-echo cider-locals ("pars")) 34 35 (fontified t help-echo cider--help-echo cider-locals ("pars")) 35 36 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2134) (undo-tree-id68 . -33) (undo-tree-id69 . -33) 2167) nil (25527 20624 660554 201000) 0 nil])
([nil nil ((#("                                  (println \"hr-target\")
" 0 35 (fontified t help-echo cider--help-echo cider-locals ("pars")) 35 42 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face) 42 43 (fontified t help-echo cider--help-echo cider-locals ("pars")) 43 54 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-string-face) 54 56 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2289) (undo-tree-id66 . -33) (undo-tree-id67 . -33) 2322) nil (25527 20624 660542 257000) 0 nil])
([nil nil ((#("                                  (println @kettler-state))
" 0 35 (fontified t help-echo cider--help-echo cider-locals ("pars")) 35 42 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face) 42 59 (fontified t help-echo cider--help-echo cider-locals ("pars")) 59 60 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2289) (undo-tree-id63 . -33) (undo-tree-id64 . -59) (undo-tree-id65 . -33) 2322) nil (25527 20624 660529 628000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2242)) nil (25527 20624 660515 535000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2242)) nil (25527 20624 660511 165000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2242)) nil (25527 20624 660506 869000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2242)) nil (25527 20624 660502 499000) 0 nil])
([nil nil ((#("                :on-success #(do (println \"pid-power\")
" 0 16 (fontified t help-echo cider--help-echo cider-locals ("pars")) 16 17 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 17 27 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 27 30 (fontified t help-echo cider--help-echo cider-locals ("pars")) 30 32 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-keyword-face) 32 34 (fontified t help-echo cider--help-echo cider-locals ("pars")) 34 41 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face) 41 42 (fontified t help-echo cider--help-echo cider-locals ("pars")) 42 53 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-string-face) 53 55 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2361) (undo-tree-id60 . -55) (undo-tree-id61 . -28) (undo-tree-id62 . -28) 2389) nil (25527 20624 660496 369000) 0 nil])
([nil nil ((#("                                 (println @pars))
" 0 34 (help-echo cider--help-echo fontified t cider-locals ("pars")) 34 41 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 41 49 (help-echo cider--help-echo fontified t cider-locals ("pars")) 49 50 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2361) (undo-tree-id57 . -28) (undo-tree-id58 . -49) (undo-tree-id59 . -28) 2389) nil (25527 20624 660481 703000) 0 nil])
([nil nil ((#("                
" 0 16 (help-echo cider--help-echo fontified t cider-locals ("pars")) 16 17 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2361) (undo-tree-id54 . -15) (undo-tree-id55 . -16) (undo-tree-id56 . -15) 2376) nil (25527 20624 660467 296000) 0 nil])
([nil nil ((#("(println \"update-power\")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars")) 1 8 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 8 9 (help-echo cider--help-echo fontified t cider-locals ("pars")) 9 23 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-string-face) 23 24 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2472)) nil (25527 20624 660453 685000) 0 nil])
([nil nil ((#("d" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-keyword-face)) . 2469)) nil (25527 20624 660449 926000) 0 nil])
([nil nil ((#("o" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469)) nil (25527 20624 660446 130000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2593)) nil (25527 20624 660442 1000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2593)) nil (25527 20624 660437 297000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2593)) nil (25527 20624 660432 705000) 0 nil])
([nil nil ((#("                                 (println @pars))
" 0 34 (help-echo cider--help-echo fontified t cider-locals ("pars")) 34 41 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 41 50 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2560) (undo-tree-id52 . -33) (undo-tree-id53 . -33) 2593) nil (25527 20624 660427 538000) 0 nil])
([nil nil ((2468 . 2469) (2468 . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#("
" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2469)) nil (25527 20624 660405 650000) 0 nil])
([nil nil ((#("x" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2468)) nil (25527 20624 660382 206000) 0 nil])
([nil nil ((#("d" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2468) (undo-tree-id51 . 1)) nil (25527 20624 660376 984000) 0 nil])
([nil nil ((#("(" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2468) (undo-tree-id50 . 1)) nil (25527 20624 660368 947000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2468) (undo-tree-id49 . 1)) nil (25527 20624 660361 244000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2468) (undo-tree-id48 . 1)) nil (25527 20624 660353 818000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2468) (undo-tree-id47 . 1)) nil (25527 20624 660345 855000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2468) (undo-tree-id46 . 1)) nil (25527 20624 660338 411000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2468) (undo-tree-id45 . 1)) nil (25527 20624 660329 912000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2468) (undo-tree-id44 . 1)) nil (25527 20624 660322 449000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2468) (undo-tree-id43 . 1)) nil (25527 20624 660314 579000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2468) (undo-tree-id42 . 1)) nil (25527 20624 660306 764000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2468) (undo-tree-id41 . 1)) nil (25527 20624 660298 820000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2468) (undo-tree-id40 . 1)) nil (25527 20624 660289 728000) 0 nil])
([nil nil ((#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2519)) nil (25527 20624 660250 44000) 0 nil])
([nil nil ((#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2564) (t 25527 20624 698215 739000)) nil (25527 20686 640616 968000) 0 nil])
([nil nil ((2564 . 2565)) nil (25527 20686 640610 338000) 0 nil])
([nil nil ((#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2564) (undo-tree-id79 . -1) (undo-tree-id80 . -1) 2565) nil (25527 20686 640602 931000) 0 nil])
([nil nil ((2564 . 2565)) nil (25527 20686 640585 820000) 0 nil])
([nil nil ((2519 . 2520)) nil (25527 20686 640578 969000) 0 nil])
([nil nil ((#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . -2565) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 2566) nil (25527 20686 640569 562000) 0 nil])
([nil nil ((2565 . 2566)) nil (25527 20686 640517 841000) 0 nil])
([nil nil ((2857 . 2862) (#("[" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "args"))) . -2857) (undo-tree-id90 . -1) (undo-tree-id91 . -1) 2858 (2851 . 2858) (#("p" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "args" "dosync" "Thread/sleep" "dosync" "Thread/sleep" "future") face font-lock-function-name-face)) . -2851) (undo-tree-id92 . -1) (undo-tree-id93 . -1) 2852 (2848 . 2852) (2843 . 2848) (2837 . 2843) (#("/" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face font-lock-function-name-face)) . -2837) (undo-tree-id94 . -1) (undo-tree-id95 . -1) 2838 (2837 . 2838) (#("d" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "args"))) . -2837) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "args"))) . -2838) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#("f" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "args"))) . -2839) (undo-tree-id100 . -1) (undo-tree-id101 . -1) 2840 (2837 . 2840) (#("0" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "args"))) . -3012) (undo-tree-id102 . -1) (undo-tree-id103 . -1) 3013 (3012 . 3013) (t 25527 20686 696356 699000)) nil (25527 20767 145845 693000) 0 nil])
([nil nil ((#("  (dosync (ref-set demo-pars {:mode \"pw-target\"  :pw-target 90})) 
" 0 3 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 3 9 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face font-lock-keyword-face) 9 11 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 11 18 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face font-lock-function-name-face) 18 30 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 30 31 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face clojure-keyword-face) 31 35 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face clojure-keyword-face) 35 36 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 36 47 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face font-lock-string-face) 47 49 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 49 50 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face clojure-keyword-face) 50 59 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face clojure-keyword-face) 59 65 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 65 67 (help-echo cider--help-echo fontified t cider-locals ("pars" "args"))) . 2953) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) 2954) nil (25527 20832 370147 544000) 0 nil] [nil nil ((#("  (dosync (ref-set demo-pars {:mode \"pw-target\"  :pw-target 90})) 
" 0 3 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 3 9 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face font-lock-keyword-face) 9 11 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 11 18 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face font-lock-function-name-face) 18 30 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 30 31 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face clojure-keyword-face) 31 35 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face clojure-keyword-face) 35 36 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 36 47 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face font-lock-string-face) 47 49 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 49 50 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face clojure-keyword-face) 50 59 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face clojure-keyword-face) 59 65 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 65 67 (help-echo cider--help-echo fontified t cider-locals ("pars" "args"))) . 2953) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . 65) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) 2954) ((2953 . 3020)) (25527 20766 842318 233000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2864 . 2865) (#("
" 0 1 (cider-locals ("pars" "args") fontified nil)) . -2929) (2862 . 2930) 2858) nil (25527 20832 370125 359000) 0 nil])
([nil nil ((2867 . 2869) (2862 . 2867) 2861) ((#("
    " 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 1 5 (fontified nil help-echo cider--help-echo cider-locals ("pars" "args"))) . 2862) (undo-tree-id110 . -5) (undo-tree-id111 . -1) (undo-tree-id112 . -5) (#("uu" 0 2 (fontified t help-echo cider--help-echo cider-locals ("pars" "args"))) . 2867) (undo-tree-id113 . -1) (undo-tree-id114 . -1)) (25527 20766 842094 388000) 0 nil] [nil nil ((nil rear-nonsticky nil 2864 . 2865) (#("
" 0 1 (cider-locals ("pars" "args") fontified nil)) . -2929) (2862 . 2930) 2861) ((#("
  (dosync (ref-set demo-pars {:mode \"pw-target\"  :pw-target 90})) 
" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 1 2 (fontified nil help-echo cider--help-echo cider-locals ("pars" "args")) 2 3 (fontified nil rear-nonsticky nil help-echo cider--help-echo cider-locals ("pars" "args")) 3 4 (fontified nil help-echo cider--help-echo cider-locals ("pars" "args")) 4 10 (fontified nil help-echo cider--help-echo cider-locals ("pars" "args") face font-lock-keyword-face) 10 12 (fontified nil help-echo cider--help-echo cider-locals ("pars" "args")) 12 19 (fontified nil help-echo cider--help-echo cider-locals ("pars" "args") face font-lock-function-name-face) 19 31 (fontified nil help-echo cider--help-echo cider-locals ("pars" "args")) 31 32 (fontified nil help-echo cider--help-echo cider-locals ("pars" "args") face clojure-keyword-face) 32 36 (fontified nil help-echo cider--help-echo cider-locals ("pars" "args") face clojure-keyword-face) 36 37 (fontified nil help-echo cider--help-echo cider-locals ("pars" "args")) 37 48 (fontified nil help-echo cider--help-echo cider-locals ("pars" "args") face font-lock-string-face) 48 50 (fontified nil help-echo cider--help-echo cider-locals ("pars" "args")) 50 51 (fontified nil help-echo cider--help-echo cider-locals ("pars" "args") face clojure-keyword-face) 51 60 (fontified nil help-echo cider--help-echo cider-locals ("pars" "args") face clojure-keyword-face) 60 66 (fontified nil help-echo cider--help-echo cider-locals ("pars" "args")) 66 67 (fontified nil help-echo cider--help-echo cider-locals ("pars" "args")) 67 68 (cider-locals ("pars" "args") fontified nil)) . 2862) (undo-tree-id104 . -67) (undo-tree-id105 . -3) (undo-tree-id106 . -1) (undo-tree-id107 . -67) (undo-tree-id108 . -1) (undo-tree-id109 . -3) (2929 . 2930) (nil rear-nonsticky t 2864 . 2865)) (25527 20762 892198 630000) 0 nil])
([nil nil ((#("    
" 0 4 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 4 5 (fontified t help-echo cider--help-echo cider-locals ("pars" "args"))) . 2858) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -5) 2860) nil (25527 20832 370117 878000) 0 nil])
nil
nil
([nil nil ((2923 . 2924) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "args"))) . -2923) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) 2924) nil (25527 20832 370093 878000) 0 nil])
([nil nil ((2860 . 2862) 2857) nil (25527 20832 370080 138000) 0 nil])
([nil nil ((#("V" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "args"))) . -3071) (undo-tree-id135 . -1) 3072 (3071 . 3072) (2947 . 2952) (2942 . 2947) (#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "args" "dosync" "Thread/sleep" "Thread/sleep" "future") face font-lock-function-name-face)) . -2942) (undo-tree-id136 . -1) 2943 (2937 . 2943) (#("i" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "args" "dosync" "Thread/sleep" "Thread/sleep" "future") face font-lock-function-name-face)) . -2937) (undo-tree-id137 . -1) (#("o" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "args" "dosync" "Thread/sleep" "Thread/sleep" "future") face font-lock-function-name-face)) . -2938) (undo-tree-id138 . -1) 2939 (2937 . 2939) (2929 . 2937) (2927 . 2929) (2927 . 2928) 2929) nil (25527 20832 370071 157000) 0 nil])
([nil nil ((#("  (dosync (ref-set demo-pars {:mode \"exit\"  :pw-target 90})) 
" 0 3 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 3 9 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face font-lock-keyword-face) 9 11 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 11 18 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face font-lock-function-name-face) 18 30 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 30 31 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face clojure-keyword-face) 31 35 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face clojure-keyword-face) 35 36 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 36 42 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face font-lock-string-face) 42 44 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 44 45 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face clojure-keyword-face) 45 48 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face clojure-keyword-face) 48 54 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face clojure-keyword-face) 54 60 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 60 62 (help-echo cider--help-echo fontified t cider-locals ("pars" "args"))) . 3067) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . 58) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) 3069) nil (25527 20832 370044 639000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2954 . 2955) (#("
" 0 1 (cider-locals ("pars" "args") fontified nil)) . -3014) (2952 . 3015) 2948) nil (25527 20832 370019 991000) 0 nil])
([nil nil ((#("    
" 0 4 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 4 5 (fontified t help-echo cider--help-echo cider-locals ("pars" "args"))) . 2948) (undo-tree-id125 . -2) (undo-tree-id126 . -5) (undo-tree-id127 . -2) 2950) nil (25527 20832 370012 936000) 0 nil])
([nil nil ((3083 . 3085) (3013 . 3014) (2950 . 2952) (3009 . 3010) (3008 . 3009)) nil (25527 20832 369999 47000) 0 nil])
([nil nil ((#("  dd(Thread/sleep 20000) 
" 0 5 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 5 11 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face font-lock-type-face) 11 26 (help-echo cider--help-echo fontified t cider-locals ("pars" "args"))) . 3081) (undo-tree-id122 . -3) (undo-tree-id123 . 22) (undo-tree-id124 . -3) 3084) nil (25527 20832 369991 585000) 0 nil])
([nil nil ((#("  (Thread/sleep 20000) 
" 0 3 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 3 9 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face font-lock-type-face) 9 23 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 23 24 (help-echo cider--help-echo fontified t cider-locals ("pars" "args"))) . 3081) (undo-tree-id115 . -3) (undo-tree-id116 . 24) (undo-tree-id117 . -24) (undo-tree-id118 . -24) (undo-tree-id119 . -24) (undo-tree-id120 . -23) (undo-tree-id121 . -3) 3084) nil (25527 20832 369969 956000) 0 nil])
([nil nil ((#("  (defn set-pw-mode []
    (dosync (ref-set demo-pars {:mode \"pw-target\"  :pw-target 90})))
  (defn stop-mode []
    (dosync (ref-set demo-pars {:mode \"exit\"  :pw-target 90})))
  
" 0 2 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 2 3 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 3 7 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face font-lock-keyword-face) 7 8 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 8 19 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face font-lock-function-name-face) 19 23 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 23 24 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 24 25 (fontified t rear-nonsticky t help-echo cider--help-echo cider-locals ("pars" "args")) 25 27 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 27 28 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 28 34 (fontified t help-echo cider--help-echo cider-locals ("pars" "args") face font-lock-keyword-face) 34 36 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 36 43 (fontified t help-echo cider--help-echo cider-locals ("pars" "args") face font-lock-function-name-face) 43 55 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 55 56 (fontified t help-echo cider--help-echo cider-locals ("pars" "args") face clojure-keyword-face) 56 60 (fontified t help-echo cider--help-echo cider-locals ("pars" "args") face clojure-keyword-face) 60 61 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 61 72 (fontified t help-echo cider--help-echo cider-locals ("pars" "args") face font-lock-string-face) 72 74 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 74 75 (fontified t help-echo cider--help-echo cider-locals ("pars" "args") face clojure-keyword-face) 75 84 (fontified t help-echo cider--help-echo cider-locals ("pars" "args") face clojure-keyword-face) 84 90 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 90 91 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 91 92 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 92 94 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 94 95 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 95 99 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face font-lock-keyword-face) 99 100 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 100 109 (help-echo cider--help-echo fontified t cider-locals ("pars" "args") face font-lock-function-name-face) 109 113 (help-echo cider--help-echo fontified t cider-locals ("pars" "args")) 113 114 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 114 115 (fontified t rear-nonsticky t help-echo cider--help-echo cider-locals ("pars" "args")) 115 117 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 117 118 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 118 124 (fontified t help-echo cider--help-echo cider-locals ("pars" "args") face font-lock-keyword-face) 124 126 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 126 133 (fontified t help-echo cider--help-echo cider-locals ("pars" "args") face font-lock-function-name-face) 133 145 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 145 146 (fontified t help-echo cider--help-echo cider-locals ("pars" "args") face clojure-keyword-face) 146 150 (fontified t help-echo cider--help-echo cider-locals ("pars" "args") face clojure-keyword-face) 150 151 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 151 157 (fontified t help-echo cider--help-echo cider-locals ("pars" "args") face font-lock-string-face) 157 159 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 159 160 (fontified t help-echo cider--help-echo cider-locals ("pars" "args") face clojure-keyword-face) 160 163 (fontified t help-echo cider--help-echo cider-locals ("pars" "args") face clojure-keyword-face) 163 169 (fontified t help-echo cider--help-echo cider-locals ("pars" "args") face clojure-keyword-face) 169 175 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 175 176 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 176 177 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 177 179 (fontified t help-echo cider--help-echo cider-locals ("pars" "args")) 179 180 (fontified t help-echo cider--help-echo cider-locals ("pars" "args"))) . 2835) (undo-tree-id153 . -179) (undo-tree-id154 . -2) (undo-tree-id155 . -179) (undo-tree-id156 . -23) (undo-tree-id157 . -113) (undo-tree-id158 . -178) (undo-tree-id159 . -179) (undo-tree-id160 . -2) (undo-tree-id161 . -179) 3014 (t 25527 20832 412393 133000)) nil (25527 20967 372992 630000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2781 . 2782) (#("
" 0 1 (cider-locals ("pars" "args") fontified nil)) . -2959) (2779 . 2960) 2777) nil (25527 20967 372959 890000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . -2889) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . -2868) (#("  " 0 2 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . -2803) (#("  " 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars")) 1 2 (fontified t rear-nonsticky t help-echo cider--help-echo cider-locals ("pars"))) . -2780) (undo-tree-id151 . -2) (undo-tree-id152 . -2) 2895) nil (25527 20967 372950 371000) 0 nil])
([nil nil ((2868 . 2869) 2870) nil (25527 20967 372902 150000) 0 nil])
([nil nil ((#("j" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "state" "pars" "control" "sm"))) . -2744) (undo-tree-id163 . -1) (2744 . 2745) 2745 (2744 . 2745) (t 25527 20967 429128 155000)) nil (25527 21168 403126 816000) 0 nil])
([nil nil ((#("x" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "state" "pars" "control" "sm"))) . 2744) (undo-tree-id162 . 1)) nil (25527 21168 403114 131000) 0 nil])
([nil nil ((#("0" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "state" "pars" "control" "sm"))) . 2743)) nil (25527 21168 403073 706000) 0 nil])
([nil nil ((#("mode" 0 4 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face)) . 2879) (t 25527 21168 444799 212000)) nil (25527 21269 199470 565000) 0 nil])
([nil nil ((2879 . 2882)) nil (25527 21269 199465 898000) 0 nil])
([nil nil ((#("m" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face)) . -2880) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("a" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face)) . -2881) (undo-tree-id166 . -1) (undo-tree-id167 . -1) 2882) nil (25527 21269 199459 361000) 0 nil])
([nil nil ((2880 . 2886)) nil (25527 21269 199409 381000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . -1748) (undo-tree-id216 . -1) 1749 (1748 . 1749) (1749 . 1766) (#("                 " 0 17 (fontified nil help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1748) (undo-tree-id217 . -17) (1747 . 1766) (1677 . 1695) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (#("
" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1677) (t 25527 21269 252808 315000)) nil (25527 21606 791930 181000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1785 . 1786) (nil fontified nil 1748 . 1786) (1748 . 1786)) nil (25527 21606 791906 163000) 0 nil])
([nil nil ((#("V" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref"))) . -1748) (undo-tree-id215 . -1) 1749 (1748 . 1749) (1748 . 1749)) nil (25527 21606 791899 756000) 0 nil])
([nil nil ((1748 . 1765)) nil (25527 21606 791890 904000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t rear-nonsticky t help-echo cider--help-echo cider-locals ("atom" "ref"))) . 1803)) nil (25527 21606 791886 904000) 0 nil])
([nil nil ((#("V" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "defn" "defn"))) . -2871) (undo-tree-id209 . -1) 2872 (2871 . 2872) (1838 . 1843) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "defn" "defn" "defn" "defn" "defn"))) . -1838) (undo-tree-id210 . -1) 1839 (1830 . 1839) (#("b" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref") face font-lock-keyword-face)) . -1830) (undo-tree-id211 . -1) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "defn" "defn" "defn" "defn" "defn"))) . -1831) (undo-tree-id212 . -1) 1832 (1830 . 1832) (#("b" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref") face font-lock-keyword-face)) . -1830) (undo-tree-id213 . -1) (#("n" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref") face font-lock-keyword-face)) . -1831) (undo-tree-id214 . -1) 1832 (1826 . 1832) (1825 . 1826) 1825) nil (25527 21606 791878 52000) 0 nil])
([nil nil ((#("  " 0 2 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "defn" "defn" "defn" "defn" "defn"))) . -1844) (undo-tree-id208 . -2) 1846 (1844 . 1846) (1844 . 1845)) nil (25527 21606 791846 794000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1844 . 1845) (#("
" 0 1 (cider-locals ("atom" "ref" "defn" "defn" "defn" "defn" "defn") fontified nil)) . -1932) (1844 . 1933)) nil (25527 21606 791837 405000) 0 nil])
([nil nil ((#("(defn set-pw-mode []
" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "defn" "defn" "defn" "defn" "defn" "defn")) 1 5 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "defn" "defn" "defn" "defn" "defn" "defn") face font-lock-keyword-face) 5 6 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "defn" "defn" "defn" "defn" "defn" "defn")) 6 17 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "defn" "defn" "defn" "defn" "defn" "defn") face font-lock-function-name-face) 17 21 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "defn" "defn" "defn" "defn" "defn" "defn"))) . 1845)) nil (25527 21606 791831 294000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t help-echo cider--help-echo cider-locals ("atom" "ref" "defn" "defn" "defn" "defn" "defn" "defn"))) . 1844) (undo-tree-id207 . -1)) nil (25527 21606 791826 276000) 0 nil])
([nil nil ((1887 . 1888) (1851 . 1858) (1850 . 1852) (1849 . 1850) (#("d" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "pars"))) . -1871) (undo-tree-id202 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "pars"))) . -1872) (undo-tree-id203 . -1) (#("m" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "pars"))) . -1873) (undo-tree-id204 . -1) (#("o" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "pars"))) . -1874) (undo-tree-id205 . -1) (#("-" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "pars"))) . -1875) (undo-tree-id206 . -1) 1876 (1844 . 1851) (1843 . 1844) (1911 . 1912)) nil (25527 21606 791815 109000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id201 . 1)) nil (25527 21606 791788 758000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars") face clojure-keyword-face)) . 1887) (undo-tree-id200 . 1)) nil (25527 21606 791780 758000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id199 . 1)) nil (25527 21606 791772 888000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id198 . 1)) nil (25527 21606 791765 258000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id197 . 1)) nil (25527 21606 791757 647000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id196 . 1)) nil (25527 21606 791736 222000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id195 . 1)) nil (25527 21606 791728 851000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars") face font-lock-string-face)) . 1887) (undo-tree-id194 . 1)) nil (25527 21606 791721 129000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id193 . 1)) nil (25527 21606 791713 426000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id192 . 1)) nil (25527 21606 791705 796000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id191 . 1)) nil (25527 21606 791698 481000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id190 . 1)) nil (25527 21606 791690 741000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id189 . 1)) nil (25527 21606 791682 815000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id188 . 1)) nil (25527 21606 791675 204000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars") face font-lock-function-name-face)) . 1887) (undo-tree-id187 . 1)) nil (25527 21606 791667 223000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id186 . 1)) nil (25527 21606 791659 241000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id185 . 1)) nil (25527 21606 791651 56000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars") face font-lock-string-face)) . 1887) (undo-tree-id184 . 1)) nil (25527 21606 791643 297000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id183 . 1)) nil (25527 21606 791635 705000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id182 . 1)) nil (25527 21606 791627 705000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars") face clojure-keyword-face)) . 1887) (undo-tree-id181 . 1)) nil (25527 21606 791619 686000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id180 . 1)) nil (25527 21606 791611 890000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id179 . 1)) nil (25527 21606 791604 150000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id178 . 1)) nil (25527 21606 791596 465000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id177 . 1)) nil (25527 21606 791588 594000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id176 . 1)) nil (25527 21606 791580 946000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id175 . 1)) nil (25527 21606 791573 150000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars") face font-lock-function-name-face)) . 1887) (undo-tree-id174 . 1)) nil (25527 21606 791565 632000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id173 . 1)) nil (25527 21606 791557 576000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id172 . 1)) nil (25527 21606 791549 651000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id171 . 1)) nil (25527 21606 791541 706000) 0 nil])
([nil nil ((#("9" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1887) (undo-tree-id170 . 1)) nil (25527 21606 791533 577000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1886)) nil (25527 21606 791525 447000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1886) (undo-tree-id169 . 1)) nil (25527 21606 792096 252000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1887 . 1888) (nil fontified nil 1887 . 1888) (1887 . 1888) 1886) nil (25527 21729 115410 338000) 0 nil] [nil nil ((#("}" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1886) (undo-tree-id168 . 1)) ((1886 . 1887)) (25527 21606 791504 411000) 0 nil])
([nil nil ((1886 . 1888) (1886 . 1887)) nil (25527 21729 115404 634000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1885) (undo-tree-id250 . -1) (undo-tree-id251 . -1)) nil (25527 21729 115398 708000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1885) (undo-tree-id249 . 1)) nil (25527 21729 115388 301000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1885) (undo-tree-id248 . 1)) nil (25527 21729 115380 283000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1885) (undo-tree-id247 . 1)) nil (25527 21729 115372 486000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1885) (undo-tree-id243 . -1) (undo-tree-id244 . 1) (undo-tree-id245 . -1) (undo-tree-id246 . -1)) nil (25527 21729 115364 135000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t rear-nonsticky t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1885) (undo-tree-id242 . 1)) nil (25527 21729 115347 579000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1885) (undo-tree-id241 . 1)) nil (25527 21729 115339 913000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1885) (undo-tree-id240 . 1)) nil (25527 21729 115332 172000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . 1885) (undo-tree-id238 . 1) (undo-tree-id239 . -1)) nil (25527 21729 115324 321000) 0 nil])
([nil nil ((1885 . 1886)) nil (25527 21729 115314 136000) 0 nil])
([nil nil ((1886 . 1903)) nil (25527 21729 115310 487000) 0 nil])
([nil nil ((1903 . 1913)) nil (25527 21729 115305 821000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . -1893) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (#("i" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . -1894) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#("n" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars") face font-lock-function-name-face)) . -1895) (undo-tree-id236 . -1) (undo-tree-id237 . -1) 1896) nil (25527 21729 115299 339000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . -1894) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("k" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . -1895) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . -1896) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#("y" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . -1897) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("]" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . -1898) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . -1899) (undo-tree-id230 . -1) (undo-tree-id231 . -1) 1900) nil (25527 21729 115271 303000) 0 nil])
([nil nil ((1899 . 1904)) nil (25527 21729 115228 915000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "ref" "val" "key" "pars"))) . -1903) (undo-tree-id218 . -1) (undo-tree-id219 . -1) 1904) nil (25527 21729 115222 915000) 0 nil])
([nil nil ((1908 . 1911)) nil (25527 21828 393345 747000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars"))) . 1850) (t 25527 21729 184672 212000)) nil (25527 21846 362312 597000) 0 nil] [nil nil ((1856 . 1882) (1853 . 1856) (t 25527 21729 184672 212000)) ((#(":62" 0 3 (fontified nil help-echo cider--help-echo cider-locals ("atom" "val" "y" "ke:62" "pars"))) . 1853) (undo-tree-id252 . -3) (undo-tree-id253 . -3) (undo-tree-id254 . -3) (#("
                         " 0 26 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "y" "ke:62" "pars"))) . 1856) (undo-tree-id255 . -25) (undo-tree-id256 . -1) (undo-tree-id257 . -25)) (25527 21828 392549 501000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars"))) . 1857)) nil (25527 21846 362289 579000) 0 nil])
nil
([nil nil ((1902 . 1903) (t 25527 21846 412758 783000)) nil (25527 21906 243172 347000) 0 nil])
([nil nil ((1906 . 1907)) nil (25527 21906 243158 70000) 0 nil])
([nil nil ((1902 . 1904) (t 25527 21906 301797 392000)) nil (25527 22441 912982 423000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars"))) . 1902) (undo-tree-id271 . 1)) nil (25527 22441 912977 71000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars"))) . 1902) (undo-tree-id270 . 1)) nil (25527 22441 912969 461000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars"))) . 1902) (undo-tree-id269 . 1)) nil (25527 22441 912961 480000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars"))) . 1902) (undo-tree-id268 . 1)) nil (25527 22441 912953 721000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars"))) . 1902) (undo-tree-id267 . 1)) nil (25527 22441 912945 369000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars"))) . 1902) (undo-tree-id266 . 1)) nil (25527 22441 912937 351000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars"))) . 1902) (undo-tree-id262 . -1) (undo-tree-id263 . 1) (undo-tree-id264 . -1) (undo-tree-id265 . -1)) nil (25527 22441 912928 666000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars"))) . 1902) (undo-tree-id261 . 1)) nil (25527 22441 912911 463000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars"))) . 1902) (undo-tree-id260 . 1)) nil (25527 22441 912902 871000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars"))) . 1902) (undo-tree-id259 . 1)) nil (25527 22441 912894 279000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars"))) . 1902) (undo-tree-id258 . 1)) nil (25527 22441 912884 317000) 0 nil])
([nil nil ((1901 . 1913)) nil (25527 22441 912851 522000) 0 nil])
([nil nil ((1913 . 1917)) nil (25527 22441 912839 504000) 0 nil])
([nil nil ((1907 . 1908) (t 25527 22441 961545 889000)) nil (25527 22521 938150 739000) 0 nil])
([nil nil ((2162 . 2175) (t 25527 22521 987881 322000)) nil (25527 22615 683260 382000) 0 nil])
([nil nil ((2175 . 2188)) nil (25527 22615 683256 86000) 0 nil])
([nil nil ((2188 . 2189)) nil (25527 22615 683252 401000) 0 nil])
([nil nil ((2189 . 2194)) nil (25527 22615 683248 623000) 0 nil])
([nil nil ((2191 . 2192)) nil (25527 22615 683244 549000) 0 nil])
([nil nil ((2195 . 2201)) nil (25527 22615 683240 531000) 0 nil])
([nil nil ((2201 . 2217)) nil (25527 22615 683235 216000) 0 nil])
([nil nil ((2217 . 2219)) nil (25527 22615 683223 13000) 0 nil])
([nil nil ((3091 . 3096) (#("0" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "val" "key" "pars" "pars" "power"))) . 3091) (#("9" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "val" "key" "pars" "pars" "power"))) . 3091) (3024 . 3029) (#("i" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "val" "key" "pars" "pars" "i"))) . -3024) (undo-tree-id274 . -1) (#("p" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "val" "key" "pars" "pars" "ip"))) . -3025) (undo-tree-id275 . -1) (#("o" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "val" "key" "pars" "pars" "ipo"))) . -3026) (undo-tree-id276 . -1) (#("w" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "val" "key" "pars" "pars" "ipow"))) . -3027) (undo-tree-id277 . -1) 3028 (3024 . 3028) (t 25527 22615 743983 758000)) nil (25527 22800 337976 855000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3101 . 3102) (#("
" 0 1 (cider-locals ("atom" "val" "key" "pars" "pars" "power") fontified nil)) . -3197) (3101 . 3198)) nil (25527 22800 337953 393000) 0 nil])
([nil nil ((3112 . 3114) (3198 . 3199)) nil (25527 22800 337947 948000) 0 nil])
([nil nil ((3124 . 3130) (#("z" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "hr-z"))) . -3124) (undo-tree-id272 . -1) 3125 (3124 . 3125) (#("r" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "hr-r"))) . -3124) (undo-tree-id273 . -1) 3125 (3121 . 3125) (#("r" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "r"))) . 3121) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "er"))) . 3121) (#("w" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "wer"))) . 3121) (#("o" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "ower"))) . 3121) (#("p" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "power"))) . 3121) (#("w" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "wpower"))) . 3121) (#("c" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "cwpower"))) . 3121) (3121 . 3123) (3112 . 3114) (#("cwpw" 0 4 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "power") face font-lock-function-name-face)) . 3112)) nil (25527 22800 337937 171000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3217 . 3218) (#("
" 0 1 (cider-locals ("atom" "ref") fontified nil)) . -3345) (3201 . 3346) 3161) nil (25527 22800 337892 210000) 0 nil])
([nil nil ((#("{:mode \"pw-target\"  :pw-target power})))" 0 1 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "hr-targer")) 1 2 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "hr-targer") face clojure-keyword-face) 2 6 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "hr-targer") face clojure-keyword-face) 6 7 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "hr-targer")) 7 8 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "hr-targer") face font-lock-string-face) 8 17 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "hr-targer") face font-lock-string-face) 17 18 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "hr-targer") face font-lock-string-face) 18 20 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "hr-targer")) 20 21 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "hr-targer") face clojure-keyword-face) 21 30 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "hr-targer") face clojure-keyword-face) 30 39 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "hr-targer")) 39 40 (fontified t help-echo cider--help-echo cider-locals ("atom" "val" "key" "pars" "pars" "power" "hr-targer"))) . 3161)) nil (25527 22800 337885 136000) 0 nil])
([nil nil ((3305 . 3323)) nil (25527 22800 337880 451000) 0 nil])
([nil nil ((3323 . 3327)) nil (25527 22800 337868 359000) 0 nil])
([nil nil ((#("V" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "val" "key" "pars" "pars" "power" "hr-targer"))) . -3327) (undo-tree-id280 . -1) 3328 (3327 . 3328) (t 25527 22800 397299 754000)) nil (25527 22819 940487 921000) 0 nil])
([nil nil ((3335 . 3338) (3276 . 3279) (3238 . 3241) (3200 . 3203) (3178 . 3181) 3122) nil (25527 22819 940477 439000) 0 nil])
([nil nil ((#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "val" "key" "pars" "pars" "power" "hr-targer"))) . 3341)) nil (25527 22819 940470 366000) 0 nil])
([nil nil ((#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "val" "key" "pars" "pars" "power" "hr-targer"))) . -3339) (undo-tree-id278 . -1) (undo-tree-id279 . -1) 3340) nil (25527 22819 940463 736000) 0 nil])
([nil nil ((3340 . 3342)) nil (25527 22819 940418 515000) 0 nil])
([nil nil ((#("p" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars"))) . -2617) (undo-tree-id351 . -1) (undo-tree-id352 . -1) 2618 (2617 . 2618) (#("m" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars"))) . -2617) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (#("u" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars"))) . -2618) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (#("/" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars"))) . -2619) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) 2620 (2619 . 2620) (2606 . 2619) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars"))) . -2606) (undo-tree-id374 . -1) 2607 (2603 . 2607) (2586 . 2603) (t 25527 22819 996653 788000)) nil (25527 23360 617832 974000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2654 . 2655) (nil fontified nil 2617 . 2655) (2617 . 2655) 2616) nil (25527 23360 617686 996000) 0 nil])
([nil nil ((2618 . 2621)) nil (25527 23360 617676 515000) 0 nil])
([nil nil ((2703 . 2705) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#("
" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2643) (#("(" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2723) (#("x" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2723) (2723 . 2724) (2765 . 2768) (#("d" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . -2765) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . -2766) (undo-tree-id327 . -1) (undo-tree-id328 . -1) 2767 (2758 . 2767) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . -2758) (undo-tree-id329 . -1) (undo-tree-id330 . -1) 2759 (2755 . 2759) (#("p" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . -2755) (undo-tree-id331 . -1) (undo-tree-id332 . -1) 2756 (2755 . 2756) (#("i" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . -2755) (undo-tree-id333 . -1) (undo-tree-id334 . -1) 2756 (2755 . 2756) (2643 . 2690) (2633 . 2643) (2628 . 2633) (#("b" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . -2628) (undo-tree-id335 . -1) (undo-tree-id336 . -1) 2629 (#("u" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . -2629) (undo-tree-id337 . -1) (undo-tree-id338 . -1) 2630 (2627 . 2630) (#("d" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buff" "kettler-state" "mu/update-power-pid" "buf"))) . -2627) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buff" "kettler-state" "mu/update-power-pid" "buf"))) . -2628) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (#("m" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buff" "kettler-state" "mu/update-power-pid" "buf"))) . -2629) (undo-tree-id343 . -1) (undo-tree-id344 . -1) 2630 (2622 . 2630) (2618 . 2622) (#("d" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars"))) . -2618) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (#("o" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars") face font-lock-keyword-face)) . -2619) (undo-tree-id347 . -1) (undo-tree-id348 . -1) 2620 (2653 . 2654) (2621 . 2653) (#(" " 0 1 (help-echo cider--help-echo fontified nil cider-locals ("atom" "pars"))) . 2620) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (2621 . 2622) (2693 . 2694) (2617 . 2618) (2617 . 2620) (2617 . 2648)) nil (25527 23360 617629 553000) 0 nil])
([nil nil ((#("                                dd
" 0 34 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf")) 34 35 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . 2671) (undo-tree-id322 . 1) (undo-tree-id323 . -33) (undo-tree-id324 . -33) 2704) nil (25527 23360 617412 817000) 0 nil])
([nil nil ((2643 . 2644)) nil (25527 23360 617388 169000) 0 nil])
([nil nil ((#("(" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "buf"))) . -2643) (undo-tree-id321 . -1) 2644) nil (25527 23360 617379 633000) 0 nil])
([nil nil ((2643 . 2644)) nil (25527 23360 617365 114000) 0 nil])
([nil nil ((#(")" 0 1 (rear-nonsticky t help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "pid-response" "buf"))) . -2755) (undo-tree-id319 . -1) (#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "pid-response" "buf"))) . -2756) (undo-tree-id320 . -1) 2757) nil (25527 23360 617354 837000) 0 nil])
([nil nil ((2755 . 2756)) nil (25527 23360 617333 671000) 0 nil])
([nil nil ((2763 . 2795) (2672 . 2708) (#("                              " 0 30 (help-echo cider--help-echo fontified nil cider-locals ("atom" "pars" "pid-response" "buf"))) . 2672) (undo-tree-id318 . 30) (2756 . 2757)) nil (25527 23360 617323 134000) 0 nil])
([nil nil ((2795 . 2803)) nil (25527 23360 617304 857000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "pid-response" "buf"))) . -2802) (undo-tree-id317 . -1) 2803) nil (25527 23360 617295 412000) 0 nil])
([nil nil ((2802 . 2818)) nil (25527 23360 617279 783000) 0 nil])
([nil nil ((2818 . 2828)) nil (25527 23360 617271 894000) 0 nil])
([nil nil ((#(":" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "pid-response" "buf"))) . -2824) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (#("b" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "pid-response" "buf") face clojure-keyword-face)) . -2825) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (#("u" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "pid-response" "buf") face clojure-keyword-face)) . -2826) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (#("f" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "pid-response" "buf") face clojure-keyword-face)) . -2827) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) 2828) nil (25527 23360 617254 932000) 0 nil])
([nil nil ((#("(" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "pars" "pid-response" "buf"))) . -2823) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) 2824) nil (25527 23360 617109 250000) 0 nil])
([nil nil ((2823 . 2827)) nil (25527 23360 616931 14000) 0 nil])
([nil nil ((2827 . 2838)) nil (25527 23360 616912 847000) 0 nil])
([nil nil ((#("f" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . -2759) (undo-tree-id375 . -1) (undo-tree-id376 . -1) 2760 (t 25527 23360 671869 811000)) nil (25527 23372 473442 662000) 0 nil])
([nil nil ((3221 . 3222) (t 25527 23372 531590 871000)) nil (25527 23576 520101 121000) 0 nil])
([nil nil ((2835 . 2836)) nil (25527 23576 520094 195000) 0 nil])
([nil nil ((#("i" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . -2835) (undo-tree-id377 . -1) (undo-tree-id378 . -1) 2836) nil (25527 23576 520085 621000) 0 nil])
([nil nil ((2835 . 2868)) nil (25527 23576 520044 844000) 0 nil])
([nil nil ((2868 . 2882)) nil (25527 23576 520038 85000) 0 nil])
([nil nil ((2882 . 2887)) nil (25527 23576 520022 197000) 0 nil])
([nil nil ((#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . -2879) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (#("m" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . -2880) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (#("o" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . -2881) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (#("-" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . -2882) (undo-tree-id397 . -1) (undo-tree-id398 . -1) 2883 (t 25527 23576 586972 489000)) nil (25527 23588 707227 876000) 0 nil])
([nil nil ((#("d" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . -2878) (undo-tree-id389 . -1) (undo-tree-id390 . -1) 2879) nil (25527 23588 707179 63000) 0 nil])
([nil nil ((#("d" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . -2807) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . -2808) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#("m" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . -2809) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (#("o" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . -2810) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (#("-" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . -2811) (undo-tree-id387 . -1) (undo-tree-id388 . -1) 2812) nil (25527 23588 707148 471000) 0 nil])
([nil nil ((#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . -2878) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) 2879 (t 25527 23588 766706 152000)) nil (25527 23616 430859 544000) 0 nil])
([nil nil ((2878 . 2880)) nil (25527 23616 430804 471000) 0 nil])
([nil nil ((#("V" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars"))) . -2586) (undo-tree-id404 . -1) 2587 (2586 . 2587) (t 25527 23616 476103 545000)) nil (25527 23758 723939 840000) 0 nil])
([nil nil ((#("d" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . 2634)) nil (25527 23758 723906 766000) 0 nil])
([nil nil ((#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . 2634)) nil (25527 23758 723901 674000) 0 nil])
([nil nil ((#("m" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . 2634)) nil (25527 23758 723896 878000) 0 nil])
([nil nil ((#("o" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . 2634)) nil (25527 23758 723891 341000) 0 nil])
([nil nil ((#("-" 0 1 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf"))) . 2634)) nil (25527 23758 723878 285000) 0 nil])
([nil nil ((#("                :on-success #((let [buf (:buf @pars)                           
                                    pid-response (mu/update-power-pid kettler-state buf)]
                                (update-pars pars :buf pid-response)
                                (println @pars)))
" 0 16 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars")) 16 17 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars") face clojure-keyword-face) 17 27 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars") face clojure-keyword-face) 27 31 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars")) 31 34 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars") face font-lock-keyword-face) 34 41 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf")) 41 42 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf") face clojure-keyword-face) 42 45 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf") face clojure-keyword-face) 45 79 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf")) 79 80 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf")) 80 116 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf")) 116 129 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf")) 129 130 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf")) 130 132 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf") face font-lock-type-face) 132 170 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf")) 170 203 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf")) 203 220 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf")) 220 221 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf") face clojure-keyword-face) 221 224 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf") face clojure-keyword-face) 224 239 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf")) 239 272 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf")) 272 279 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf") face font-lock-function-name-face) 279 285 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf")) 285 287 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars" "pid-response" "buf")) 287 288 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars")) 288 289 (help-echo cider--help-echo fontified t cider-locals ("atom" "ref" "pars"))) . 2587) (undo-tree-id405 . -225) (undo-tree-id406 . -253) (undo-tree-id407 . -14) (undo-tree-id408 . -253) (undo-tree-id409 . -30) (undo-tree-id410 . -168) (undo-tree-id411 . -30) (undo-tree-id412 . -30) (undo-tree-id413 . -30) (undo-tree-id414 . -30) (undo-tree-id415 . -130) (undo-tree-id416 . -30) (undo-tree-id417 . -225) (undo-tree-id418 . -225) (undo-tree-id419 . -225) (undo-tree-id420 . -225) (undo-tree-id421 . -225) (undo-tree-id422 . -286) (undo-tree-id423 . -286) (undo-tree-id424 . -286) (undo-tree-id425 . -215) (undo-tree-id426 . -47) (undo-tree-id427 . -253) (undo-tree-id428 . -289) (undo-tree-id429 . -14) (undo-tree-id430 . -253) (undo-tree-id431 . -239) (undo-tree-id432 . -253) 2840 (t 25527 23758 783073 508000)) nil (25527 23811 108551 976000) 0 nil])
([nil nil ((2617 . 2618) (2614 . 2617) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2614) (undo-tree-id10 . -1) 2615 (2606 . 2615) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2606) (undo-tree-id11 . -1) 2607 (2603 . 2607) (2586 . 2603) (t 25527 23811 161981 868000) 2585) nil (25527 24393 354588 798000) 0 nil])
([nil nil ((#("f" 0 1 (face clojure-keyword-face cider-locals ("pars" "hr-targer") fontified t help-echo cider--help-echo)) . 3316) (undo-tree-id9 . 1)) nil (25527 24393 354571 613000) 0 nil])
([nil nil ((#("f" 0 1 (face clojure-keyword-face cider-locals ("ref") fontified t)) . 1769)) nil (25527 24393 354564 317000) 0 nil])
([nil nil ((2616 . 2626)) nil (25527 24393 354560 687000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2623) (undo-tree-id6 . -1) (#("z" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2624) (undo-tree-id7 . -1) (#("e" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2625) (undo-tree-id8 . -1) 2626) nil (25527 24393 354554 576000) 0 nil])
([nil nil ((2623 . 2632)) nil (25527 24393 354540 650000) 0 nil])
([nil nil ((2632 . 2650)) nil (25527 24393 354536 650000) 0 nil])
([nil nil ((2650 . 2661)) nil (25527 24393 354533 39000) 0 nil])
([nil nil ((2656 . 2657)) nil (25527 24393 354529 39000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2662) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 2663) nil (25527 24393 354523 21000) 0 nil])
([nil nil ((2662 . 2664)) nil (25527 24393 354511 688000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2662) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#(")" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2663) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 2664) nil (25527 24393 354504 577000) 0 nil])
([nil nil ((2662 . 2663)) nil (25527 24393 354436 708000) 0 nil])
([nil nil ((2616 . 2630) (t 25527 24393 660376 171000)) nil (25527 24524 310325 750000) 0 nil])
([nil nil ((2630 . 2631)) nil (25527 24524 310321 547000) 0 nil])
([nil nil ((2677 . 2678)) nil (25527 24524 310317 732000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . -2678) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) 2679) nil (25527 24524 310312 954000) 0 nil])
([nil nil ((2678 . 2679)) nil (25527 24524 310300 177000) 0 nil])
([nil nil ((2679 . 2680)) nil (25527 24524 310296 492000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . -2678) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#(")" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2679) (undo-tree-id20 . -1) (undo-tree-id21 . -1) 2680) nil (25527 24524 310291 140000) 0 nil])
([nil nil ((2678 . 2679)) nil (25527 24524 310274 585000) 0 nil])
([nil nil ((2679 . 2680)) nil (25527 24524 310271 30000) 0 nil])
([nil nil ((2680 . 2712) (#("                                " 0 32 (cider-locals ("pars" "kettler-state" "response") fontified nil help-echo cider--help-echo)) . 2679) (undo-tree-id16 . -32) (undo-tree-id17 . -32) (2678 . 2712)) nil (25527 24524 310265 789000) 0 nil])
([nil nil ((2679 . 2711)) nil (25527 24524 310254 623000) 0 nil])
([nil nil ((2711 . 2723)) nil (25527 24524 310251 67000) 0 nil])
([nil nil ((2711 . 2712)) nil (25527 24524 310247 475000) 0 nil])
([nil nil ((2724 . 2734)) nil (25527 24524 310243 882000) 0 nil])
([nil nil ((2734 . 2736)) nil (25527 24524 310240 179000) 0 nil])
([nil nil ((#("(" 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . -2734) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#(":" 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . -2735) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 2736) nil (25527 24524 310234 327000) 0 nil])
([nil nil ((2734 . 2743)) nil (25527 24524 310192 606000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#("
" 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743)) nil (25527 24524 310178 940000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(")" 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "response") fontified t help-echo cider--help-echo)) . 2743)) nil (25527 24524 310155 737000) 0 nil])
([nil nil ((2743 . 2745)) nil (25527 24524 310136 126000) 0 nil])
([nil nil ((2631 . 2632) (t 25527 24524 356757 138000)) nil (25527 24690 455738 587000) 0 nil])
([nil nil ((2678 . 2679)) nil (25527 24690 455716 328000) 0 nil])
([nil nil ((2745 . 2746) (t 25527 24690 501963 555000)) nil (25527 24842 56058 623000) 0 nil])
([nil nil ((#("i" 0 1 (cider-locals ("pars" "response") fontified t help-echo cider--help-echo)) . -2745) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 2746) nil (25527 24842 56053 12000) 0 nil])
([nil nil ((2745 . 2778)) nil (25527 24842 56042 438000) 0 nil])
([nil nil ((2778 . 2787)) nil (25527 24842 56038 994000) 0 nil])
([nil nil ((2787 . 2793)) nil (25527 24842 56035 31000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("pars" "response") fontified t help-echo cider--help-echo)) . -2792) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#(")" 0 1 (cider-locals ("pars" "response") fontified t help-echo cider--help-echo)) . -2793) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#(")" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2794) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 2795) nil (25527 24842 56027 142000) 0 nil])
([nil nil ((2792 . 2795)) nil (25527 24842 55961 755000) 0 nil])
([nil nil ((2041 . 2053) (t 25527 24842 97939 382000)) nil (25527 24991 974509 242000) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2041) (undo-tree-id40 . -1) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2042) (undo-tree-id41 . -1) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2043) (undo-tree-id42 . -1) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2044) (undo-tree-id43 . -1) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2045) (undo-tree-id44 . -1) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2046) (undo-tree-id45 . -1) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2047) (undo-tree-id46 . -1) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2048) (undo-tree-id47 . -1) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2049) (undo-tree-id48 . -1) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2050) (undo-tree-id49 . -1) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2051) (undo-tree-id50 . -1) (#(" " 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2052) (undo-tree-id51 . -1) 2053) nil (25527 24991 974488 243000) 0 nil])
([nil nil ((3153 . 3161) (#(" " 0 1 (cider-locals ("pars" "state" "pars" "control" "sm") fontified nil help-echo cider--help-echo)) . 3152) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (3153 . 3154)) nil (25527 24991 974398 393000) 0 nil])
([nil nil ((3161 . 3169)) nil (25527 24991 974374 894000) 0 nil])
([nil nil ((#("m" 0 1 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . -3168) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 3169) nil (25527 24991 974363 505000) 0 nil])
([nil nil ((3168 . 3173)) nil (25527 24991 974311 451000) 0 nil])
([nil nil ((3173 . 3174)) nil (25527 24991 974292 581000) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-string-face cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . -3171) (undo-tree-id52 . -1) (undo-tree-id53 . -1) 3172 (t 25527 24992 34201 15000)) nil (25527 25029 462133 863000) 0 nil])
([nil nil ((3171 . 3181)) nil (25527 25029 462070 272000) 0 nil])
([nil nil ((3181 . 3182) (t 25527 25029 523296 303000)) nil (25527 25059 180033 781000) 0 nil])
([nil nil ((#("x" 0 1 (face font-lock-string-face cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . -3181) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("\"" 0 1 (face font-lock-string-face cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . -3182) (undo-tree-id58 . -1) (undo-tree-id59 . -1) 3183) nil (25527 25059 180026 929000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . -3170) (undo-tree-id54 . -1) (undo-tree-id55 . -1) 3171) nil (25527 25059 180001 652000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face cider-locals ("pars" "response") fontified t help-echo cider--help-echo)) . -2787) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("p" 0 1 (face font-lock-string-face cider-locals ("pars" "response") fontified t help-echo cider--help-echo)) . -2788) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("i" 0 1 (face font-lock-string-face cider-locals ("pars" "response") fontified t help-echo cider--help-echo)) . -2789) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("d" 0 1 (face font-lock-string-face cider-locals ("pars" "response") fontified nil help-echo cider--help-echo)) . -2790) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("\"" 0 1 (face font-lock-string-face cider-locals ("pars" "response") fontified t help-echo cider--help-echo)) . -2791) (undo-tree-id68 . -1) (undo-tree-id69 . -1) 2792 (t 25527 25059 232586 716000)) nil (25527 25086 419478 864000) 0 nil])
([nil nil ((2787 . 2792)) nil (25527 25361 184701 578000) 0 nil])
([nil nil ((#("demo-" 0 1 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo) 1 2 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo) 2 3 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo) 3 4 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo) 4 5 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . 3171) (undo-tree-id130 . -5) (undo-tree-id131 . -5)) ((3171 . 3176)) (25527 25365 75575 629000) 0 nil])
([nil nil ((3362 . 3363) (#("r" 0 1 (cider-locals ("pars" "hr-targer") fontified t help-echo cider--help-echo)) . 3362) (t 25527 25367 475529 182000)) nil (25527 26671 33295 246000) 0 nil] [nil nil ((2730 . 2732) (2663 . 2665) (#(")" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2663) (undo-tree-id88 . -1) 2664 (#("x" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2664) (undo-tree-id90 . -1) (#("]" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2665) (undo-tree-id92 . -1) 2666 (2664 . 2665) (2616 . 2617) (#("(" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2616) (undo-tree-id94 . -1) 2617 (#("(" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2616) (undo-tree-id96 . -1) (#("l" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2617) (undo-tree-id98 . -1) (#("e" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2618) (undo-tree-id100 . -1) (#("t" 0 1 (face font-lock-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2619) (undo-tree-id102 . -1) (#(" " 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2620) (undo-tree-id104 . -1) (#("[" 0 1 (cider-locals ("pars" "pars" "kettler-state" "mu/update-power-pid") fontified t help-echo cider--help-echo)) . -2621) (undo-tree-id106 . -1) (#("r" 0 1 (cider-locals ("pars" "r") fontified t help-echo cider--help-echo)) . -2622) (undo-tree-id108 . -1) (#("e" 0 1 (cider-locals ("pars" "re") fontified t help-echo cider--help-echo)) . -2623) (undo-tree-id110 . -1) (#("s" 0 1 (cider-locals ("pars" "res") fontified t help-echo cider--help-echo)) . -2624) (undo-tree-id112 . -1) (#("p" 0 1 (cider-locals ("pars" "resp") fontified t help-echo cider--help-echo)) . -2625) (undo-tree-id114 . -1) (#("o" 0 1 (cider-locals ("pars" "respo") fontified t help-echo cider--help-echo)) . -2626) (undo-tree-id116 . -1) (#("n" 0 1 (cider-locals ("pars" "respon") fontified t help-echo cider--help-echo)) . -2627) (undo-tree-id118 . -1) (#("s" 0 1 (cider-locals ("pars" "respons") fontified t help-echo cider--help-echo)) . -2628) (undo-tree-id120 . -1) (#("e" 0 1 (cider-locals ("pars" "response") fontified t help-echo cider--help-echo)) . -2629) (undo-tree-id122 . -1) (#(" " 0 1 (cider-locals ("pars" "response") fontified t help-echo cider--help-echo)) . -2630) (undo-tree-id124 . -1) 2631 (t 25527 25145 320563 935000)) ((2616 . 2631) (2616 . 2617) (#("(" 0 1 (cider-locals ("pars") fontified nil help-echo cider--help-echo)) . 2616) (#("x" 0 1 (cider-locals ("pars") fontified nil help-echo cider--help-echo)) . 2664) (2663 . 2666) (#("))" 0 2 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . 2663) (#("dd" 0 2 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . 2730) (undo-tree-id128 . -1) (undo-tree-id129 . -1)) (25527 25356 556599 368000) 0 nil])
([nil nil ((3488 . 3489) (#("1" 0 1 (cider-locals ("pars" "hr-target") fontified t help-echo cider--help-echo)) . 3488)) nil (25527 26671 33289 617000) 0 nil])
([nil nil ((#("                                (update-pars pars :buf response)dd
" 0 33 (cider-locals ("pars") fontified t help-echo cider--help-echo) 33 50 (cider-locals ("pars") fontified t help-echo cider--help-echo) 50 51 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo) 51 54 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo) 54 67 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . 2666) (undo-tree-id85 . 1) (undo-tree-id86 . -65) 2731) ((2666 . 2733)) (25527 25355 364519 964000) 0 nil])
([nil nil ((#("w35" 0 1 (cider-locals ("pars" "hr-target") help-echo cider--help-echo fontified t) 1 3 (cider-locals ("pars" "hr-target") fontified t help-echo cider--help-echo)) . 3488)) nil (25527 26671 33284 802000) 0 nil])
([nil nil ((#("                                (println @pars)))
" 0 33 (cider-locals ("pars") fontified t help-echo cider--help-echo) 33 40 (face font-lock-function-name-face cider-locals ("pars") fontified t help-echo cider--help-echo) 40 46 (cider-locals ("pars") fontified t help-echo cider--help-echo) 46 48 (cider-locals ("pars") fontified t help-echo cider--help-echo) 48 49 (cider-locals ("pars") fontified t help-echo cider--help-echo) 49 50 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . 2666) (undo-tree-id80 . -49) (undo-tree-id81 . 50) (undo-tree-id82 . -48) (undo-tree-id84 . -48) 2714) ((2666 . 2716)) (25527 25354 560093 358000) 0 nil])
([nil nil ((3488 . 3495)) nil (25527 26671 33280 358000) 0 nil])
([nil nil ((#("                   :on-success #(mu/set-power kettler-state (:pw-target @demo-pars))
" 0 19 (cider-locals ("pars") fontified t help-echo cider--help-echo) 19 20 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo) 20 30 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo) 30 33 (cider-locals ("pars") fontified t help-echo cider--help-echo) 33 35 (face font-lock-type-face cider-locals ("pars") fontified t help-echo cider--help-echo) 35 61 (cider-locals ("pars") fontified t help-echo cider--help-echo) 61 62 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo) 62 71 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo) 71 85 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . 2741) (undo-tree-id126 . -35) 2776 (t 25527 25261 447903 46000)) ((2741 . 2826) (t 25527 25297 287095 276000)) (25527 25297 218717 830000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals ("pars" "hr-target") fontified t help-echo cider--help-echo)) . -3494) (undo-tree-id132 . -1) (undo-tree-id133 . -1) 3495) nil (25527 26671 33273 729000) 0 nil])
nil
([nil nil ((3494 . 3497)) nil (25527 26671 33229 453000) 0 nil])
([nil nil ((2033 . 2042) (2027 . 2033) (#("b" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2027) (undo-tree-id134 . -1) (undo-tree-id135 . -1) 2028 (2026 . 2028) (#("k" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2026) (undo-tree-id136 . -1) (undo-tree-id137 . -1) 2027 (2025 . 2027) (2013 . 2025) (#("e" 0 1 (face clojure-keyword-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2013) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("s" 0 1 (face clojure-keyword-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2014) (undo-tree-id140 . -1) (undo-tree-id141 . -1) 2015 (#("s" 0 1 (face clojure-keyword-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2015) (undo-tree-id142 . -1) (undo-tree-id143 . -1) 2016 (2013 . 2016) (#("u" 0 1 (face clojure-keyword-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2013) (undo-tree-id144 . -1) (undo-tree-id145 . -1) 2014 (2012 . 2014) (#("u" 0 1 (face clojure-keyword-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2012) (undo-tree-id146 . -1) (undo-tree-id147 . -1) 2013 (2006 . 2013) (2007 . 2019) (#("            " 0 12 (cider-locals ("pars") help-echo cider--help-echo fontified nil)) . 2006) (undo-tree-id148 . -12) (undo-tree-id149 . -12) (2018 . 2019) (#(":" 0 1 (face clojure-keyword-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2111) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("o" 0 1 (face clojure-keyword-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2112) (undo-tree-id152 . -1) (undo-tree-id153 . -1) 2113 (#("n" 0 1 (face clojure-keyword-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2113) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("-" 0 1 (face clojure-keyword-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2114) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("s" 0 1 (face clojure-keyword-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2115) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("u" 0 1 (face clojure-keyword-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2116) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("c" 0 1 (face clojure-keyword-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2117) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("c" 0 1 (face clojure-keyword-face cider-locals ("pars") help-echo cider--help-echo fontified nil)) . -2118) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("e" 0 1 (face clojure-keyword-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2119) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("s" 0 1 (face clojure-keyword-face cider-locals ("pars") help-echo cider--help-echo fontified nil)) . -2120) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("s" 0 1 (face clojure-keyword-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2121) (undo-tree-id170 . -1) (undo-tree-id171 . -1) 2122 (2114 . 2122) (#("s" 0 1 (face clojure-keyword-face cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2114) (undo-tree-id172 . -1) (undo-tree-id173 . -1) 2115 (2111 . 2115) (t 25527 26671 74831 369000)) nil (25527 26907 442246 895000) 0 nil])
([nil nil ((2006 . 2018) 2041) nil (25527 26907 442052 346000) 0 nil])
([nil nil ((#("pid" 0 3 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo)) . 2588) (t 25527 26907 486934 515000)) nil (25527 27127 587870 997000) 0 nil])
([nil nil ((#("-" 0 1 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo)) . 2588)) nil (25527 27152 494691 653000) 0 nil])
([nil nil ((#("power" 0 5 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo)) . 2588)) nil (25527 27168 784997 590000) 0 nil] [nil nil ((#("power" 0 5 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo)) . 2588)) ((2588 . 2593)) (25527 27151 981785 13000) 0 nil])
([nil nil ((2588 . 2593)) nil (25527 27168 784984 72000) 0 nil])
([nil nil ((#("}" 0 1 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . 2588)) ((2588 . 2589)) (25527 27151 485505 664000) 0 nil])
([nil nil ((2517 . 2518) (t 25527 27168 829192 677000)) nil (25527 27200 240658 716000) 0 nil])
([nil nil ((2588 . 2592)) ((#("tart" 0 1 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo) 1 2 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo) 2 3 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo) 3 4 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo)) . 2588) (undo-tree-id184 . -4) (undo-tree-id185 . -4)) (25527 27150 752009 677000) 0 nil])
([nil nil ((2558 . 2559)) nil (25527 27200 240638 142000) 0 nil])
([nil nil ((#("t" 0 1 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2588) (undo-tree-id174 . -1) (#("a" 0 1 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2589) (undo-tree-id176 . -1) (#("r" 0 1 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2590) (undo-tree-id178 . -1) (#("t" 0 1 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo)) . -2591) (undo-tree-id180 . -1) 2592) ((2588 . 2592)) (25527 27149 912479 167000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("pars" "state" "pars" "control") fontified t help-echo cider--help-echo)) . -3280) (undo-tree-id204 . -1) 3281 (t 25527 27200 298309 457000)) nil (25527 27693 399455 108000) 0 nil])
([nil nil ((2588 . 2593)) ((#("start" 0 5 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo)) . 2588) (undo-tree-id182 . -5) (undo-tree-id183 . -5) (t 25527 27127 640362 367000)) (25527 27149 26521 92000) 0 nil])
([nil nil ((3280 . 3281)) nil (25527 27693 399439 441000) 0 nil])
([nil nil ((1920 . 1924) (t 25527 27127 640362 367000)) ((#("uuuu" 0 4 (cider-locals nil fontified t help-echo cider--help-echo)) . 1920)) (25527 27149 25787 780000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . -3280) (undo-tree-id203 . -1) 3281) nil (25527 27693 399430 867000) 0 nil])
nil
([nil nil ((3280 . 3281)) nil (25527 27693 399416 460000) 0 nil])
([nil nil ((#("(" 0 1 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . -3196) (undo-tree-id201 . -1) (undo-tree-id202 . -1) 3197) nil (25527 27693 399406 924000) 0 nil])
([nil nil ((3196 . 3197)) nil (25527 27693 399386 646000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . -3276) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (#(")" 0 1 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . -3277) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#(")" 0 1 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . -3278) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (#(")" 0 1 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . -3279) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#(")" 0 1 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . -3280) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) 3281) nil (25527 27693 399369 758000) 0 nil])
([nil nil ((3276 . 3277)) nil (25527 27693 399250 224000) 0 nil])
([nil nil ((3277 . 3280)) nil (25527 27693 399242 298000) 0 nil])
([nil nil ((3280 . 3281)) nil (25527 27693 399224 910000) 0 nil])
([nil nil ((3281 . 3285) (t 25527 27693 465307 502000)) nil (25527 28875 173376 416000) 0 nil])
([nil nil ((#("E" 0 1 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . -3281) (undo-tree-id212 . -1) (#("R" 0 1 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . -3282) (undo-tree-id213 . -1) (#("2" 0 1 (cider-locals ("pars" "state" "pars" "control" "sm") fontified nil help-echo cider--help-echo)) . -3283) (undo-tree-id214 . -1) (#("1" 0 1 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . -3284) (undo-tree-id215 . -1) 3285) nil (25527 28875 173369 65000) 0 nil])
([nil nil ((3280 . 3283)) nil (25527 28875 173349 195000) 0 nil])
([nil nil ((3283 . 3291)) nil (25527 28875 173345 10000) 0 nil])
([nil nil ((#("P" 0 1 (cider-locals ("pars" "state" "pars" "control") fontified t help-echo cider--help-echo)) . -3284) (undo-tree-id205 . -1) (#("R" 0 1 (cider-locals ("pars" "state" "pars" "control") fontified t help-echo cider--help-echo)) . -3285) (undo-tree-id206 . -1) (#("I" 0 1 (cider-locals ("pars" "state" "pars" "control") fontified t help-echo cider--help-echo)) . -3286) (undo-tree-id207 . -1) (#("N" 0 1 (cider-locals ("pars" "state" "pars" "control") fontified t help-echo cider--help-echo)) . -3287) (undo-tree-id208 . -1) (#("T" 0 1 (cider-locals ("pars" "state" "pars" "control") fontified t help-echo cider--help-echo)) . -3288) (undo-tree-id209 . -1) (#("L" 0 1 (cider-locals ("pars" "state" "pars" "control") fontified t help-echo cider--help-echo)) . -3289) (undo-tree-id210 . -1) (#("N" 0 1 (cider-locals ("pars" "state" "pars" "control") fontified t help-echo cider--help-echo)) . -3290) (undo-tree-id211 . -1) 3291) nil (25527 28875 173334 306000) 0 nil])
([nil nil ((3284 . 3288)) nil (25527 28875 173277 436000) 0 nil])
([nil nil ((3288 . 3301)) nil (25527 28875 173265 455000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . -3278) (undo-tree-id218 . -1) (undo-tree-id219 . -1) 3279 (t 25527 28875 220907 590000)) nil (25527 28906 714933 253000) 0 nil])
([nil nil ((3279 . 3280)) nil (25527 28906 714921 13000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("pars" "state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . -3279) (undo-tree-id216 . -1) (undo-tree-id217 . -1) 3280) nil (25527 28906 714914 272000) 0 nil])
([nil nil ((3301 . 3302)) nil (25527 28906 714876 87000) 0 nil])
([nil nil ((3302 . 3303)) nil (25527 28906 714863 476000) 0 nil])
([nil nil ((3092 . 3097) (t 25527 28906 770438 249000)) nil (25527 28999 179269 133000) 0 nil])
([nil nil ((#("1" 0 1 (cider-locals ("pars" "1state" "pars" "control") fontified t help-echo cider--help-echo)) . -3092) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#("f" 0 1 (cider-locals ("pars" "1fstate" "pars" "control") fontified t help-echo cider--help-echo)) . -3093) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("s" 0 1 (cider-locals ("pars" "1fsstate" "pars" "control") fontified t help-echo cider--help-echo)) . -3094) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (#("t" 0 1 (cider-locals ("pars" "1fststate" "pars" "control") fontified t help-echo cider--help-echo)) . -3095) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("-" 0 1 (cider-locals ("pars" "1fst-state" "pars" "control") fontified t help-echo cider--help-echo)) . -3096) (undo-tree-id232 . -1) (undo-tree-id233 . -1) 3097) nil (25527 28999 179256 985000) 0 nil])
([nil nil ((3092 . 3094)) nil (25527 28999 179186 838000) 0 nil])
([nil nil ((#("r" 0 1 (cider-locals ("pars" "srstate" "pars" "control") fontified t help-echo cider--help-echo)) . -3093) (undo-tree-id222 . -1) (undo-tree-id223 . -1) 3094) nil (25527 28999 179179 393000) 0 nil])
([nil nil ((3093 . 3094)) nil (25527 28999 179162 968000) 0 nil])
([nil nil ((#("z" 0 1 (cider-locals ("pars" "szstate" "pars" "control") fontified t help-echo cider--help-echo)) . -3093) (undo-tree-id220 . -1) (undo-tree-id221 . -1) 3094) nil (25527 28999 179154 449000) 0 nil])
([nil nil ((3093 . 3097)) nil (25527 28999 179110 561000) 0 nil])
([nil nil ((3097 . 3098)) nil (25527 28999 179103 543000) 0 nil])
([nil nil ((3146 . 3152)) nil (25527 28999 179087 802000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("start-state" "pars" "control" "sm"))) . -3200) (undo-tree-id12 . -1) (undo-tree-id13 . -1) 3201 (t 25527 28999 238990 165000)) nil (25527 29319 443679 837000) 0 nil])
([nil nil ((3200 . 3201)) nil (25527 29319 443658 78000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("start-state" "pars" "control" "sm"))) . -3200) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 3201) nil (25527 29319 443647 986000) 0 nil])
([nil nil ((3200 . 3201)) nil (25527 29319 443626 968000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("start-state" "pars" "control" "sm"))) . -3289) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("start-state" "pars" "control" "sm"))) . -3290) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 3291) nil (25527 29319 443615 857000) 0 nil])
([nil nil ((3289 . 3291)) nil (25527 29319 443582 395000) 0 nil])
([nil nil ((#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("start-state" "pars" "control" "sm"))) . -3313) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("start-state" "pars" "control" "sm"))) . -3314) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 3315) nil (25527 29319 443571 117000) 0 nil])
([nil nil ((3313 . 3314)) nil (25527 29319 443535 933000) 0 nil])
([nil nil ((#("=" 0 1 (help-echo cider--help-echo fontified t cider-locals ("start-state" "pars" "control" "sm") face font-lock-function-name-face)) . -3313) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 3314) nil (25527 29319 443523 488000) 0 nil])
([nil nil ((3313 . 3315)) nil (25527 29769 125465 847000) 0 nil])
([nil nil ((#("(defn kettler-control [pars]
  {:start [{:conditions [#(= (:mode @pars) \"hr-target\")]
            :on-success #((println \"hr-target\"))
            :transition :hr-target}
           {:conditions [#(= (:mode @pars) \"pw-target\")]
            :transition :pw-target}
           {:conditions []
            :on-success #(update-pars pars :mode \"exit\")
            :transition :start}]
   
   :pw-target [{:conditions []
                :on-success #(mu/update-kettler kettler-state sim-pars)
                :transition :update-power}]
   
   :hr-target [{:conditions []
                :on-success #((mu/update-kettler kettler-state sim-pars))
                :transition :start}]
   
   :pid-power [{:conditions []
                :on-success #((let [response (mu/update-power-pid kettler-state (:buf @pars))]
                                (update-pars pars :buf response)
                                (println @pars)))
                :transition :start}]
   
   :update-power [{:conditions []
                   :on-success #(mu/set-power kettler-state (:pw-target @demo-pars))
                   :transition :start}]
   })
" 0 1 (help-echo cider--help-echo fontified t cider-locals nil) 1 5 (help-echo cider--help-echo fontified t cider-locals nil face font-lock-keyword-face) 5 6 (help-echo cider--help-echo fontified t cider-locals ("pars")) 6 21 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 21 29 (help-echo cider--help-echo fontified t cider-locals ("pars")) 29 32 (help-echo cider--help-echo cider-locals ("pars") fontified t) 32 33 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 33 38 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 38 41 (help-echo cider--help-echo cider-locals ("pars") fontified t) 41 42 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 42 52 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 52 56 (help-echo cider--help-echo cider-locals ("pars") fontified t) 56 57 (help-echo cider--help-echo cider-locals ("pars") fontified t face font-lock-function-name-face) 57 59 (help-echo cider--help-echo cider-locals ("pars") fontified t) 59 60 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 60 64 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 64 72 (help-echo cider--help-echo cider-locals ("pars") fontified t) 72 83 (help-echo cider--help-echo cider-locals ("pars") fontified t face font-lock-string-face) 83 98 (help-echo cider--help-echo cider-locals ("pars") fontified t) 98 99 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 99 109 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 109 113 (help-echo cider--help-echo cider-locals ("pars") fontified t) 113 120 (help-echo cider--help-echo cider-locals ("pars") fontified t face font-lock-function-name-face) 120 121 (help-echo cider--help-echo cider-locals ("pars") fontified t) 121 132 (help-echo cider--help-echo cider-locals ("pars") fontified t face font-lock-string-face) 132 147 (help-echo cider--help-echo cider-locals ("pars") fontified t) 147 148 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 148 158 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 158 159 (help-echo cider--help-echo cider-locals ("pars") fontified t) 159 160 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 160 169 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 169 183 (help-echo cider--help-echo cider-locals ("pars") fontified t) 183 184 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 184 194 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 194 198 (help-echo cider--help-echo cider-locals ("pars") fontified t) 198 199 (help-echo cider--help-echo cider-locals ("pars") fontified t face font-lock-function-name-face) 199 201 (help-echo cider--help-echo cider-locals ("pars") fontified t) 201 202 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 202 206 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 206 214 (help-echo cider--help-echo cider-locals ("pars") fontified t) 214 225 (help-echo cider--help-echo cider-locals ("pars") fontified t face font-lock-string-face) 225 240 (help-echo cider--help-echo cider-locals ("pars") fontified t) 240 241 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 241 251 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 251 252 (help-echo cider--help-echo cider-locals ("pars") fontified t) 252 253 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 253 262 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 262 276 (help-echo cider--help-echo cider-locals ("pars") fontified t) 276 277 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 277 287 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 287 303 (help-echo cider--help-echo cider-locals ("pars") fontified t) 303 304 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 304 314 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 314 334 (help-echo cider--help-echo cider-locals ("pars") fontified t) 334 335 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 335 339 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 339 340 (help-echo cider--help-echo cider-locals ("pars") fontified t) 340 346 (help-echo cider--help-echo cider-locals ("pars") fontified t face font-lock-string-face) 346 360 (help-echo cider--help-echo cider-locals ("pars") fontified t) 360 361 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 361 371 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 371 372 (help-echo cider--help-echo cider-locals ("pars") fontified t) 372 373 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 373 378 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 378 388 (help-echo cider--help-echo cider-locals ("pars") fontified t) 388 389 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 389 398 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 398 401 (help-echo cider--help-echo cider-locals ("pars") fontified t) 401 402 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 402 404 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 404 412 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 412 416 (help-echo cider--help-echo cider-locals ("pars") fontified t) 416 432 (help-echo cider--help-echo fontified t cider-locals ("pars")) 432 433 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 433 443 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 443 446 (help-echo cider--help-echo fontified t cider-locals ("pars")) 446 448 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-type-face) 448 487 (help-echo cider--help-echo fontified t cider-locals ("pars")) 487 488 (help-echo cider--help-echo fontified t cider-locals ("pars")) 488 498 (help-echo cider--help-echo cider-locals ("pars") fontified t) 498 504 (help-echo cider--help-echo cider-locals ("pars") fontified t) 504 505 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 505 515 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 515 516 (help-echo cider--help-echo cider-locals ("pars") fontified t) 516 517 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 517 527 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 527 529 (cider-locals ("pars") fontified t face clojure-keyword-face) 529 532 (cider-locals ("pars") fontified t) 532 539 (help-echo cider--help-echo cider-locals ("pars") fontified t) 539 540 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 540 549 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 549 552 (help-echo cider--help-echo cider-locals ("pars") fontified t) 552 553 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 553 563 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 563 583 (help-echo cider--help-echo cider-locals ("pars") fontified t) 583 584 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 584 594 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 594 598 (help-echo cider--help-echo cider-locals ("pars") fontified t) 598 600 (help-echo cider--help-echo cider-locals ("pars") fontified t face font-lock-type-face) 600 657 (help-echo cider--help-echo cider-locals ("pars") fontified t) 657 658 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 658 668 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 668 669 (help-echo cider--help-echo cider-locals ("pars") fontified t) 669 670 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 670 675 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 675 685 (help-echo cider--help-echo cider-locals ("pars") fontified t) 685 686 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 686 695 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 695 698 (help-echo cider--help-echo cider-locals ("pars") fontified t) 698 699 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 699 709 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 709 729 (help-echo cider--help-echo cider-locals ("pars") fontified t) 729 730 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 730 740 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 740 744 (help-echo cider--help-echo cider-locals ("pars") fontified t) 744 747 (help-echo cider--help-echo cider-locals ("pars") fontified t face font-lock-keyword-face) 747 759 (help-echo cider--help-echo cider-locals ("pars" "response") fontified t) 759 761 (help-echo cider--help-echo cider-locals ("pars" "response") fontified t face font-lock-type-face) 761 794 (help-echo cider--help-echo cider-locals ("pars" "response") fontified t) 794 795 (help-echo cider--help-echo cider-locals ("pars" "response") fontified t face clojure-keyword-face) 795 798 (help-echo cider--help-echo cider-locals ("pars" "response") fontified t face clojure-keyword-face) 798 808 (help-echo cider--help-echo cider-locals ("pars" "response") fontified t) 808 858 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 858 859 (help-echo cider--help-echo fontified t cider-locals ("pars" "response") face clojure-keyword-face) 859 862 (help-echo cider--help-echo fontified t cider-locals ("pars" "response") face clojure-keyword-face) 862 873 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 873 906 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 906 913 (help-echo cider--help-echo fontified t cider-locals ("pars" "response") face font-lock-function-name-face) 913 921 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 921 922 (help-echo cider--help-echo fontified t cider-locals ("pars")) 922 923 (help-echo cider--help-echo fontified t cider-locals ("pars")) 923 939 (help-echo cider--help-echo cider-locals ("pars") fontified t) 939 940 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 940 950 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 950 951 (help-echo cider--help-echo cider-locals ("pars") fontified t) 951 952 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 952 957 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 957 967 (help-echo cider--help-echo cider-locals ("pars") fontified t) 967 968 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 968 980 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 980 983 (help-echo cider--help-echo cider-locals ("pars") fontified t) 983 984 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 984 994 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 994 1017 (help-echo cider--help-echo cider-locals ("pars") fontified t) 1017 1018 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 1018 1028 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 1028 1031 (help-echo cider--help-echo cider-locals ("pars") fontified t) 1031 1032 (help-echo cider--help-echo cider-locals ("pars") fontified t face font-lock-type-face) 1032 1033 (cider-locals ("pars") fontified t face font-lock-type-face) 1033 1059 (cider-locals ("pars") fontified t) 1059 1060 (cider-locals ("pars") fontified t face clojure-keyword-face) 1060 1069 (cider-locals ("pars") fontified t face clojure-keyword-face) 1069 1083 (cider-locals ("pars") fontified t) 1083 1102 (help-echo cider--help-echo cider-locals ("pars") fontified t) 1102 1103 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 1103 1113 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 1113 1114 (help-echo cider--help-echo cider-locals ("pars") fontified t) 1114 1115 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 1115 1120 (help-echo cider--help-echo cider-locals ("pars") fontified t face clojure-keyword-face) 1120 1123 (help-echo cider--help-echo cider-locals ("pars") fontified t) 1123 1128 (help-echo cider--help-echo fontified t cider-locals ("pars")) 1128 1129 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id109 . -1125) (undo-tree-id110 . -905) (undo-tree-id111 . -1125) (undo-tree-id112 . 1129) (undo-tree-id113 . -446) (undo-tree-id114 . -446) (undo-tree-id115 . -446) (undo-tree-id116 . -2) (undo-tree-id117 . -1125) (undo-tree-id118 . -416) (undo-tree-id119 . -1129) (undo-tree-id120 . -2) (undo-tree-id121 . -1125) (undo-tree-id122 . -1123) (undo-tree-id123 . -1125) 3045) nil (25527 29829 182283 347000) 0 nil] [nil nil ((3874 . 3875)) ((#("f" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "args"))) . 3874)) (25527 29764 852680 299000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3106 . 3107) (nil fontified nil 1920 . 3107) (1920 . 3107)) nil (25527 29829 182209 423000) 0 nil])
([nil nil ((#("f" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "args"))) . 3874)) ((3874 . 3875)) (25527 29763 652152 509000) 0 nil])
([nil nil ((3107 . 3108)) nil (25527 29829 182194 219000) 0 nil])
([nil nil ((2366 . 2367)) ((#("(" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2366)) (25527 29762 366856 234000) 0 nil])
([nil nil ((2576 . 2578) (t 25527 29829 303190 529000)) nil (25527 29905 890706 12000) 0 nil])
([nil nil ((2408 . 2409)) ((#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2408)) (25527 29756 21105 923000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t cider-locals ("pars") face font-lock-keyword-face)) . 2496)) nil (25527 29905 890698 86000) 0 nil])
([nil nil ((#("V" 0 1 (fontified nil help-echo cider--help-echo cider-locals nil)) . 1920) (1920 . 1921) (nil rear-nonsticky nil 4239 . 4240) (nil fontified nil 3053 . 3054) (nil fontified nil 3082 . 3085) (nil fontified nil 3139 . 3151) (nil fontified nil 3175 . 3187) (nil fontified nil 3232 . 3244) (nil fontified nil 3268 . 3280) (nil fontified nil 3295 . 3307) (nil fontified nil 3338 . 3350) (nil fontified nil 3371 . 3378) (nil fontified nil 3406 . 3422) (nil fontified nil 3461 . 3495) (nil fontified nil 3520 . 3536) (nil fontified nil 3564 . 3571) (nil fontified nil 3599 . 3615) (nil fontified nil 3675 . 3710) (nil fontified nil 3731 . 3766) (nil fontified nil 3791 . 3807) (nil fontified nil 3832 . 3839) (nil fontified nil 3867 . 3883) (nil fontified nil 3922 . 3956) (nil fontified nil 3972 . 4022) (nil fontified nil 4043 . 4050) (nil fontified nil 4081 . 4100) (nil fontified nil 4142 . 4179) (nil fontified nil 4195 . 4214) (3053 . 4240) (3051 . 3054)) ((#("


" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars")) 1 2 (help-echo cider--help-echo fontified t cider-locals ("pars")) 2 3 (help-echo cider--help-echo cider-locals ("pars") fontified nil)) . 3051) (undo-tree-id100 . -2) (undo-tree-id101 . -2) (undo-tree-id102 . -2) (undo-tree-id103 . -2) (undo-tree-id104 . -2) (undo-tree-id105 . -2) (undo-tree-id106 . -2) (#("(defn kettler-control [pars]
  {:start [{:conditions [#(= (:mode @pars) \"hr-target\")]
            :transition :hr-target}
           {:conditions [#(= (:mode @pars) \"pw-target\")]
            :transition :pw-target}
           {:conditions []
            :on-success #(println \"start\")
            :transition :start}]
   
   :pw-target [{:conditions []
                :on-success #(do (println \"pw-target\")
                                 (println @kettler-state))
                :transition :update-power}]
   
   :hr-target [{:conditions []
                :on-success #(do (mu/update-kettler kettler-state sim-pars)
                                  (println \"hr-target\")
                                  (println @kettler-state))
                :transition :pid-power}]
   
   :pid-power [{:conditions []
                :on-success #(do (println \"pid-power\")
                                 (println @pars))
                                 
                :transition :start}]
   
   :update-power [{:conditions []
                   :on-success #(do (println \"update-power\")
                                    (println @pars))
                   :transition :start}]
   })" 0 1 (help-echo cider--help-echo fontified nil cider-locals ("pars")) 1 5 (help-echo cider--help-echo fontified nil cider-locals ("pars") face font-lock-keyword-face) 5 6 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 6 21 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face font-lock-function-name-face) 21 29 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 29 32 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 32 33 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 33 38 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 38 41 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 41 42 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 42 52 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 52 56 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 56 57 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face font-lock-function-name-face) 57 59 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 59 60 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 60 64 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 64 72 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 72 83 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face font-lock-string-face) 83 86 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 86 98 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 98 99 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 99 109 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 109 110 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 110 111 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 111 120 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 120 122 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 122 134 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 134 135 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 135 145 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 145 149 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 149 150 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face font-lock-function-name-face) 150 152 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 152 153 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 153 157 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 157 165 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 165 176 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face font-lock-string-face) 176 179 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 179 191 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 191 192 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 192 202 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 202 203 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 203 204 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 204 213 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 213 215 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 215 227 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 227 228 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 228 238 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 238 242 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 242 254 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 254 255 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 255 265 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 265 268 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 268 275 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face font-lock-function-name-face) 275 276 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 276 283 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face font-lock-string-face) 283 285 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 285 297 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 297 298 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 298 308 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 308 309 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 309 310 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 310 315 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 315 318 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 318 325 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 325 326 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 326 335 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 335 338 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 338 339 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 339 349 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 349 353 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 353 369 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 369 370 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 370 380 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 380 383 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 383 385 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face font-lock-keyword-face) 385 387 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 387 394 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face font-lock-function-name-face) 394 395 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 395 406 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face font-lock-string-face) 406 408 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 408 442 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 442 449 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face font-lock-function-name-face) 449 452 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 452 467 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 467 483 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 483 484 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 484 494 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 494 495 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars")) 495 496 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 496 498 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 498 499 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 499 500 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars") face clojure-keyword-face) 500 508 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 508 511 (cider-locals ("pars" "pars") fontified nil) 511 518 (cider-locals ("pars" "pars") fontified nil) 518 519 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 519 528 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 528 531 (cider-locals ("pars" "pars") fontified nil) 531 532 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 532 542 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 542 546 (cider-locals ("pars" "pars") fontified nil) 546 562 (cider-locals ("pars" "pars") fontified nil) 562 563 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 563 573 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 573 576 (cider-locals ("pars" "pars") fontified nil) 576 578 (cider-locals ("pars" "pars") fontified nil face font-lock-keyword-face) 578 580 (cider-locals ("pars" "pars") fontified nil) 580 582 (cider-locals ("pars" "pars") fontified nil face font-lock-type-face) 582 622 (cider-locals ("pars" "pars") fontified nil) 622 657 (cider-locals ("pars" "pars") fontified nil) 657 664 (cider-locals ("pars" "pars") fontified nil face font-lock-function-name-face) 664 665 (cider-locals ("pars" "pars") fontified nil) 665 676 (cider-locals ("pars" "pars") fontified nil face font-lock-string-face) 676 678 (cider-locals ("pars" "pars") fontified nil) 678 713 (cider-locals ("pars" "pars") fontified nil) 713 720 (cider-locals ("pars" "pars") fontified nil face font-lock-function-name-face) 720 738 (cider-locals ("pars" "pars") fontified nil) 738 754 (cider-locals ("pars" "pars") fontified nil) 754 755 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 755 765 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 765 766 (cider-locals ("pars" "pars") fontified nil) 766 767 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 767 776 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 776 779 (cider-locals ("pars" "pars") fontified nil) 779 786 (cider-locals ("pars" "pars") fontified nil) 786 787 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 787 796 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 796 799 (cider-locals ("pars" "pars") fontified nil) 799 800 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 800 810 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 810 814 (cider-locals ("pars" "pars") fontified nil) 814 830 (cider-locals ("pars" "pars") fontified nil) 830 831 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 831 841 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 841 844 (cider-locals ("pars" "pars") fontified nil) 844 846 (cider-locals ("pars" "pars") fontified nil face font-lock-keyword-face) 846 848 (cider-locals ("pars" "pars") fontified nil) 848 855 (cider-locals ("pars" "pars") fontified nil face font-lock-function-name-face) 855 856 (cider-locals ("pars" "pars") fontified nil) 856 867 (cider-locals ("pars" "pars") fontified nil face font-lock-string-face) 867 869 (cider-locals ("pars" "pars") fontified nil) 869 903 (cider-locals ("pars" "pars") fontified nil) 903 910 (cider-locals ("pars" "pars") fontified nil face font-lock-function-name-face) 910 919 (cider-locals ("pars" "pars") fontified nil) 919 969 (cider-locals ("pars" "pars") fontified nil) 969 970 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 970 980 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 980 981 (cider-locals ("pars" "pars") fontified nil) 981 982 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 982 987 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 987 990 (cider-locals ("pars" "pars") fontified nil) 990 997 (cider-locals ("pars" "pars") fontified nil) 997 998 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 998 1010 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 1010 1013 (cider-locals ("pars" "pars") fontified nil) 1013 1014 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 1014 1024 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 1024 1028 (cider-locals ("pars" "pars") fontified nil) 1028 1047 (cider-locals ("pars" "pars") fontified nil) 1047 1048 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 1048 1058 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 1058 1061 (cider-locals ("pars" "pars") fontified nil) 1061 1063 (cider-locals ("pars" "pars") fontified nil face font-lock-keyword-face) 1063 1065 (cider-locals ("pars" "pars") fontified nil) 1065 1072 (cider-locals ("pars" "pars") fontified nil face font-lock-function-name-face) 1072 1073 (cider-locals ("pars" "pars") fontified nil) 1073 1087 (cider-locals ("pars" "pars") fontified nil face font-lock-string-face) 1087 1089 (cider-locals ("pars" "pars") fontified nil) 1089 1126 (cider-locals ("pars" "pars") fontified nil) 1126 1133 (cider-locals ("pars" "pars") fontified nil face font-lock-function-name-face) 1133 1142 (cider-locals ("pars" "pars") fontified nil) 1142 1161 (cider-locals ("pars" "pars") fontified nil) 1161 1162 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 1162 1172 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 1172 1173 (cider-locals ("pars" "pars") fontified nil) 1173 1174 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 1174 1179 (cider-locals ("pars" "pars") fontified nil face clojure-keyword-face) 1179 1182 (cider-locals ("pars" "pars") fontified nil) 1182 1186 (cider-locals ("pars" "pars") fontified nil) 1186 1187 (rear-nonsticky nil cider-locals ("pars" "pars") fontified nil)) . 3053) (undo-tree-id107 . -1182) (undo-tree-id108 . -1182) (nil fontified t 4195 . 4214) (nil fontified t 4142 . 4179) (nil fontified t 4081 . 4100) (nil fontified t 4043 . 4050) (nil fontified t 3972 . 4022) (nil fontified t 3922 . 3956) (nil fontified t 3867 . 3883) (nil fontified t 3832 . 3839) (nil fontified t 3791 . 3807) (nil fontified t 3731 . 3766) (nil fontified t 3675 . 3710) (nil fontified t 3599 . 3615) (nil fontified t 3564 . 3571) (nil fontified t 3520 . 3536) (nil fontified t 3461 . 3495) (nil fontified t 3406 . 3422) (nil fontified t 3371 . 3378) (nil fontified t 3338 . 3350) (nil fontified t 3295 . 3307) (nil fontified t 3268 . 3280) (nil fontified t 3232 . 3244) (nil fontified t 3175 . 3187) (nil fontified t 3139 . 3151) (nil fontified t 3082 . 3085) (nil fontified t 3053 . 3054) (nil rear-nonsticky t 4239 . 4240) (#("V" 0 1 (fontified nil help-echo cider--help-echo cider-locals nil)) . 1920) (1920 . 1921)) (25527 29753 376154 440000) 0 nil] [nil nil ((3291 . 3292) (t 25527 29443 100974 579000)) ((#("i" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . 3291) (undo-tree-id50 . -1) (undo-tree-id51 . -1)) (25527 29554 626799 598000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2496)) nil (25527 29905 890691 642000) 0 nil])
([nil nil ((#("(defn kettler-control [pars]
  {:start [{:conditions [#(= (:mode @pars) \"hr-target\")]
            :transition :hr-target}
           {:conditions [#(= (:mode @pars) \"pw-target\")]
            :transition :pw-target}
           {:conditions []
            :on-success #(println \"start\")
            :transition :start}]
   
   :pw-target [{:conditions []
                :on-success #(do (println \"pw-target\")
                                 (println @kettler-state))
                :transition :update-power}]
   
   :hr-target [{:conditions []
                :on-success #(do (mu/update-kettler kettler-state sim-pars)
                                  (println \"hr-target\")
                                  (println @kettler-state))
                :transition :pid-power}]
   
   :pid-power [{:conditions []
                :on-success #(do (println \"pid-power\")
                                 (println @pars))
                                 
                :transition :start}]
   
   :update-power [{:conditions []
                   :on-success #(do (println \"update-power\")
                                    (println @pars))
                   :transition :start}]
   })
" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars")) 1 5 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-keyword-face) 5 6 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 6 21 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face font-lock-function-name-face) 21 29 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 29 32 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 32 33 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 33 38 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 38 41 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 41 42 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 42 52 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 52 56 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 56 57 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face font-lock-function-name-face) 57 59 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 59 60 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 60 64 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 64 72 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 72 83 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face font-lock-string-face) 83 86 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 86 98 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 98 99 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 99 109 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 109 110 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 110 111 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 111 120 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 120 122 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 122 134 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 134 135 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 135 145 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 145 149 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 149 150 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face font-lock-function-name-face) 150 152 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 152 153 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 153 157 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 157 165 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 165 176 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face font-lock-string-face) 176 179 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 179 191 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 191 192 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 192 202 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 202 203 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 203 204 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 204 213 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 213 215 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 215 227 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 227 228 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 228 238 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 238 242 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 242 254 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 254 255 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 255 265 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 265 268 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 268 275 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face font-lock-function-name-face) 275 276 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 276 283 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face font-lock-string-face) 283 285 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 285 297 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 297 298 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 298 308 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 308 309 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 309 310 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 310 315 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 315 318 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 318 325 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 325 326 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 326 335 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 335 338 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 338 339 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 339 349 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 349 353 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 353 369 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 369 370 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 370 380 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 380 383 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 383 385 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face font-lock-keyword-face) 385 387 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 387 394 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face font-lock-function-name-face) 394 395 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 395 406 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face font-lock-string-face) 406 408 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 408 442 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 442 449 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face font-lock-function-name-face) 449 452 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 452 467 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 467 483 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 483 484 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 484 494 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 494 495 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars")) 495 496 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 496 498 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 498 499 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 499 500 (help-echo cider--help-echo fontified t cider-locals ("pars" "pars") face clojure-keyword-face) 500 508 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 508 511 (cider-locals ("pars" "pars") fontified t) 511 518 (cider-locals ("pars" "pars") fontified t) 518 519 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 519 528 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 528 531 (cider-locals ("pars" "pars") fontified t) 531 532 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 532 542 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 542 546 (cider-locals ("pars" "pars") fontified t) 546 562 (cider-locals ("pars" "pars") fontified t) 562 563 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 563 573 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 573 576 (cider-locals ("pars" "pars") fontified t) 576 578 (cider-locals ("pars" "pars") fontified t face font-lock-keyword-face) 578 580 (cider-locals ("pars" "pars") fontified t) 580 582 (cider-locals ("pars" "pars") fontified t face font-lock-type-face) 582 622 (cider-locals ("pars" "pars") fontified t) 622 657 (cider-locals ("pars" "pars") fontified t) 657 664 (cider-locals ("pars" "pars") fontified t face font-lock-function-name-face) 664 665 (cider-locals ("pars" "pars") fontified t) 665 676 (cider-locals ("pars" "pars") fontified t face font-lock-string-face) 676 678 (cider-locals ("pars" "pars") fontified t) 678 713 (cider-locals ("pars" "pars") fontified t) 713 720 (cider-locals ("pars" "pars") fontified t face font-lock-function-name-face) 720 738 (cider-locals ("pars" "pars") fontified t) 738 754 (cider-locals ("pars" "pars") fontified t) 754 755 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 755 765 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 765 766 (cider-locals ("pars" "pars") fontified t) 766 767 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 767 776 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 776 779 (cider-locals ("pars" "pars") fontified t) 779 786 (cider-locals ("pars" "pars") fontified t) 786 787 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 787 796 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 796 799 (cider-locals ("pars" "pars") fontified t) 799 800 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 800 810 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 810 814 (cider-locals ("pars" "pars") fontified t) 814 830 (cider-locals ("pars" "pars") fontified t) 830 831 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 831 841 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 841 844 (cider-locals ("pars" "pars") fontified t) 844 846 (cider-locals ("pars" "pars") fontified t face font-lock-keyword-face) 846 848 (cider-locals ("pars" "pars") fontified t) 848 855 (cider-locals ("pars" "pars") fontified t face font-lock-function-name-face) 855 856 (cider-locals ("pars" "pars") fontified t) 856 867 (cider-locals ("pars" "pars") fontified t face font-lock-string-face) 867 869 (cider-locals ("pars" "pars") fontified t) 869 903 (cider-locals ("pars" "pars") fontified t) 903 910 (cider-locals ("pars" "pars") fontified t face font-lock-function-name-face) 910 919 (cider-locals ("pars" "pars") fontified t) 919 969 (cider-locals ("pars" "pars") fontified t) 969 970 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 970 980 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 980 981 (cider-locals ("pars" "pars") fontified t) 981 982 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 982 987 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 987 990 (cider-locals ("pars" "pars") fontified t) 990 997 (cider-locals ("pars" "pars") fontified t) 997 998 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 998 1010 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 1010 1013 (cider-locals ("pars" "pars") fontified t) 1013 1014 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 1014 1024 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 1024 1028 (cider-locals ("pars" "pars") fontified t) 1028 1047 (cider-locals ("pars" "pars") fontified t) 1047 1048 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 1048 1058 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 1058 1061 (cider-locals ("pars" "pars") fontified t) 1061 1063 (cider-locals ("pars" "pars") fontified t face font-lock-keyword-face) 1063 1065 (cider-locals ("pars" "pars") fontified t) 1065 1072 (cider-locals ("pars" "pars") fontified t face font-lock-function-name-face) 1072 1073 (cider-locals ("pars" "pars") fontified t) 1073 1087 (cider-locals ("pars" "pars") fontified t face font-lock-string-face) 1087 1089 (cider-locals ("pars" "pars") fontified t) 1089 1126 (cider-locals ("pars" "pars") fontified t) 1126 1133 (cider-locals ("pars" "pars") fontified t face font-lock-function-name-face) 1133 1142 (cider-locals ("pars" "pars") fontified t) 1142 1161 (cider-locals ("pars" "pars") fontified t) 1161 1162 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 1162 1172 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 1172 1173 (cider-locals ("pars" "pars") fontified t) 1173 1174 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 1174 1179 (cider-locals ("pars" "pars") fontified t face clojure-keyword-face) 1179 1182 (cider-locals ("pars" "pars") fontified t) 1182 1186 (cider-locals ("pars" "pars") fontified t) 1186 1187 (rear-nonsticky t cider-locals ("pars" "pars") fontified t) 1187 1188 (help-echo cider--help-echo cider-locals ("pars") fontified t)) . 3053) (undo-tree-id98 . -1182) (undo-tree-id99 . -1182)) ((3053 . 4241)) (25527 29752 588959 170000) 0 nil] [nil nil ((#("(defn kettler-control [pars]
  {:start [{:conditions [#(= (:mode @pars) \"hr-target\")]
            :on-success #((println \"hr-target\"))
            :transition :hr-target}
           {:conditions [#(= (:mode @pars) \"pw-target\")]
            :transition :pw-target}
           {:conditions []
            :on-success #(update-pars pars :mode \"exit\")
            :transition :start}]
   
   :pw-target [{:conditions []
                :on-success #((mu/update-kettler kettler-state sim-pars))
                :transition :update-power}]
   
   :hr-target [{:conditions []
                :on-success #((mu/update-kettler kettler-state sim-pars))
                :transition :start}]
   
   :pid-power [{:conditions []
                :on-success #((let [response (mu/update-power-pid kettler-state (:buf @pars))]
                                (update-pars pars :buf response)
                                (println @pars)))
                :transition :start}]
   
   :update-power [{:conditions []
                   :on-success #(mu/set-power kettler-state (:pw-target @demo-pars))
                   :transition :start}]
   })
" 0 1 (fontified t help-echo cider--help-echo cider-locals nil) 1 5 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-keyword-face) 5 6 (fontified t help-echo cider--help-echo cider-locals ("pars")) 6 21 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face) 21 29 (fontified t help-echo cider--help-echo cider-locals ("pars")) 29 32 (help-echo cider--help-echo fontified t cider-locals ("pars")) 32 33 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 33 38 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 38 41 (help-echo cider--help-echo fontified t cider-locals ("pars")) 41 42 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 42 52 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 52 56 (help-echo cider--help-echo fontified t cider-locals ("pars")) 56 57 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 57 59 (help-echo cider--help-echo fontified t cider-locals ("pars")) 59 60 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 60 64 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 64 72 (help-echo cider--help-echo fontified t cider-locals ("pars")) 72 83 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-string-face) 83 98 (help-echo cider--help-echo fontified t cider-locals ("pars")) 98 99 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 99 109 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 109 113 (help-echo cider--help-echo fontified t cider-locals ("pars")) 113 120 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 120 121 (help-echo cider--help-echo fontified t cider-locals ("pars")) 121 132 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-string-face) 132 147 (help-echo cider--help-echo fontified t cider-locals ("pars")) 147 148 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 148 158 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 158 159 (help-echo cider--help-echo fontified t cider-locals ("pars")) 159 160 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 160 169 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 169 183 (help-echo cider--help-echo fontified t cider-locals ("pars")) 183 184 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 184 194 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 194 198 (help-echo cider--help-echo fontified t cider-locals ("pars")) 198 199 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 199 201 (help-echo cider--help-echo fontified t cider-locals ("pars")) 201 202 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 202 206 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 206 214 (help-echo cider--help-echo fontified t cider-locals ("pars")) 214 225 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-string-face) 225 240 (help-echo cider--help-echo fontified t cider-locals ("pars")) 240 241 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 241 251 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 251 252 (help-echo cider--help-echo fontified t cider-locals ("pars")) 252 253 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 253 262 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 262 276 (help-echo cider--help-echo fontified t cider-locals ("pars")) 276 277 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 277 287 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 287 303 (help-echo cider--help-echo fontified t cider-locals ("pars")) 303 304 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 304 314 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 314 334 (help-echo cider--help-echo fontified t cider-locals ("pars")) 334 335 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 335 339 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 339 340 (help-echo cider--help-echo fontified t cider-locals ("pars")) 340 346 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-string-face) 346 360 (help-echo cider--help-echo fontified t cider-locals ("pars")) 360 361 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 361 371 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 371 372 (help-echo cider--help-echo fontified t cider-locals ("pars")) 372 373 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 373 378 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 378 388 (help-echo cider--help-echo fontified t cider-locals ("pars")) 388 389 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 389 398 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 398 401 (help-echo cider--help-echo fontified t cider-locals ("pars")) 401 402 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 402 404 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 404 412 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 412 416 (fontified t help-echo cider--help-echo cider-locals ("pars")) 416 432 (help-echo cider--help-echo fontified t cider-locals ("pars")) 432 433 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 433 443 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 443 447 (help-echo cider--help-echo fontified t cider-locals ("pars")) 447 449 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-type-face) 449 490 (help-echo cider--help-echo fontified t cider-locals ("pars")) 490 506 (fontified t help-echo cider--help-echo cider-locals ("pars")) 506 507 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 507 517 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 517 518 (fontified t help-echo cider--help-echo cider-locals ("pars")) 518 519 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 519 529 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 529 531 (cider-locals ("pars") fontified t face clojure-keyword-face) 531 534 (cider-locals ("pars") fontified t) 534 541 (fontified t help-echo cider--help-echo cider-locals ("pars")) 541 542 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 542 551 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 551 554 (fontified t help-echo cider--help-echo cider-locals ("pars")) 554 555 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 555 565 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 565 585 (fontified t help-echo cider--help-echo cider-locals ("pars")) 585 586 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 586 596 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 596 600 (fontified t help-echo cider--help-echo cider-locals ("pars")) 600 602 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-type-face) 602 659 (fontified t help-echo cider--help-echo cider-locals ("pars")) 659 660 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 660 670 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 670 671 (fontified t help-echo cider--help-echo cider-locals ("pars")) 671 672 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 672 677 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 677 687 (fontified t help-echo cider--help-echo cider-locals ("pars")) 687 688 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 688 697 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 697 700 (fontified t help-echo cider--help-echo cider-locals ("pars")) 700 701 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 701 711 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 711 731 (fontified t help-echo cider--help-echo cider-locals ("pars")) 731 732 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 732 742 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 742 746 (fontified t help-echo cider--help-echo cider-locals ("pars")) 746 749 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-keyword-face) 749 761 (fontified t help-echo cider--help-echo cider-locals ("pars" "response")) 761 763 (fontified t help-echo cider--help-echo cider-locals ("pars" "response") face font-lock-type-face) 763 796 (fontified t help-echo cider--help-echo cider-locals ("pars" "response")) 796 797 (fontified t help-echo cider--help-echo cider-locals ("pars" "response") face clojure-keyword-face) 797 800 (fontified t help-echo cider--help-echo cider-locals ("pars" "response") face clojure-keyword-face) 800 860 (fontified t help-echo cider--help-echo cider-locals ("pars" "response")) 860 861 (fontified t help-echo cider--help-echo cider-locals ("pars" "response") face clojure-keyword-face) 861 864 (fontified t help-echo cider--help-echo cider-locals ("pars" "response") face clojure-keyword-face) 864 908 (fontified t help-echo cider--help-echo cider-locals ("pars" "response")) 908 915 (fontified t help-echo cider--help-echo cider-locals ("pars" "response") face font-lock-function-name-face) 915 923 (fontified t help-echo cider--help-echo cider-locals ("pars" "response")) 923 941 (fontified t help-echo cider--help-echo cider-locals ("pars")) 941 942 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 942 952 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 952 953 (fontified t help-echo cider--help-echo cider-locals ("pars")) 953 954 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 954 959 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 959 969 (fontified t help-echo cider--help-echo cider-locals ("pars")) 969 970 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 970 982 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 982 985 (fontified t help-echo cider--help-echo cider-locals ("pars")) 985 986 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 986 996 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 996 1019 (fontified t help-echo cider--help-echo cider-locals ("pars")) 1019 1020 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 1020 1030 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 1030 1033 (fontified t help-echo cider--help-echo cider-locals ("pars")) 1033 1034 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-type-face) 1034 1035 (cider-locals ("pars") fontified t face font-lock-type-face) 1035 1061 (cider-locals ("pars") fontified t) 1061 1062 (cider-locals ("pars") fontified t face clojure-keyword-face) 1062 1071 (cider-locals ("pars") fontified t face clojure-keyword-face) 1071 1085 (cider-locals ("pars") fontified t) 1085 1104 (fontified t help-echo cider--help-echo cider-locals ("pars")) 1104 1105 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 1105 1115 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 1115 1116 (fontified t help-echo cider--help-echo cider-locals ("pars")) 1116 1117 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 1117 1122 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 1122 1130 (fontified t help-echo cider--help-echo cider-locals ("pars")) 1130 1131 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 1920) (undo-tree-id52 . -1125) (undo-tree-id53 . -1125) (undo-tree-id54 . 1131) (undo-tree-id55 . -446) (undo-tree-id56 . -446) (undo-tree-id57 . -446) (undo-tree-id58 . -1125) (undo-tree-id60 . -1125) (undo-tree-id62 . -1125) 3045) ((1920 . 3051) (t 25527 29637 797109 898000)) (25527 29637 750057 830000) 0 nil])
([nil nil ((#("(" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -3274) (undo-tree-id14 . -1) (#("u" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -3275) (undo-tree-id16 . -1) (#("p" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -3276) (undo-tree-id18 . -1) (#("d" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -3277) (undo-tree-id20 . -1) (#("a" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -3278) (undo-tree-id22 . -1) (#("t" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -3279) (undo-tree-id24 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm") face font-lock-function-name-face)) . -3280) (undo-tree-id26 . -1) (#("-" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -3281) (undo-tree-id28 . -1) (#("s" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -3282) (undo-tree-id30 . -1) (#("t" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -3283) (undo-tree-id32 . -1) (#("a" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -3284) (undo-tree-id34 . -1) (#("t" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -3285) (undo-tree-id36 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -3286) (undo-tree-id38 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -3287) (undo-tree-id40 . -1) (#("s" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -3288) (undo-tree-id42 . -1) (#("m" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -3289) (undo-tree-id44 . -1) (#(")" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -3290) (undo-tree-id46 . -1) (#("i" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -3291) (undo-tree-id48 . -1) 3292) ((3274 . 3292) (t 25527 29506 239737 502000)) (25527 29554 148894 41000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2496)) nil (25527 29905 890685 420000) 0 nil])
([nil nil ((#("                                (update-pars pars :buf response)
" 0 50 (help-echo cider--help-echo cider-locals ("pars" "response") fontified t) 50 51 (help-echo cider--help-echo cider-locals ("pars" "response") fontified t face clojure-keyword-face) 51 54 (help-echo cider--help-echo cider-locals ("pars" "response") fontified t face clojure-keyword-face) 54 65 (help-echo cider--help-echo cider-locals ("pars" "response") fontified t)) . 2730)) ((2730 . 2795) (t 25527 29706 345718 208000)) (25527 29749 468004 300000) 0 nil])
nil
([nil nil ((3222 . 3223) (t 25527 29506 239737 502000)) ((#("u" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . 3222)) (25527 29554 148092 743000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2496)) nil (25527 29905 890678 846000) 0 nil])
nil
nil
([nil nil ((#("                                  dd(println \"hr-target\")
" 0 37 (fontified t help-echo cider--help-echo cider-locals ("pars")) 37 44 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face) 44 45 (fontified t help-echo cider--help-echo cider-locals ("pars")) 45 56 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-string-face) 56 58 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2538) (undo-tree-id145 . -56) (undo-tree-id146 . 22) 2594) nil (25527 29905 890670 846000) 0 nil])
([nil nil ((#("                                  (println @kettler-state))
" 0 35 (fontified t cider-locals ("pars")) 35 42 (fontified t cider-locals ("pars") face font-lock-function-name-face) 42 59 (fontified t cider-locals ("pars")) 59 60 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2538) (undo-tree-id143 . -56) (undo-tree-id144 . 60) 2594) nil (25527 29905 890652 346000) 0 nil])
([nil nil ((#("                :on-success #(do (println \"pw-target\")
" 0 16 (fontified t help-echo cider--help-echo cider-locals ("pars")) 16 17 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 17 27 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 27 30 (fontified t help-echo cider--help-echo cider-locals ("pars")) 30 32 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-keyword-face) 32 34 (fontified t help-echo cider--help-echo cider-locals ("pars")) 34 41 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face) 41 42 (fontified t help-echo cider--help-echo cider-locals ("pars")) 42 53 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-string-face) 53 55 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2273) (undo-tree-id142 . -32) 2305) nil (25527 29905 890632 995000) 0 nil])
([nil nil ((#("                                 (println @kettler-state))
" 0 34 (fontified t help-echo cider--help-echo cider-locals ("pars")) 34 41 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face) 41 58 (fontified t help-echo cider--help-echo cider-locals ("pars")) 58 59 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2273) (undo-tree-id139 . -32) (undo-tree-id140 . -58) (undo-tree-id141 . -32) 2305) nil (25527 29905 890605 366000) 0 nil])
([nil nil ((#("            :on-success #(println \"start\")
" 0 12 (fontified t help-echo cider--help-echo cider-locals ("pars")) 12 13 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 13 23 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 23 26 (fontified t help-echo cider--help-echo cider-locals ("pars")) 26 33 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face) 33 34 (fontified t help-echo cider--help-echo cider-locals ("pars")) 34 41 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-string-face) 41 43 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2162) (undo-tree-id137 . -32) (undo-tree-id138 . -32) 2194) nil (25527 29905 890582 496000) 0 nil])
([nil nil ((#("                :on-success #(do (println \"pid-power\")
" 0 16 (help-echo cider--help-echo fontified t cider-locals ("pars")) 16 17 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 17 27 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 27 30 (help-echo cider--help-echo fontified t cider-locals ("pars")) 30 32 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-keyword-face) 32 34 (help-echo cider--help-echo fontified t cider-locals ("pars")) 34 41 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 41 42 (help-echo cider--help-echo fontified t cider-locals ("pars")) 42 53 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-string-face) 53 55 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2457) (undo-tree-id135 . -31) (undo-tree-id136 . -31) 2488) nil (25527 29905 890563 478000) 0 nil])
([nil nil ((#("                                 (println @pars))
" 0 34 (help-echo cider--help-echo fontified t cider-locals ("pars")) 34 41 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 41 49 (help-echo cider--help-echo fontified t cider-locals ("pars")) 49 50 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2457) (undo-tree-id132 . -31) (undo-tree-id133 . -49) (undo-tree-id134 . -31) 2488) nil (25527 29905 890543 978000) 0 nil])
([nil nil ((#("                                 
" 0 33 (help-echo cider--help-echo fontified t cider-locals ("pars")) 33 34 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2457) (undo-tree-id129 . -31) (undo-tree-id130 . -33) (undo-tree-id131 . -31) 2488) nil (25527 29905 890518 220000) 0 nil])
([nil nil ((#("                   :on-success #(do (println \"update-power\")
" 0 19 (help-echo cider--help-echo fontified t cider-locals ("pars")) 19 20 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 20 30 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 30 33 (help-echo cider--help-echo fontified t cider-locals ("pars")) 33 35 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-keyword-face) 35 37 (help-echo cider--help-echo fontified t cider-locals ("pars")) 37 44 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 44 45 (help-echo cider--help-echo fontified t cider-locals ("pars")) 45 59 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-string-face) 59 61 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2532) (undo-tree-id127 . -31) (undo-tree-id128 . -31) 2563) nil (25527 29905 890492 905000) 0 nil])
([nil nil ((#("                                    (println @pars))
" 0 37 (help-echo cider--help-echo fontified t cider-locals ("pars")) 37 42 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 42 44 (help-echo cider--help-echo cider-locals ("pars") fontified t face font-lock-function-name-face) 44 52 (help-echo cider--help-echo cider-locals ("pars") fontified t) 52 53 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2532) (undo-tree-id124 . -31) (undo-tree-id125 . -52) (undo-tree-id126 . -31) 2563) nil (25527 29905 890465 110000) 0 nil])
([nil nil ((#("p" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . 2759) (t 25527 29906 31596 55000)) nil (25527 29938 330847 47000) 0 nil])
([nil nil ((#("a" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . 2759)) nil (25527 29938 330841 695000) 0 nil])
([nil nil ((#("r" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . 2759)) nil (25527 29938 330837 677000) 0 nil])
([nil nil ((#("s" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . 2759) (undo-tree-id153 . -1)) nil (25527 29938 330833 140000) 0 nil])
([nil nil ((2759 . 2760)) nil (25527 29938 330826 455000) 0 nil])
([nil nil ((2760 . 2770)) nil (25527 29938 330822 696000) 0 nil])
([nil nil ((#("a" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -2768) (undo-tree-id151 . -1) (#("t" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -2769) (undo-tree-id152 . -1) 2770) nil (25527 29938 330816 862000) 0 nil])
([nil nil ((2768 . 2773)) nil (25527 29938 330805 326000) 0 nil])
([nil nil ((#("t" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -2771) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . -2772) (undo-tree-id149 . -1) (undo-tree-id150 . -1) 2773) nil (25527 29938 330798 67000) 0 nil])
([nil nil ((2771 . 2772)) nil (25527 29938 330748 901000) 0 nil])
([nil nil ((2772 . 2774) (t 25527 29938 450918 962000)) nil (25527 29987 198654 751000) 0 nil])
([nil nil ((#("        (println @kettler-statedd)
" 0 9 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm")) 9 16 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm") face font-lock-function-name-face) 16 35 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . 2741) (undo-tree-id154 . -31) (undo-tree-id155 . -32) (undo-tree-id156 . 2) (undo-tree-id157 . -32) 2773) nil (25527 29987 198641 936000) 0 nil])
([nil nil ((#("0" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "start-state" "pars" "control" "sm"))) . 2765) (t 25527 29987 319894 872000)) nil (25527 30020 625694 354000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3304 . 3305) (nil fontified nil 3252 . 3305) (3252 . 3305) (t 25527 30020 749192 125000)) nil (25527 30297 879837 947000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified nil cider-locals ("pars"))) . -3252) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (3251 . 3252)) nil (25527 30297 879831 336000) 0 nil])
([nil nil ((3307 . 3308)) nil (25527 30297 879821 58000) 0 nil])
([nil nil ((3252 . 3258)) nil (25527 30297 879817 447000) 0 nil])
([nil nil ((3258 . 3261)) nil (25527 30297 879813 632000) 0 nil])
([nil nil ((#("u" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "defn" "mu/update-power-pid") face font-lock-function-name-face)) . -3258) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("p" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "defn" "mu/update-power-pid") face font-lock-function-name-face)) . -3259) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("d" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "defn" "mu/update-power-pid") face font-lock-function-name-face)) . -3260) (undo-tree-id224 . -1) (undo-tree-id225 . -1) 3261) nil (25527 30297 879807 355000) 0 nil])
([nil nil ((3258 . 3265)) nil (25527 30297 879785 3000) 0 nil])
([nil nil ((#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "defn" "mu/update-power-pid"))) . -3264) (undo-tree-id218 . -1) (undo-tree-id219 . -1) 3265) nil (25527 30297 879778 911000) 0 nil])
([nil nil ((3264 . 3274)) nil (25527 30297 879768 485000) 0 nil])
([nil nil ((3272 . 3284)) nil (25527 30297 879764 819000) 0 nil])
([nil nil ((3284 . 3291)) nil (25527 30297 879760 633000) 0 nil])
([nil nil ((#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "prev-respone" "state"))) . -3289) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("s" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "prev-respones" "state"))) . -3290) (undo-tree-id216 . -1) (undo-tree-id217 . -1) 3291) nil (25527 30297 879755 374000) 0 nil])
([nil nil ((3289 . 3291)) nil (25527 30297 879738 634000) 0 nil])
([nil nil ((#("p" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "p" "state"))) . -3278) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("r" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "pr" "state"))) . -3279) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "pre" "state"))) . -3280) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("v" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "prev" "state"))) . -3281) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("-" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "prev-" "state"))) . -3282) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#("r" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "prev-r" "state"))) . -3283) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "prev-re" "state"))) . -3284) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("s" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "prev-res" "state"))) . -3285) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (#("p" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "prev-resp" "state"))) . -3286) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#("o" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "prev-respo" "state"))) . -3287) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("n" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "prev-respon" "state"))) . -3288) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (#("s" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "prev-respons" "state"))) . -3289) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "prev-response" "state"))) . -3290) (undo-tree-id212 . -1) (undo-tree-id213 . -1) 3291) nil (25527 30297 879726 5000) 0 nil])
([nil nil ((3278 . 3280)) nil (25527 30297 879628 747000) 0 nil])
([nil nil ((#("q" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "pq" "state"))) . -3279) (undo-tree-id186 . -1) (undo-tree-id187 . -1) 3280) nil (25527 30297 879623 581000) 0 nil])
([nil nil ((3279 . 3282)) nil (25527 30297 879613 118000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "pars" "state"))) . -3312) (undo-tree-id184 . -1) (undo-tree-id185 . -1) 3313) nil (25527 30297 879608 81000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "pars" "state"))) . -3305) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "pars" "state"))) . -3306) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "pars" "state"))) . -3307) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "pars" "state"))) . -3308) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("l" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "pars" "state"))) . -3309) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "pars" "state"))) . -3310) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("r" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "pars" "state"))) . -3311) (undo-tree-id182 . -1) (undo-tree-id183 . -1) 3312) nil (25527 30297 879592 841000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "pars" "state"))) . -3318) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "pars" "state"))) . -3319) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("m" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "pars" "state"))) . -3320) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("o" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "pars" "state"))) . -3321) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("-" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "pars" "state"))) . -3322) (undo-tree-id168 . -1) (undo-tree-id169 . -1) 3323) nil (25527 30297 879541 231000) 0 nil])
([nil nil ((3284 . 3286) (#(" " 0 1 (help-echo cider--help-echo fontified nil cider-locals ("pars" "pars" "state"))) . 3283) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (3284 . 3285)) nil (25527 30297 879500 46000) 0 nil])
([nil nil ((3326 . 3327)) nil (25527 30297 879453 733000) 0 nil])
([nil nil ((2456 . 2473) (t 25527 30298 13308 317000)) nil (25527 30645 618947 389000) 0 nil])
([nil nil ((2473 . 2485)) nil (25527 30645 618942 686000) 0 nil])
([nil nil ((2485 . 2487)) nil (25527 30645 618938 482000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2524 . 2525) (nil fontified nil 2487 . 2525) (2487 . 2525)) nil (25527 30645 618933 408000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars"))) . -2487) (undo-tree-id228 . -1) (undo-tree-id229 . -1) 2488) nil (25527 30645 618920 20000) 0 nil])
([nil nil ((#("V" 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . -2487) (undo-tree-id230 . -1) (undo-tree-id231 . -1) 2488 (2487 . 2488) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified nil cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (#("
" 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2487) (2739 . 2740) (#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars"))) . -2739) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars"))) . -2740) (undo-tree-id234 . -1) (undo-tree-id235 . -1) 2741 (2739 . 2741) (2736 . 2739) (#("d" 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars" "x"))) . -2730) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars" "x"))) . -2731) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("m" 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars" "x"))) . -2732) (undo-tree-id240 . -1) (undo-tree-id241 . -1) 2733 (#("o" 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars" "x"))) . -2733) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (#("-" 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . -2734) (undo-tree-id244 . -1) (undo-tree-id245 . -1) 2735 (#("d" 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . -2684) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . -2685) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#("m" 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . -2686) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (#("o" 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . -2687) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#("-" 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . -2688) (undo-tree-id254 . -1) (undo-tree-id255 . -1) 2689 (#("d" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars"))) . -2630) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars"))) . -2631) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (#("m" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars"))) . -2632) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#("o" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars"))) . -2633) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#("-" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars"))) . -2634) (undo-tree-id264 . -1) (undo-tree-id265 . -1) 2635 (2640 . 2680) (#(" " 0 1 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars"))) . 2639) (undo-tree-id266 . -1) (2640 . 2641) (2590 . 2621) (#(" " 0 1 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars"))) . 2589) (undo-tree-id267 . -1) (2590 . 2591) (nil rear-nonsticky nil 2679 . 2680) (nil fontified nil 2582 . 2680) (2582 . 2680) (2487 . 2518) (2520 . 2551) (2487 . 2488) (#("(" 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . -2487) (undo-tree-id268 . -1) 2488 (2487 . 2488) (#("d" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars"))) . -2514) (undo-tree-id269 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars"))) . -2515) (undo-tree-id270 . -1) (#("m" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars"))) . -2516) (undo-tree-id271 . -1) (#("o" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars"))) . -2517) (undo-tree-id272 . -1) (#("-" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars"))) . -2518) (undo-tree-id273 . -1) 2519 (t 25527 30645 735101 861000)) nil (25527 31008 400856 181000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars") face clojure-keyword-face)) . -2256) (undo-tree-id280 . -1) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars"))) . -2257) (undo-tree-id281 . -1) 2258 (2246 . 2258) (2229 . 2246) (t 25527 30841 749157 598000) 2228) nil (25527 31072 31526 407000) 0 nil] [nil nil ((#("   " 0 3 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars"))) . -2199) (undo-tree-id274 . -3) (undo-tree-id275 . -3) 2202 (2199 . 2202) (2199 . 2200) 2228 (t 25527 30841 749157 598000)) ((#("
" 0 1 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars"))) . 2199) (undo-tree-id276 . 1) (#("   " 0 3 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars"))) . 2199) (undo-tree-id277 . -3) (2199 . 2202)) (25527 31008 400051 17000) 0 nil])
([nil nil ((#("                :on-succes
" 0 16 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars")) 16 17 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars") face clojure-keyword-face) 17 26 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars") face clojure-keyword-face) 26 27 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars"))) . 2230) (undo-tree-id278 . 1) (undo-tree-id279 . -25) 2255) nil (25527 31072 31790 234000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 2245 . 2246) (#("
" 0 1 (cider-locals ("ref" "pars") fontified nil)) . -2301) (2229 . 2302) 2214) nil (25527 31190 607225 902000) 0 nil] [nil nil ((nil rear-nonsticky nil 2289 . 2290) (#("
" 0 1 (cider-locals ("ref" "pars") fontified nil)) . -2345) (2273 . 2346) 2245) ((#("
                :on-success #(mu/update-kettler kettler-state sim-pars)
" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars")) 1 16 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars")) 16 17 (fontified nil rear-nonsticky nil help-echo cider--help-echo cider-locals ("ref" "pars")) 17 18 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars") face clojure-keyword-face) 18 28 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars") face clojure-keyword-face) 28 31 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars")) 31 33 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars") face font-lock-type-face) 33 72 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars")) 72 73 (cider-locals ("ref" "pars") fontified nil)) . 2273) (undo-tree-id282 . -72) (undo-tree-id283 . -17) (undo-tree-id284 . -1) (undo-tree-id285 . -72) (undo-tree-id286 . -1) (undo-tree-id287 . -17) (2345 . 2346) (nil rear-nonsticky t 2289 . 2290)) (25527 31072 31462 502000) 0 nil])
([nil nil ((3303 . 3308) (3295 . 3303) (3292 . 3295) (#("ü" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "hr-target"))) . -3292) (undo-tree-id293 . -1) 3293 (3292 . 3293) (#("ü" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "hr-target"))) . -3292) (undo-tree-id294 . -1) 3293 (3284 . 3293) (3280 . 3284) (#("/" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "hr-target"))) . -3280) (undo-tree-id295 . -1) 3281 (3278 . 3281) (#("s" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "hr-target"))) . -3278) (undo-tree-id296 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "hr-target"))) . -3279) (undo-tree-id297 . -1) (#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "hr-target") face font-lock-function-name-face)) . -3280) (undo-tree-id298 . -1) 3281 (3277 . 3281) (3274 . 3277) (t 25527 31233 758485 968000) 3273) nil (25527 31520 558857 932000) 0 nil] [nil nil ((2411 . 2412) (#("(" 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . -2411) (undo-tree-id288 . -1) (undo-tree-id289 . -1) 2412 (2411 . 2412) (2411 . 2442) (2411 . 2412)) ((#("(" 0 1 (help-echo cider--help-echo fontified nil cider-locals ("ref" "pars"))) . 2411) (undo-tree-id290 . 1) (#("
                              " 0 1 (help-echo cider--help-echo fontified nil cider-locals ("ref" "pars")) 1 31 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2411) (undo-tree-id291 . 31) (#("(" 0 1 (help-echo cider--help-echo fontified nil cider-locals ("ref" "pars"))) . 2411) (undo-tree-id292 . -1) (2411 . 2412) (#("û" 0 1 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars"))) . 2411)) (25527 31190 606894 77000) 0 nil])
nil
([nil nil ((3744 . 3746) (3744 . 3745) 3745) nil (25527 31520 558776 989000) 0 nil])
nil
([nil nil ((3746 . 3762)) nil (25527 31520 558768 175000) 0 nil])
([nil nil ((3762 . 3763)) nil (25527 31520 558751 786000) 0 nil])
([nil nil ((3298 . 3312) (t 25527 31520 701261 386000)) nil (25527 32247 423522 278000) 0 nil])
([nil nil ((#("target-" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power" "hr-target")) 1 2 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power" "hr-target")) 2 3 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power" "hr-target")) 3 4 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power" "hr-target")) 4 5 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power" "hr-target")) 5 6 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power" "hr-target")) 6 7 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power" "hr-target"))) . 3285) (undo-tree-id396 . -7) (undo-tree-id397 . -7)) ((3285 . 3292)) (25527 32249 880273 569000) 0 nil])
([nil nil ((3290 . 3297)) ((#("-target" 0 7 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars" "power" "hr-target"))) . 3290) (undo-tree-id393 . -7) (undo-tree-id394 . -7) (undo-tree-id395 . -7)) (25527 32250 502207 104000) 0 nil])
([nil nil ((2706 . 2707) (#("m" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2560) (undo-tree-id0 . -1) (#("u" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2561) (undo-tree-id1 . -1) (#("/" 0 1 (cider-locals ("pars") help-echo cider--help-echo fontified t)) . -2562) (undo-tree-id2 . -1) 2563 (2560 . 2563) (t 25527 32260 3597 444000)) nil (25527 32617 999710 779000) 0 nil] [nil nil ((#("V" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "hr-target"))) . -3277) (undo-tree-id316 . -1) 3278 (3277 . 3278) (t 25527 31980 40191 275000)) ((#("V" 0 1 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "hr-target"))) . 3277) (3277 . 3278) (t 25527 32199 95025 878000)) (25527 32196 992457 110000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2575 . 2576) (nil fontified nil 2560 . 2576) (2560 . 2576) 2559 (t 25527 32442 939322 308000)) nil (25527 32707 286560 726000) 0 nil] [nil nil ((nil rear-nonsticky nil 2576 . 2577) (nil fontified nil 2561 . 2577) (2561 . 2577) 2560 (t 25527 32442 939322 308000)) ((#("update-power-pid" 0 15 (fontified nil) 15 16 (fontified nil rear-nonsticky nil)) . 2561) (undo-tree-id0 . -15) (undo-tree-id1 . -15) (undo-tree-id2 . -15) (nil rear-nonsticky t 2576 . 2577)) (25527 32617 998768 616000) 0 nil])
([nil nil ((#("  " 0 2 (help-echo cider--help-echo fontified t cider-locals ("ref" "pars" "power"))) . -3174) (undo-tree-id314 . -2) 3176 (3174 . 3176) (3174 . 3175) 3176) ((#("
" 0 1 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . 3174) (undo-tree-id391 . 1) (#("  " 0 2 (help-echo cider--help-echo fontified nil cider-locals ("ref" "pars" "power"))) . 3174) (undo-tree-id392 . -2) (3174 . 3176)) (25527 32196 17080 844000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . 2576) (undo-tree-id26 . -1) (undo-tree-id27 . -1)) nil (25527 32707 286540 134000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 3176 . 3177) (#("
" 0 1 (cider-locals ("ref" "pars" "hr-target") fontified nil)) . -3222) (3174 . 3223)) ((#("
  (mu/set-pulse-target kettler-state hr-target)
" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 1 2 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 2 3 (fontified nil rear-nonsticky nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 3 4 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 4 6 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power") face font-lock-type-face) 6 11 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 11 16 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 16 17 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 17 18 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 18 19 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 19 20 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 20 21 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 21 22 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 22 23 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 23 24 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 24 38 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 38 39 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 39 40 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 40 41 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 41 42 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 42 43 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 43 44 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 44 45 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 45 46 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 46 47 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 47 48 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 48 49 (cider-locals ("ref" "pars" "hr-target") fontified nil)) . 3174) (undo-tree-id380 . -11) (undo-tree-id381 . -18) (undo-tree-id382 . 46) (undo-tree-id383 . -18) (undo-tree-id384 . -18) (undo-tree-id385 . -48) (undo-tree-id386 . -11) (undo-tree-id387 . -11) (undo-tree-id388 . -6) (undo-tree-id389 . -11) (undo-tree-id390 . -18) (3222 . 3223) (nil rear-nonsticky t 3176 . 3177)) (25527 32195 160045 59000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . 2576)) nil (25527 32707 286510 838000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . 3174) (undo-tree-id313 . -1)) ((3174 . 3175)) (25527 32194 706642 797000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 2576) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1)) nil (25527 32707 286496 450000) 0 nil])
([nil nil ((#("pulse" 0 5 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . 3184)) ((3184 . 3189)) (25527 32194 260966 150000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 2576)) nil (25527 32707 286459 24000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . 3184)) ((3184 . 3185)) (25527 32193 694810 629000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 2576)) nil (25527 32707 286447 636000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3191 . 3192) (nil fontified nil 3185 . 3192) (3185 . 3192) 3184) ((#("target " 0 1 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 1 2 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 2 3 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 3 4 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 4 5 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 5 6 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 6 7 (fontified nil rear-nonsticky nil help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . 3185) (undo-tree-id379 . -6) (nil rear-nonsticky t 3191 . 3192)) (25527 32193 44317 366000) 0 nil] [nil nil ((#("target " 0 7 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . 3184)) ((3184 . 3191)) (25527 32108 281971 208000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 2576)) nil (25527 32707 286436 414000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3184) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3185) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (#("a" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3186) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("r" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3187) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (#("g" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3188) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3189) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3190) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#(" " 0 1 (fontified t rear-nonsticky t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3191) (undo-tree-id365 . -1) (#("a" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3192) (undo-tree-id367 . -1) (#("r" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3193) (undo-tree-id369 . -1) (#("g" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3194) (undo-tree-id371 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3195) (undo-tree-id373 . -1) (#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3196) (undo-tree-id375 . -1) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3197) (undo-tree-id377 . -1) 3198) ((3184 . 3198)) (25527 32192 351978 605000) 0 nil] [nil nil ((3225 . 3229) (3222 . 3225) 3191) ((#("
  " 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power")) 1 3 (fontified nil help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . 3222) (undo-tree-id318 . -3) (undo-tree-id319 . -1) (undo-tree-id320 . -3) (#("wer " 0 4 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . 3225) (undo-tree-id321 . -3) (undo-tree-id322 . -3)) (25527 32111 840176 39000) 0 nil])
nil
([nil nil ((#("-" 0 1 (fontified t)) . 2576)) nil (25527 32707 286425 284000) 0 nil])
([nil nil ((3184 . 3190)) ((#("power " 0 6 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . 3184)) (25527 32191 903097 682000) 0 nil])
nil
([nil nil ((#("p" 0 1 (fontified t)) . 2576)) nil (25527 32707 286413 877000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3206) (undo-tree-id327 . -1) (#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3207) (undo-tree-id329 . -1) (#("a" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3208) (undo-tree-id331 . -1) (#("r" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3209) (undo-tree-id333 . -1) (#("g" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3210) (undo-tree-id335 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3211) (undo-tree-id337 . -1) (#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3212) (undo-tree-id339 . -1) 3213) ((3206 . 3213)) (25527 32191 216060 353000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 2576)) nil (25527 32707 286403 7000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3204) (undo-tree-id323 . -1) (#("r" 0 1 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . -3205) (undo-tree-id325 . -1) 3206) ((3204 . 3206)) (25527 32189 967378 64000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . 2576)) nil (25527 32707 286391 914000) 0 nil])
([nil nil ((3204 . 3209)) ((#("power" 0 5 (fontified t help-echo cider--help-echo cider-locals ("ref" "pars" "power"))) . 3204) (t 25527 32142 376358 783000)) (25527 32142 230075 614000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 2576)) nil (25527 32707 286380 470000) 0 nil])
nil
([nil nil ((#("r" 0 1 (fontified t)) . 2576)) nil (25527 32707 286369 44000) 0 nil])
([nil nil ((2559 . 2570)) nil (25527 32707 286358 156000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -2568) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("s" 0 1 (fontified t)) . -2569) (undo-tree-id21 . -1) (undo-tree-id22 . -1) 2570) nil (25527 32707 286342 286000) 0 nil])
([nil nil ((2568 . 2573)) nil (25527 32707 286294 435000) 0 nil])
([nil nil ((2610 . 2611)) nil (25527 32707 286283 879000) 0 nil])
([nil nil ((#("-" 0 1 (fontified nil)) . 2764) (#("r" 0 1 (fontified t)) . 2764) (#("e" 0 1 (fontified t)) . 2764) (#("l" 0 1 (fontified t)) . 2764) (#("t" 0 1 (fontified t)) . 2764) (#("t" 0 1 (fontified t)) . 2764) (#("e" 0 1 (fontified t)) . 2764) (#("k" 0 1 (fontified t)) . 2764) (#(" " 0 1 (fontified t)) . 2764) (#("r" 0 1 (fontified t)) . 2764) (#("e" 0 1 (fontified t)) . 2764) (#("w" 0 1 (fontified t)) . 2764) (#("o" 0 1 (fontified t)) . 2764) (#("p" 0 1 (fontified t)) . 2764) (#("-" 0 1 (fontified t)) . 2764) (#("e" 0 1 (fontified t)) . 2764) (#("t" 0 1 (fontified t)) . 2764) (#("a" 0 1 (fontified t)) . 2764) (#("d" 0 1 (fontified t)) . 2764) (#("p" 0 1 (fontified t)) . 2764) (#("u" 0 1 (fontified t)) . 2764)) nil (25527 32707 286252 750000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 2764) (#("r" 0 1 (fontified t)) . 2764) (#("a" 0 1 (fontified t)) . 2764) (#("p" 0 1 (fontified t)) . 2764) (#(" " 0 1 (fontified t)) . 2764) (#("e" 0 1 (fontified t)) . 2764) (#("t" 0 1 (fontified t)) . 2764) (#("a" 0 1 (fontified t)) . 2764) (#("t" 0 1 (fontified t)) . 2764) (#("s" 0 1 (fontified t)) . 2764)) nil (25527 32707 286197 955000) 0 nil])
([nil nil ((2764 . 2769)) nil (25527 32707 286171 770000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -2768) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 2769) nil (25527 32707 286157 641000) 0 nil])
([nil nil ((2768 . 2772)) nil (25527 32707 286126 30000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -2773) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#(")" 0 1 (fontified t)) . -2774) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#(")" 0 1 (fontified t)) . -2775) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#(")" 0 1 (fontified t)) . -2776) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#(")" 0 1 (fontified t)) . -2777) (undo-tree-id15 . -1) (undo-tree-id16 . -1) 2778) nil (25527 32707 286103 475000) 0 nil])
([nil nil ((2773 . 2779)) nil (25527 32707 285997 718000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -2777) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#(")" 0 1 (fontified t)) . -2778) (undo-tree-id5 . -1) (undo-tree-id6 . -1) 2779) nil (25527 32707 285978 922000) 0 nil])
([nil nil ((2777 . 2778)) nil (25527 32707 285881 405000) 0 nil])
([nil nil ((2574 . 2575) (t 25527 32707 653587 515000)) nil (25527 32726 858998 818000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -2574) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 2575) nil (25527 32726 858990 429000) 0 nil])
([nil nil ((2574 . 2577)) nil (25527 32726 858942 801000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "response") face clojure-keyword-face)) . -2577) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 2578 (2577 . 2578) (t 25527 32727 13230 52000)) nil (25527 32816 444751 391000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t cider-locals ("pars" "response"))) . 2728) (t 25527 32816 581540 472000)) nil (25527 32838 682471 803000) 0 nil])
([nil nil ((2608 . 2615) (t 25527 32838 831112 396000)) nil (25527 32964 681304 699000) 0 nil])
([nil nil ((2620 . 2621)) nil (25527 32964 681291 236000) 0 nil])
([nil nil ((2713 . 2719) (#("æ" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "response"))) . -2713) (undo-tree-id32 . -1) 2714 (2713 . 2714) (#("p" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "response"))) . -2713) (undo-tree-id33 . -1) (#("a" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "response"))) . -2714) (undo-tree-id34 . -1) 2715 (2713 . 2715) (2710 . 2713) (#("k" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "response"))) . -2710) (undo-tree-id35 . -1) 2711 (2710 . 2711) (#("k" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "response"))) . -2710) (undo-tree-id36 . -1) (#("l" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "response"))) . -2711) (undo-tree-id37 . -1) 2712 (2710 . 2712) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "response"))) . -2710) (undo-tree-id38 . -1) 2711 (2707 . 2711) (#("o" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "response"))) . -2707) (undo-tree-id39 . -1) (#("n" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "response"))) . -2708) (undo-tree-id40 . -1) (#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "response"))) . -2709) (undo-tree-id41 . -1) 2710 (2704 . 2710) (2673 . 2704) (2623 . 2654) (2641 . 2642) (2628 . 2641) (#("r" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "response"))) . -2628) (undo-tree-id42 . -1) 2629 (2628 . 2629) (#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "response") face font-lock-function-name-face)) . -2628) (undo-tree-id43 . -1) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "response"))) . -2629) (undo-tree-id44 . -1) (#("r" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "response"))) . -2630) (undo-tree-id45 . -1) 2631 (2628 . 2631) (2626 . 2628) (#("o" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "response"))) . -2626) (undo-tree-id46 . -1) 2627 (2623 . 2627) (2624 . 2655) (#("                               " 0 31 (fontified nil help-echo cider--help-echo cider-locals ("pars" "response"))) . 2623) (undo-tree-id47 . -30) (2653 . 2654) (2653 . 2654) (#("i" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "response"))) . -2653) (undo-tree-id48 . -1) 2654 (2653 . 2654) (t 25527 32964 828634 364000)) nil (25527 33185 330167 181000) 0 nil])
([nil nil ((2845 . 2846) (2759 . 2791) (#("                               " 0 31 (fontified t cider-locals ("pars" "response"))) . 2759) 2839) nil (25527 33185 330054 554000) 0 nil])
([nil nil ((1925 . 1928) (nil rear-nonsticky nil 4196 . 4197) (nil fontified nil 3010 . 4197) (3010 . 4197) (t 25527 33185 464120 276000)) nil (25527 33360 89522 82000) 0 nil])
([nil nil ((#("(defn3dd kettler-control [pars]
" 0 1 (fontified t help-echo cider--help-echo cider-locals nil) 1 8 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-keyword-face) 8 9 (fontified t help-echo cider--help-echo cider-locals ("pars")) 9 24 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face) 24 32 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 1920) (undo-tree-id179 . 24) (undo-tree-id180 . -7) (undo-tree-id181 . -7) 1927) nil (25527 33360 89514 564000) 0 nil])
([nil nil ((#("  {:start [{:conditions [#(= (:mode @pars) \"hr-target\")]
" 0 3 (fontified t help-echo cider--help-echo cider-locals ("pars")) 3 4 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 4 9 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 9 12 (fontified t help-echo cider--help-echo cider-locals ("pars")) 12 13 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 13 23 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 23 27 (fontified t help-echo cider--help-echo cider-locals ("pars")) 27 28 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face) 28 30 (fontified t help-echo cider--help-echo cider-locals ("pars")) 30 31 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 31 35 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 35 43 (fontified t help-echo cider--help-echo cider-locals ("pars")) 43 54 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-string-face) 54 56 (fontified t help-echo cider--help-echo cider-locals ("pars")) 56 57 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 1920) (undo-tree-id175 . 57) (undo-tree-id176 . -7) (undo-tree-id177 . -56) (undo-tree-id178 . -7) 1927) nil (25527 33360 89500 768000) 0 nil])
([nil nil ((#("            :transition :hr-target}
" 0 12 (help-echo cider--help-echo fontified t cider-locals ("pars")) 12 13 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 13 23 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 23 24 (help-echo cider--help-echo fontified t cider-locals ("pars")) 24 25 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 25 34 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 34 35 (help-echo cider--help-echo fontified t cider-locals ("pars")) 35 36 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id171 . 36) (undo-tree-id172 . -7) (undo-tree-id173 . -35) (undo-tree-id174 . -7) 1927) nil (25527 33360 89484 713000) 0 nil])
([nil nil ((#("           {:conditions [#(= (:mode @pars) \"pw-target\")]
" 0 12 (help-echo cider--help-echo fontified t cider-locals ("pars")) 12 13 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 13 23 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 23 27 (help-echo cider--help-echo fontified t cider-locals ("pars")) 27 28 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 28 30 (help-echo cider--help-echo fontified t cider-locals ("pars")) 30 31 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 31 35 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 35 43 (help-echo cider--help-echo fontified t cider-locals ("pars")) 43 54 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-string-face) 54 56 (help-echo cider--help-echo fontified t cider-locals ("pars")) 56 57 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id167 . 57) (undo-tree-id168 . -7) (undo-tree-id169 . -56) (undo-tree-id170 . -7) 1927) nil (25527 33360 89467 547000) 0 nil])
([nil nil ((#("            :transition :pw-target}
" 0 12 (help-echo cider--help-echo fontified t cider-locals ("pars")) 12 13 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 13 23 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 23 24 (help-echo cider--help-echo fontified t cider-locals ("pars")) 24 25 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 25 34 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 34 35 (help-echo cider--help-echo fontified t cider-locals ("pars")) 35 36 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id163 . 36) (undo-tree-id164 . -7) (undo-tree-id165 . -35) (undo-tree-id166 . -7) 1927) nil (25527 33360 89450 269000) 0 nil])
([nil nil ((#("           {:conditions []
" 0 12 (help-echo cider--help-echo fontified t cider-locals ("pars")) 12 13 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 13 23 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 23 26 (help-echo cider--help-echo fontified t cider-locals ("pars")) 26 27 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id159 . 27) (undo-tree-id160 . -7) (undo-tree-id161 . -26) (undo-tree-id162 . -7) 1927) nil (25527 33360 89433 84000) 0 nil])
([nil nil ((#("            :transition :start}]
" 0 12 (help-echo cider--help-echo fontified t cider-locals ("pars")) 12 13 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 13 23 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 23 24 (help-echo cider--help-echo fontified t cider-locals ("pars")) 24 25 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 25 30 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 30 32 (help-echo cider--help-echo fontified t cider-locals ("pars")) 32 33 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id155 . 33) (undo-tree-id156 . -7) (undo-tree-id157 . -32) (undo-tree-id158 . -7) 1927) nil (25527 33360 89405 29000) 0 nil])
([nil nil ((#("   
" 0 3 (help-echo cider--help-echo fontified t cider-locals ("pars")) 3 4 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id151 . 4) (undo-tree-id152 . -2) (undo-tree-id153 . -3) (undo-tree-id154 . -2) 1922) nil (25527 33360 89387 882000) 0 nil])
([nil nil ((#("   :pw-target [{:conditions []
" 0 3 (help-echo cider--help-echo fontified t cider-locals ("pars")) 3 4 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 4 13 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 13 16 (help-echo cider--help-echo fontified t cider-locals ("pars")) 16 17 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 17 27 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 27 30 (help-echo cider--help-echo fontified t cider-locals ("pars")) 30 31 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id147 . 31) (undo-tree-id148 . -2) (undo-tree-id149 . -30) (undo-tree-id150 . -2) 1922) nil (25527 33360 89370 308000) 0 nil])
([nil nil ((#("                :on-success #(mu/update-kettler kettler-state sim-pars)
" 0 16 (help-echo cider--help-echo fontified t cider-locals ("pars")) 16 17 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 17 27 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 27 30 (help-echo cider--help-echo fontified t cider-locals ("pars")) 30 32 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-type-face) 32 71 (help-echo cider--help-echo fontified t cider-locals ("pars")) 71 72 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id143 . 72) (undo-tree-id144 . -2) (undo-tree-id145 . -71) (undo-tree-id146 . -2) 1922) nil (25527 33360 89352 216000) 0 nil])
([nil nil ((#("                :transition :update-power}]
" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars")) 1 16 (help-echo cider--help-echo fontified t cider-locals ("pars")) 16 17 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 17 22 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 22 27 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 27 28 (help-echo cider--help-echo fontified t cider-locals ("pars")) 28 29 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 29 41 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 41 43 (help-echo cider--help-echo fontified t cider-locals ("pars")) 43 44 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id139 . 44) (undo-tree-id140 . -2) (undo-tree-id141 . -43) (undo-tree-id142 . -2) 1922) nil (25527 33360 89334 753000) 0 nil])
([nil nil ((#("   
" 0 3 (help-echo cider--help-echo fontified t cider-locals ("pars")) 3 4 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id135 . 4) (undo-tree-id136 . -2) (undo-tree-id137 . -3) (undo-tree-id138 . -2) 1922) nil (25527 33360 89317 605000) 0 nil])
([nil nil ((#("   :hr-target [{:conditions []
" 0 3 (help-echo cider--help-echo fontified t cider-locals ("pars")) 3 4 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 4 13 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 13 16 (help-echo cider--help-echo fontified t cider-locals ("pars")) 16 17 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 17 27 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 27 30 (help-echo cider--help-echo fontified t cider-locals ("pars")) 30 31 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id131 . 31) (undo-tree-id132 . -2) (undo-tree-id133 . -30) (undo-tree-id134 . -2) 1922) nil (25527 33360 89300 680000) 0 nil])
([nil nil ((#("                :on-success #(mu/update-kettler kettler-state sim-pars)
" 0 16 (help-echo cider--help-echo fontified t cider-locals ("pars")) 16 17 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 17 27 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 27 30 (help-echo cider--help-echo fontified t cider-locals ("pars")) 30 32 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-type-face) 32 71 (help-echo cider--help-echo fontified t cider-locals ("pars")) 71 72 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id127 . 72) (undo-tree-id128 . -2) (undo-tree-id129 . -71) (undo-tree-id130 . -2) 1922) nil (25527 33360 89283 310000) 0 nil])
([nil nil ((#("                :transition :pid-power}]
" 0 16 (help-echo cider--help-echo fontified t cider-locals ("pars")) 16 17 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 17 27 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 27 28 (help-echo cider--help-echo fontified t cider-locals ("pars")) 28 29 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 29 38 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 38 40 (help-echo cider--help-echo fontified t cider-locals ("pars")) 40 41 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id123 . 41) (undo-tree-id124 . -2) (undo-tree-id125 . -40) (undo-tree-id126 . -2) 1922) nil (25527 33360 89266 514000) 0 nil])
([nil nil ((#("   
" 0 3 (help-echo cider--help-echo fontified t cider-locals ("pars")) 3 4 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id119 . 4) (undo-tree-id120 . -2) (undo-tree-id121 . -3) (undo-tree-id122 . -2) 1922) nil (25527 33360 89250 33000) 0 nil])
([nil nil ((#("   :pid-power [{:conditions []
" 0 3 (help-echo cider--help-echo fontified t cider-locals ("pars")) 3 4 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 4 8 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 8 13 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 13 16 (fontified t help-echo cider--help-echo cider-locals ("pars")) 16 17 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 17 27 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 27 30 (fontified t help-echo cider--help-echo cider-locals ("pars")) 30 31 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 1920) (undo-tree-id115 . 31) (undo-tree-id116 . -2) (undo-tree-id117 . -30) (undo-tree-id118 . -2) 1922) nil (25527 33360 89233 274000) 0 nil])
([nil nil ((#("                :on-success #(let [response (mu/update-power-pid kettler-state (:buf @pars))]
" 0 16 (help-echo cider--help-echo fontified t cider-locals ("pars")) 16 17 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 17 27 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 27 30 (help-echo cider--help-echo fontified t cider-locals ("pars")) 30 33 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-keyword-face) 33 44 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 44 45 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 45 47 (help-echo cider--help-echo fontified t cider-locals ("pars" "response") face font-lock-type-face) 47 48 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 48 63 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 63 64 (rear-nonsticky t help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 64 70 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 70 80 (help-echo cider--help-echo cider-locals ("pars" "response") fontified t) 80 81 (help-echo cider--help-echo cider-locals ("pars" "response") fontified t face clojure-keyword-face) 81 84 (help-echo cider--help-echo cider-locals ("pars" "response") fontified t face clojure-keyword-face) 84 86 (help-echo cider--help-echo cider-locals ("pars" "response") fontified t) 86 90 (help-echo cider--help-echo cider-locals ("pars" "response") fontified t) 90 93 (help-echo cider--help-echo cider-locals ("pars" "response") fontified t) 93 94 (help-echo cider--help-echo fontified t cider-locals ("pars" "response"))) . 1920) (undo-tree-id102 . -64) (undo-tree-id103 . -45) (undo-tree-id104 . -63) (undo-tree-id105 . -64) (undo-tree-id106 . -45) (undo-tree-id107 . -48) (undo-tree-id108 . 94) (undo-tree-id109 . -2) (undo-tree-id110 . -48) (undo-tree-id111 . -79) (undo-tree-id112 . -79) (undo-tree-id113 . -93) (undo-tree-id114 . -2) 1922) nil (25527 33360 89214 663000) 0 nil])
([nil nil ((#("                               (println response)
" 0 31 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 31 32 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 32 39 (help-echo cider--help-echo fontified t cider-locals ("pars" "response") face font-lock-function-name-face) 39 49 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 49 50 (help-echo cider--help-echo fontified t cider-locals ("pars" "response"))) . 1920) (undo-tree-id98 . 50) (undo-tree-id99 . -2) (undo-tree-id100 . -49) (undo-tree-id101 . -2) 1922) nil (25527 33360 89164 405000) 0 nil])
([nil nil ((#("                               (println @pars)
" 0 32 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 32 39 (help-echo cider--help-echo fontified t cider-locals ("pars" "response") face font-lock-function-name-face) 39 46 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 46 47 (help-echo cider--help-echo fontified t cider-locals ("pars" "response"))) . 1920) (undo-tree-id93 . 47) (undo-tree-id94 . -2) (undo-tree-id95 . -47) (undo-tree-id96 . -46) (undo-tree-id97 . -2) 1922) nil (25527 33360 89146 405000) 0 nil])
([nil nil ((#("                               (dosync
" 0 32 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 32 38 (help-echo cider--help-echo fontified t cider-locals ("pars" "response") face font-lock-keyword-face) 38 39 (help-echo cider--help-echo fontified t cider-locals ("pars" "response"))) . 1920) (undo-tree-id88 . 39) (undo-tree-id89 . -2) (undo-tree-id90 . -35) (undo-tree-id91 . -38) (undo-tree-id92 . -2) 1922) nil (25527 33360 89126 757000) 0 nil])
([nil nil ((#("                                (ref-set pars
" 0 32 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 32 33 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 33 40 (help-echo cider--help-echo fontified t cider-locals ("pars" "response") face font-lock-function-name-face) 40 45 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 45 46 (help-echo cider--help-echo fontified t cider-locals ("pars" "response"))) . 1920) (undo-tree-id84 . 46) (undo-tree-id85 . -2) (undo-tree-id86 . -45) (undo-tree-id87 . -2) 1922) nil (25527 33360 89107 128000) 0 nil])
([nil nil ((#("                                         (update @pars :buf (fn [x] (response))))))
" 0 42 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 42 48 (help-echo cider--help-echo fontified t cider-locals ("pars" "response") face font-lock-function-name-face) 48 55 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 55 56 (help-echo cider--help-echo fontified t cider-locals ("pars" "response") face clojure-keyword-face) 56 59 (help-echo cider--help-echo fontified t cider-locals ("pars" "response") face clojure-keyword-face) 59 61 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 61 63 (help-echo cider--help-echo fontified t cider-locals ("pars" "response") face font-lock-keyword-face) 63 79 (help-echo cider--help-echo fontified t cider-locals ("pars" "response" "x")) 79 82 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 82 83 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 83 84 (help-echo cider--help-echo fontified t cider-locals ("pars" "response"))) . 1920) (undo-tree-id76 . -30) (undo-tree-id77 . 84) (undo-tree-id78 . -30) (undo-tree-id79 . -2) (undo-tree-id80 . -35) (undo-tree-id81 . -35) (undo-tree-id82 . -83) (undo-tree-id83 . -2) 1922) nil (25527 33360 89089 351000) 0 nil])
([nil nil ((#("                :transition :start}]
" 0 16 (help-echo cider--help-echo fontified t cider-locals ("pars" "response")) 16 17 (help-echo cider--help-echo fontified t cider-locals ("pars" "response") face clojure-keyword-face) 17 27 (help-echo cider--help-echo fontified t cider-locals ("pars" "response") face clojure-keyword-face) 27 28 (help-echo cider--help-echo fontified t cider-locals ("pars")) 28 29 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 29 34 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 34 35 (help-echo cider--help-echo fontified t cider-locals ("pars")) 35 36 (help-echo cider--help-echo fontified t cider-locals ("pars")) 36 37 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id70 . 37) (undo-tree-id71 . -2) (undo-tree-id72 . 37) (undo-tree-id73 . -36) (undo-tree-id74 . -36) (undo-tree-id75 . -2) 1922) nil (25527 33360 89052 370000) 0 nil])
([nil nil ((#("   
" 0 3 (help-echo cider--help-echo fontified t cider-locals ("pars")) 3 4 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id65 . 4) (undo-tree-id66 . -2) (undo-tree-id67 . 4) (undo-tree-id68 . -3) (undo-tree-id69 . -2) 1922) nil (25527 33360 89029 334000) 0 nil])
([nil nil ((#("   :update-power [{:conditions []
" 0 3 (help-echo cider--help-echo fontified t cider-locals ("pars")) 3 4 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 4 16 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 16 19 (help-echo cider--help-echo fontified t cider-locals ("pars")) 19 20 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 20 30 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 30 33 (help-echo cider--help-echo fontified t cider-locals ("pars")) 33 34 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id60 . 34) (undo-tree-id61 . -2) (undo-tree-id62 . 34) (undo-tree-id63 . -33) (undo-tree-id64 . -2) 1922) nil (25527 33360 89008 667000) 0 nil])
([nil nil ((#("                   :transition :start}]
" 0 19 (help-echo cider--help-echo fontified t cider-locals ("pars")) 19 20 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 20 30 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 30 31 (help-echo cider--help-echo fontified t cider-locals ("pars")) 31 32 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 32 37 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 37 39 (help-echo cider--help-echo fontified t cider-locals ("pars")) 39 40 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id55 . 40) (undo-tree-id56 . -2) (undo-tree-id57 . 40) (undo-tree-id58 . -39) (undo-tree-id59 . -2) 1922) nil (25527 33360 88987 168000) 0 nil])
([nil nil ((#("   })
" 0 5 (help-echo cider--help-echo fontified t cider-locals ("pars")) 5 6 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 1920) (undo-tree-id49 . -6) (undo-tree-id50 . 6) (undo-tree-id51 . -2) (undo-tree-id52 . 6) (undo-tree-id53 . -5) (undo-tree-id54 . -2) 1922) nil (25527 33360 88959 854000) 0 nil])
([nil nil ((#("                :on-success #(do (println \"pw-target\")
" 0 16 (help-echo cider--help-echo fontified t cider-locals ("pars")) 16 17 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 17 27 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 27 30 (help-echo cider--help-echo fontified t cider-locals ("pars")) 30 32 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-keyword-face) 32 34 (help-echo cider--help-echo fontified t cider-locals ("pars")) 34 41 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 41 42 (help-echo cider--help-echo fontified t cider-locals ("pars")) 42 53 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-string-face) 53 55 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2273) (undo-tree-id187 . -36) (undo-tree-id188 . -36) 2309 (t 25527 33360 220432 106000)) nil (25527 33404 139016 881000) 0 nil])
([nil nil ((#("                                 (println @kettler-state))
" 0 12 (help-echo cider--help-echo fontified t cider-locals ("pars")) 12 34 (help-echo cider--help-echo fontified t cider-locals ("pars")) 34 41 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 41 46 (help-echo cider--help-echo fontified t cider-locals ("pars")) 46 58 (help-echo cider--help-echo fontified t cider-locals ("pars")) 58 59 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2273) (undo-tree-id184 . -36) (undo-tree-id185 . -58) (undo-tree-id186 . -36) 2309) nil (25527 33404 139263 931000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2381)) nil (25527 33426 504945 915000) 0 nil] [nil nil ((#("                :on-success #(do (mu/update-kettler kettler-state sim-pars)
" 0 16 (fontified t help-echo cider--help-echo cider-locals ("pars")) 16 17 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 17 27 (fontified t help-echo cider--help-echo cider-locals ("pars") face clojure-keyword-face) 27 30 (fontified t help-echo cider--help-echo cider-locals ("pars")) 30 32 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-keyword-face) 32 34 (fontified t help-echo cider--help-echo cider-locals ("pars")) 34 36 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-type-face) 36 76 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2352) (undo-tree-id182 . -29) (undo-tree-id183 . -29) 2381) ((2352 . 2428)) (25527 33404 138980 196000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2381)) nil (25527 33426 504940 878000) 0 nil])
nil
([nil nil ((#("o" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2381)) nil (25527 33426 504936 119000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2381)) nil (25527 33426 504930 767000) 0 nil])
([nil nil ((#("                                  (println \"hr-target\")
" 0 35 (fontified t help-echo cider--help-echo cider-locals ("pars")) 35 42 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face) 42 43 (fontified t help-echo cider--help-echo cider-locals ("pars")) 43 54 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-string-face) 54 55 (fontified t help-echo cider--help-echo cider-locals ("pars")) 55 56 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2424) (undo-tree-id195 . -30) 2454) nil (25527 33426 504924 693000) 0 nil])
([nil nil ((#("                                  (println @kettler-state))
" 0 35 (fontified t help-echo cider--help-echo cider-locals ("pars")) 35 42 (fontified t help-echo cider--help-echo cider-locals ("pars") face font-lock-function-name-face) 42 59 (fontified t help-echo cider--help-echo cider-locals ("pars")) 59 60 (fontified t help-echo cider--help-echo cider-locals ("pars"))) . 2424) (undo-tree-id194 . -30) 2454) nil (25527 33426 504915 138000) 0 nil])
([nil nil ((#("                :on-success #(do (println \"pid-power\")
" 0 16 (help-echo cider--help-echo fontified t cider-locals ("pars")) 16 17 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 17 27 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 27 30 (help-echo cider--help-echo fontified t cider-locals ("pars")) 30 32 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-keyword-face) 32 34 (help-echo cider--help-echo fontified t cider-locals ("pars")) 34 41 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 41 42 (help-echo cider--help-echo fontified t cider-locals ("pars")) 42 53 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-string-face) 53 55 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2500) (undo-tree-id193 . -30) 2530) nil (25527 33426 504905 379000) 0 nil])
([nil nil ((#("                                 (println @pars))
" 0 34 (help-echo cider--help-echo fontified t cider-locals ("pars")) 34 41 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 41 49 (help-echo cider--help-echo fontified t cider-locals ("pars")) 49 50 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2500) (undo-tree-id192 . -30) 2530) nil (25527 33426 504896 101000) 0 nil])
([nil nil ((#("                                 
" 0 33 (help-echo cider--help-echo fontified t cider-locals ("pars")) 33 34 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2500) (undo-tree-id191 . -30) 2530) nil (25527 33426 504886 194000) 0 nil])
([nil nil ((#("                   :on-success #(do (println \"update-power\")
" 0 19 (help-echo cider--help-echo fontified t cider-locals ("pars")) 19 20 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 20 30 (help-echo cider--help-echo fontified t cider-locals ("pars") face clojure-keyword-face) 30 33 (help-echo cider--help-echo fontified t cider-locals ("pars")) 33 35 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-keyword-face) 35 37 (help-echo cider--help-echo fontified t cider-locals ("pars")) 37 44 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 44 45 (help-echo cider--help-echo fontified t cider-locals ("pars")) 45 59 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-string-face) 59 61 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2575) (undo-tree-id190 . -30) 2605) nil (25527 33426 504875 991000) 0 nil])
([nil nil ((#("                                    (println @pars))
" 0 37 (help-echo cider--help-echo fontified t cider-locals ("pars")) 37 44 (help-echo cider--help-echo fontified t cider-locals ("pars") face font-lock-function-name-face) 44 52 (help-echo cider--help-echo fontified t cider-locals ("pars")) 52 53 (help-echo cider--help-echo fontified t cider-locals ("pars"))) . 2575) (undo-tree-id189 . -30) 2605) nil (25527 33426 504858 158000) 0 nil])
([nil nil ((#("(defn update-power [state pars]
  (mu/update-power-pid state (:buf @pars))) 
" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "hr-target")) 1 5 (help-echo cider--help-echo fontified t cider-locals ("pars" "hr-target") face font-lock-keyword-face) 5 6 (help-echo cider--help-echo fontified t cider-locals ("pars" "hr-target" "pars" "state")) 6 18 (help-echo cider--help-echo fontified t cider-locals ("pars" "hr-target" "pars" "state") face font-lock-function-name-face) 18 20 (help-echo cider--help-echo fontified t cider-locals ("pars" "hr-target" "pars" "state")) 20 35 (help-echo cider--help-echo fontified t cider-locals ("pars" "hr-target" "pars" "state")) 35 37 (help-echo cider--help-echo fontified t cider-locals ("pars" "hr-target" "pars" "state") face font-lock-type-face) 37 62 (help-echo cider--help-echo fontified t cider-locals ("pars" "hr-target" "pars" "state")) 62 63 (help-echo cider--help-echo fontified t cider-locals ("pars" "hr-target" "pars" "state") face clojure-keyword-face) 63 66 (help-echo cider--help-echo fontified t cider-locals ("pars" "hr-target" "pars" "state") face clojure-keyword-face) 66 75 (help-echo cider--help-echo fontified t cider-locals ("pars" "hr-target" "pars" "state")) 75 77 (help-echo cider--help-echo fontified t cider-locals ("pars" "hr-target"))) . 3342) (undo-tree-id241 . -38) (undo-tree-id242 . -38) (undo-tree-id243 . -6) (undo-tree-id244 . -38) (undo-tree-id245 . -6) (undo-tree-id246 . -38) 3380 (t 25527 33426 639011 167000)) nil (25527 33595 841776 1000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1919 . 1920) (#("
" 0 1 (cider-locals ("pars" "hr-target") fontified nil)) . -1996) (1919 . 1997)) nil (25527 33595 841752 909000) 0 nil])
([nil nil ((1997 . 1998)) nil (25527 33595 841747 594000) 0 nil])
([nil nil ((1954 . 1960)) nil (25527 33595 841744 20000) 0 nil])
([nil nil ((#("8" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state"))) . -1959) (undo-tree-id239 . -1) (undo-tree-id240 . -1) 1960) nil (25527 33595 841739 261000) 0 nil])
([nil nil ((1959 . 1964)) nil (25527 33595 841728 261000) 0 nil])
([nil nil ((1964 . 1969)) nil (25527 33595 841724 687000) 0 nil])
([nil nil ((2009 . 2010)) nil (25527 33595 841720 743000) 0 nil])
([nil nil ((2014 . 2016) (#("  " 0 2 (fontified nil help-echo cider--help-echo cider-locals ("pars" "state"))) . 2013) (undo-tree-id233 . -2) (undo-tree-id234 . -2) (2013 . 2016) (#("  " 0 2 (fontified nil help-echo cider--help-echo cider-locals ("pars" "state"))) . 2012) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -2) (undo-tree-id238 . -2) (2013 . 2015) (2011 . 2012)) nil (25527 33595 841713 669000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "response"))) . -2007) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "90" "exit" "demo-pars" "ref-set" "dosync" "stop-machine" "defn" "power" "pw-target" "demo-pars" "ref-set" "dosync" "power" "set-pw-mode" "defn" "sim-pars" "kettler-state" "mu/update-kettler" "#" "start" "println" "#" "pw-target" "pars" "=" "#" "hr-target" "pars" "=" "#" "pars" "kettler-control" "defn" "response"))) . -2008) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (#("]" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "response"))) . -2009) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "response"))) . -2010) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (#("
" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state"))) . -2011) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (#("
" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state"))) . -2012) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#("
" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state"))) . -2013) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state"))) . -2014) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state"))) . -2015) (undo-tree-id231 . -1) (undo-tree-id232 . -1) 2016) nil (25527 33595 841578 561000) 0 nil])
([nil nil ((2007 . 2009)) nil (25527 33595 841481 655000) 0 nil])
([nil nil ((2009 . 2011)) nil (25527 33595 841477 396000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "response") face font-lock-function-name-face)) . -2010) (undo-tree-id200 . -1) (undo-tree-id201 . -1) 2011) nil (25527 33595 841471 767000) 0 nil])
([nil nil ((2010 . 2011)) nil (25527 33595 841460 248000) 0 nil])
([nil nil ((2010 . 2015)) nil (25527 33595 841456 82000) 0 nil])
([nil nil ((2015 . 2028)) nil (25527 33595 841452 341000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "response"))) . -2027) (undo-tree-id198 . -1) (undo-tree-id199 . -1) 2028) nil (25527 33595 841447 175000) 0 nil])
([nil nil ((2027 . 2033)) nil (25527 33595 841435 990000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "response"))) . -2033) (undo-tree-id196 . -1) (undo-tree-id197 . -1) 2034) nil (25527 33595 841429 675000) 0 nil])
([nil nil ((2033 . 2035)) nil (25527 33595 841386 194000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "r"))) . -1960) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "re"))) . -1961) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (#("s" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "res"))) . -1962) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#("p" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "resp"))) . -1963) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("o" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "respo"))) . -1964) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (#("n" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "respon"))) . -1965) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#("s" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "respons"))) . -1966) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "response"))) . -1967) (undo-tree-id295 . -1) (undo-tree-id296 . -1) 1968 (t 25527 33595 975351 837000)) nil (25527 33732 100336 397000) 0 nil])
([nil nil ((1960 . 1963)) nil (25527 33732 100282 583000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pid"))) . -2011) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (#("r" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pid") face font-lock-function-name-face)) . -2012) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("i" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pid"))) . -2013) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("n" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pid"))) . -2014) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("t" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pid") face font-lock-function-name-face)) . -2015) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("l" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pid"))) . -2016) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("n" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pid") face font-lock-function-name-face)) . -2017) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pid"))) . -2018) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#("r" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pid"))) . -2019) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pid"))) . -2020) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (#("s" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pid"))) . -2021) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("p" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pid"))) . -2022) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (#("o" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pid"))) . -2023) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (#("n" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pid"))) . -2024) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (#("s" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pid"))) . -2025) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pid"))) . -2026) (undo-tree-id279 . -1) (undo-tree-id280 . -1) 2027) nil (25527 33732 100265 139000) 0 nil])
([nil nil ((2011 . 2018)) nil (25527 33732 100161 734000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t help-echo cider--help-echo cider-locals ("pars" "state" "pid"))) . -2017) (undo-tree-id247 . -1) (undo-tree-id248 . -1) 2018) nil (25527 33732 100155 660000) 0 nil])
([nil nil ((2017 . 2026)) nil (25527 33732 100120 698000) 0 nil])
([nil nil ((2026 . 2033)) nil (25527 33732 100115 846000) 0 nil])
([nil nil ((2033 . 2036)) nil (25527 33732 100103 31000) 0 nil])
([nil nil ((2620 . 2637) (t 25527 33732 242377 81000)) nil (25527 33895 81588 801000) 0 nil])
([nil nil ((2637 . 2651)) nil (25527 33895 81584 486000) 0 nil])
([nil nil ((#("ä" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "state" "pid" "pars"))) . -2649) (undo-tree-id300 . -1) (#("(" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "state" "pid" "pars"))) . -2650) (undo-tree-id301 . -1) 2651) nil (25527 33895 81579 41000) 0 nil])
([nil nil ((2649 . 2650)) nil (25527 33895 81567 134000) 0 nil])
([nil nil ((#("ä" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "state" "pid" "pars"))) . -2649) (undo-tree-id299 . -1) 2650) nil (25527 33895 81562 468000) 0 nil])
([nil nil ((2649 . 2659)) nil (25527 33895 81554 542000) 0 nil])
([nil nil ((#("ü" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "state" "pid" "pars"))) . -2658) (undo-tree-id298 . -1) 2659) nil (25527 33895 81549 227000) 0 nil])
([nil nil ((2658 . 2659)) nil (25527 33895 81540 61000) 0 nil])
([nil nil ((#("ü" 0 1 (help-echo cider--help-echo fontified t cider-locals ("pars" "state" "pid" "pars"))) . -2658) (undo-tree-id297 . -1) 2659) nil (25527 33895 81534 61000) 0 nil])
([nil nil ((2658 . 2660)) nil (25527 33895 81501 525000) 0 nil])
([nil nil ((2660 . 2679)) nil (25527 33895 81496 654000) 0 nil])
([nil current ((2679 . 2683)) nil (25527 33895 81484 340000) 0 nil])
nil
