(undo-tree-save-format-version . 1)
"9e955c50daa466f7ead3c0954bf3ca4230fa7581"
[nil nil nil nil (25529 56319 176468 20000) 0 nil]
([nil nil ((#("p" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -2189) (undo-tree-id17 . -1) 2190 (2189 . 2190) (64 . 75) (50 . 64) (t 25528 35926 629594 345000)) nil (25529 56319 176450 769000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2191 . 2192) (#("
" 0 1 (fontified nil cider-locals nil)) . -2298) (2189 . 2299)) nil (25529 56319 176414 33000) 0 nil])
([nil nil ((#("(" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . 2285) (undo-tree-id15 . 1) (undo-tree-id16 . -1)) nil (25529 56319 176396 363000) 0 nil])
([nil nil ((#("m" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . 2285) (undo-tree-id14 . 1)) nil (25529 56319 176356 903000) 0 nil])
([nil nil ((#("y" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . 2285)) nil (25529 56319 176331 341000) 0 nil])
([nil nil ((#("-" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . 2285)) nil (25529 56319 176320 96000) 0 nil])
([nil nil ((#("p" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . 2285)) nil (25529 56319 176308 573000) 0 nil])
([nil nil ((#("i" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . 2285)) nil (25529 56319 176297 328000) 0 nil])
([nil nil ((#("d" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . 2285)) nil (25529 56319 176286 223000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . 2285)) nil (25529 56319 176275 188000) 0 nil])
([nil nil ((#("2" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . 2285)) nil (25529 56319 176263 874000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . 2285)) nil (25529 56319 176252 211000) 0 nil])
([nil nil ((#("0" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . 2285)) nil (25529 56319 176240 757000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . 2285) (undo-tree-id12 . 1) (undo-tree-id13 . -1)) nil (25529 56319 176227 347000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . 2285) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . 1) (undo-tree-id11 . -1)) nil (25529 56319 176186 211000) 0 nil])
([nil nil ((#("  " 0 2 (cider-locals nil help-echo cider--help-echo fontified t)) . -2235) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("  " 0 1 (cider-locals nil help-echo cider--help-echo fontified t) 1 2 (cider-locals nil help-echo cider--help-echo rear-nonsticky t fontified t)) . -2190) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 2238) nil (25529 56319 176117 417000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2285 . 2286) (nil fontified nil 2272 . 2286) (2272 . 2286) 2271) nil (25529 56319 176022 293000) 0 nil])
([nil nil ((#("]" 0 1 (cider-locals ("get-pid-control") help-echo cider--help-echo rear-nonsticky t fontified t)) . 2285) (undo-tree-id0 . 1) (undo-tree-id1 . -1)) nil (25529 56319 176001 271000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("get-pid-control") help-echo cider--help-echo fontified t)) . 2285)) nil (25529 56319 175919 68000) 0 nil])
([nil nil ((#("1" 0 1 (cider-locals ("get-pid-control") help-echo cider--help-echo fontified t)) . 2285)) nil (25529 56319 175907 334000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("get-pid-control") help-echo cider--help-echo fontified t)) . 2285)) nil (25529 56319 175894 553000) 0 nil])
([nil nil ((#("1" 0 1 (cider-locals ("get-pid-control") help-echo cider--help-echo fontified t)) . 2285)) nil (25529 56319 175881 493000) 0 nil])
([nil nil ((2248 . 2252)) nil (25529 56319 175850 833000) 0 nil])
([nil nil ((#("g" 0 1 (cider-locals ("pid/get-pid-control") help-echo cider--help-echo fontified t)) . -2277) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("g" 0 1 (cider-locals ("pid/get-pid-control") help-echo cider--help-echo fontified t)) . -2278) (undo-tree-id20 . -1) (undo-tree-id21 . -1) 2279 (2277 . 2279) (t 25529 56319 186819 965000)) nil (25529 56370 803412 831000) 0 nil])
([nil nil ((50 . 51)) nil (25529 56370 803315 891000) 0 nil])
([nil nil ((65 . 66)) nil (25529 56370 803284 183000) 0 nil])
([nil nil ((#("1" 0 1 (cider-locals ("pid/get-pid-control") fontified t help-echo cider--help-echo)) . -2277) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 2278 (t 25529 56370 815075 976000)) nil (25529 56518 139943 269000) 0 nil])
([nil nil ((2999 . 3000) (2944 . 2950) (2928 . 2945) (#(" " 0 1 (cider-locals ("pars" "cur-pulse") fontified t help-echo cider--help-echo)) . -2928) (undo-tree-id65 . -1) 2929 (2923 . 2929) (2920 . 2923) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "new-power" "cur-pulse") fontified t help-echo cider--help-echo)) . -2920) (undo-tree-id66 . -1) (#("p" 0 1 (cider-locals ("pars" "pars" "update-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -2921) (undo-tree-id67 . -1) (#("u" 0 1 (cider-locals ("pars" "pars" "update-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -2922) (undo-tree-id68 . -1) (#("l" 0 1 (cider-locals ("pars" "pars" "update-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -2923) (undo-tree-id69 . -1) 2924 (2920 . 2924) (3011 . 3014) (#("w" 0 1 (cider-locals ("pars" "kettler-state" "new-poww" "cur-pulse") fontified t help-echo cider--help-echo)) . -3011) (undo-tree-id70 . -1) (#("e" 0 1 (cider-locals ("pars" "kettler-state" "new-powwe" "cur-pulse") fontified t help-echo cider--help-echo)) . -3012) (undo-tree-id71 . -1) 3013 (3004 . 3013) (2968 . 3004) (2959 . 2962) (2959 . 2965) (#("g" 0 1 (cider-locals ("pars" "pars" "update-power" "cur-pulse") fontified t help-echo cider--help-echo)) . -2959) (undo-tree-id72 . -1) 2960 (2956 . 2960) (2920 . 2956) (2922 . 2957) (#("                                   " 0 35 (cider-locals ("pars" "kettler-state" "cur-pulse") fontified nil help-echo cider--help-echo)) . 2921) (undo-tree-id73 . -35) (2921 . 2957) (#(" " 0 1 (cider-locals ("pars" "kettler-state" "cur-pulse") fontified nil help-echo cider--help-echo)) . 2920) (undo-tree-id74 . -1) (2921 . 2922) (2918 . 2921) (#("e" 0 1 (cider-locals ("pars" "pars" "cur-puleupdate-power") fontified t help-echo cider--help-echo)) . -2918) (undo-tree-id75 . -1) (#("s" 0 1 (cider-locals ("pars" "pars" "cur-pulesupdate-power") fontified t help-echo cider--help-echo)) . -2919) (undo-tree-id76 . -1) 2920 (2917 . 2920) (#("s" 0 1 (cider-locals ("pars" "pars" "cur-pusupdate-power") fontified t help-echo cider--help-echo)) . -2917) (undo-tree-id77 . -1) (#("l" 0 1 (cider-locals ("pars" "pars" "cur-puslupdate-power") fontified t help-echo cider--help-echo)) . -2918) (undo-tree-id78 . -1) 2919 (2910 . 2919) (#("[" 0 1 (cider-locals ("pars" "pars" "update-power") fontified t help-echo cider--help-echo)) . -2910) (undo-tree-id79 . -1) (#("c" 0 1 (cider-locals ("pars" "pars" "cupdate-power") fontified t help-echo cider--help-echo)) . -2911) (undo-tree-id80 . -1) 2912 (#("u" 0 1 (cider-locals ("pars" "pars" "cuupdate-power") fontified t help-echo cider--help-echo)) . -2912) (undo-tree-id81 . -1) (#("r" 0 1 (cider-locals ("pars" "pars" "curupdate-power") fontified t help-echo cider--help-echo)) . -2913) (undo-tree-id82 . -1) 2914 (2906 . 2914) (t 25529 56518 147806 559000)) nil (25529 57011 460678 691000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3030 . 3031) (nil fontified nil 3000 . 3031) (3000 . 3031) 2999) nil (25529 57011 460342 126000) 0 nil])
([nil nil ((#("-" 0 1 (face clojure-keyword-face cider-locals ("pars" "kettler-state" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . 2928)) nil (25529 57011 460324 526000) 0 nil])
([nil nil ((#("target " 0 6 (face clojure-keyword-face cider-locals ("pars" "kettler-state" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo) 6 7 (cider-locals ("pars" "kettler-state" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . 2928)) nil (25529 57011 460313 281000) 0 nil])
([nil nil ((#("j" 0 1 (cider-locals ("pars" "pars" "update-power" "ddddjkj" "target-pulse" "cur-pulse") help-echo cider--help-echo fontified t)) . -3030) (undo-tree-id63 . -1) (3028 . 3031) (#("j" 0 1 (cider-locals ("pars" "pars" "update-power" "ddddj" "target-pulse" "cur-pulse") help-echo cider--help-echo fontified t)) . -3028) (undo-tree-id64 . -1) (3026 . 3029) (3024 . 3026) (2928 . 2929)) nil (25529 57011 460297 218000) 0 nil])
([nil nil ((#("ddddjk
" 0 6 (cider-locals ("pars" "pars" "update-power" "ddddjk" "target-pulse" "cur-pulse") help-echo cider--help-echo fontified t) 6 7 (cider-locals ("pars" "pars" "update-power" "ddddjk" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . 3024) (undo-tree-id61 . 1) (undo-tree-id62 . -5) 3029) nil (25529 57011 460247 142000) 0 nil])
([nil nil ((#("j" 0 1 (cider-locals ("pars" "pars" "update-power" "new-power" "kettler-state" "mu/set-power" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -3177) (undo-tree-id40 . -1) (3177 . 3178) (3175 . 3177) (3157 . 3174) (3149 . 3157) (#("t" 0 1 (cider-locals ("pars" "pars" "kettler-state" "update-power" "mu/set-powert" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -3149) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#(" " 0 1 (cider-locals ("pars" "pars" "kettler-state" "update-power" "mu/set-powert" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -3150) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 3151 (3140 . 3151) (3136 . 3140) (3101 . 3136) (#(" " 0 1 (cider-locals ("pars" "pars" "update-power" "new-power" "target-pulse" "cur-pulse") fontified nil help-echo cider--help-echo)) . 3100) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (3101 . 3102) (#("i" 0 1 (cider-locals ("pars" "kettler-state" "i" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -3102) (undo-tree-id48 . -1) 3103 (3102 . 3103) (3090 . 3099) (3089 . 3090) (#("c" 0 1 (cider-locals ("pars" "pars" "update-power" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -3077) (undo-tree-id49 . -1) (#("u" 0 1 (cider-locals ("pars" "pars" "update-power" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -3078) (undo-tree-id50 . -1) (#("r" 0 1 (cider-locals ("pars" "pars" "update-power" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -3079) (undo-tree-id51 . -1) (#("-" 0 1 (cider-locals ("pars" "pars" "update-power" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -3080) (undo-tree-id52 . -1) (#("p" 0 1 (cider-locals ("pars" "pars" "update-power" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -3081) (undo-tree-id53 . -1) (#("u" 0 1 (cider-locals ("pars" "pars" "update-power" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -3082) (undo-tree-id54 . -1) (#("l" 0 1 (cider-locals ("pars" "pars" "update-power" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -3083) (undo-tree-id55 . -1) (#("s" 0 1 (cider-locals ("pars" "pars" "update-power" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -3084) (undo-tree-id56 . -1) (#("e" 0 1 (cider-locals ("pars" "pars" "update-power" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -3085) (undo-tree-id57 . -1) (#(" " 0 1 (cider-locals ("pars" "pars" "update-power" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -3086) (undo-tree-id58 . -1) 3087 (3097 . 3100) (3082 . 3097) (#("i" 0 1 (cider-locals ("pars" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -3082) (undo-tree-id59 . -1) 3083 (3077 . 3083) (3070 . 3077) (#("," 0 1 (cider-locals ("pars" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -3070) (undo-tree-id60 . -1) 3071 (3068 . 3071)) nil (25529 57011 460167 34000) 0 nil])
([nil nil ((#("dd
" 0 2 (cider-locals ("pars" "pars" "update-power" "new-power" "kettler-state" "mu/set-power" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo) 2 3 (cider-locals ("pars" "pars" "update-power" "new-power" "kettler-state" "mu/set-power" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . 3175) (undo-tree-id37 . 1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) 3176) nil (25529 57011 459824 881000) 0 nil])
([nil nil ((#("                                   update-power kettler-state pars)
" 0 67 (cider-locals ("pars" "kettler-state" "new-power" "kettler-state" "mu/set-power" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo) 67 68 (cider-locals ("pars" "kettler-state" "new-power" "kettler-state" "mu/set-power" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . 3175) (undo-tree-id33 . 68) (undo-tree-id34 . -1) (undo-tree-id35 . -67) (undo-tree-id36 . -1) 3176) nil (25529 57011 459769 776000) 0 nil])
([nil nil ((3174 . 3175)) nil (25529 57011 459704 754000) 0 nil])
([nil nil ((3100 . 3101)) nil (25529 57011 459693 719000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("pars" "new-power" "target-pulse" "cur-pulse") fontified t help-echo cider--help-echo)) . -3175) (undo-tree-id29 . -1) (undo-tree-id30 . 1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 3176) nil (25529 57011 459677 656000) 0 nil])
([nil nil ((3175 . 3176)) nil (25529 57011 459571 427000) 0 nil])
([nil nil ((2285 . 2286) (t 25529 57011 474252 833000)) nil (25529 57228 421214 809000) 0 nil])
([nil nil ((#("1" 0 1 (cider-locals ("pid/get-pid-control") fontified t help-echo cider--help-echo)) . -2288) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (#("." 0 1 (cider-locals ("pid/get-pid-control") fontified t help-echo cider--help-echo)) . -2289) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (#("4" 0 1 (cider-locals ("pid/get-pid-control") fontified t help-echo cider--help-echo)) . -2290) (undo-tree-id87 . -1) (undo-tree-id88 . -1) 2291 (t 25529 57228 435328 685000)) nil (25529 57295 99439 46000) 0 nil])
([nil nil ((2288 . 2289)) nil (25529 57295 99297 897000) 0 nil])
([nil nil ((#("0" 0 1 (cider-locals ("pid/get-pid-control") fontified t help-echo cider--help-echo)) . -2285) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) 2286 (t 25529 57295 111659 315000)) nil (25529 57558 567877 183000) 0 nil])
([nil nil ((#("0" 0 1 (cider-locals ("pid/get-pid-control") fontified t help-echo cider--help-echo)) . -2287) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) 2288) nil (25529 57558 567750 770000) 0 nil])
([nil nil ((2287 . 2290)) nil (25529 57702 621786 67000) 0 nil])
([nil nil ((#("                :on-success #(mu/update-kettler kettler-state sim-pars)
" 0 16 (cider-locals ("pars") fontified t help-echo cider--help-echo) 16 17 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo) 17 27 (face clojure-keyword-face cider-locals ("pars") fontified t help-echo cider--help-echo) 27 30 (cider-locals ("pars") fontified t help-echo cider--help-echo) 30 32 (face font-lock-type-face cider-locals ("pars") fontified t help-echo cider--help-echo) 32 72 (cider-locals ("pars") fontified t help-echo cider--help-echo)) . 2728) (undo-tree-id120 . -70) (undo-tree-id121 . -29) (undo-tree-id122 . 1) (undo-tree-id123 . -29) (undo-tree-id124 . -70) (undo-tree-id125 . -29) (undo-tree-id126 . 43) (undo-tree-id127 . -30) (undo-tree-id128 . 2) (undo-tree-id129 . -71) 2757 (t 25529 57558 584965 809000)) nil (25529 58421 635687 923000) 0 nil] [nil nil ((#("4" 0 1 (cider-locals ("pid/get-pid-control") fontified t help-echo cider--help-echo)) . -2289) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) 2290 (t 25529 57558 584965 809000)) ((2289 . 2290)) (25529 57702 620373 318000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3430 . 3431) (#("
" 0 1 (fontified nil cider-locals ("pars"))) . -3486) (3414 . 3487) 3413) nil (25529 58421 635537 765000) 0 nil])
nil
([nil nil ((#(":" 0 1 (face clojure-keyword-face cider-locals ("start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t)) . 3431)) nil (25529 58421 635469 41000) 0 nil])
([nil nil ((#("o" 0 1 (cider-locals ("start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t)) . 3431)) nil (25529 58421 635457 377000) 0 nil])
([nil nil ((#("n" 0 1 (cider-locals ("start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t)) . 3431)) nil (25529 58421 635446 552000) 0 nil])
([nil nil ((#("-" 0 1 (cider-locals ("start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t)) . 3431)) nil (25529 58421 635435 447000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals ("start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t)) . 3431)) nil (25529 58421 635424 482000) 0 nil])
([nil nil ((#("u" 0 1 (cider-locals ("start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t)) . 3431)) nil (25529 58421 635413 587000) 0 nil])
([nil nil ((#("c" 0 1 (cider-locals ("start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t)) . 3431)) nil (25529 58421 635402 482000) 0 nil])
([nil nil ((#("c" 0 1 (cider-locals ("start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t)) . 3431)) nil (25529 58421 635391 587000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t)) . 3431)) nil (25529 58421 635380 412000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals ("start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t)) . 3431)) nil (25529 58421 635368 888000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals ("start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t)) . 3431)) nil (25529 58421 635357 504000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t)) . 3431)) nil (25529 58421 635346 50000) 0 nil])
([nil nil ((#("#" 0 1 (cider-locals ("start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t)) . 3431)) nil (25529 58421 635333 898000) 0 nil])
([nil nil ((#("        " 0 7 (cider-locals ("start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t) 7 8 (cider-locals ("start-state" "pars" "control" "sm") help-echo cider--help-echo rear-nonsticky t fontified t)) . -3423) (undo-tree-id114 . -8) (undo-tree-id115 . -8) (undo-tree-id116 . -8) (undo-tree-id117 . -8) (undo-tree-id118 . -8) (undo-tree-id119 . -8) 3431) nil (25529 58421 635307 79000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3520 . 3521) (#("
" 0 1 (fontified nil cider-locals nil)) . -3812) (3520 . 3813) 3519 (t 25529 58421 653245 533000)) nil (25529 58636 817312 911000) 0 nil])
([nil nil ((3544 . 3547) (3527 . 3533) (#("statemachine" 0 12 (face font-lock-function-name-face cider-locals ("start-state" "pars" "control") help-echo cider--help-echo fontified t)) . 3527)) nil (25529 58636 817292 727000) 0 nil])
([nil nil ((#("  [dt]control pars start-state]
" 0 32 (cider-locals ("start-state" "pars" "dtcontrol") help-echo cider--help-echo fontified t)) . 3541) (undo-tree-id158 . 29) (undo-tree-id159 . -2) (undo-tree-id160 . 30) (undo-tree-id161 . -3) (undo-tree-id162 . 27) (undo-tree-id163 . -6) 3543) nil (25529 58636 817272 961000) 0 nil])
([nil nil ((3548 . 3549) (3543 . 3545) (3541 . 3543) (3541 . 3542) 3543) nil (25529 58636 817181 679000) 0 nil])
([nil nil ((#("  V(let [sm (state-machine (control pars) start-state)]
" 0 4 (cider-locals nil fontified t help-echo cider--help-echo) 4 7 (face font-lock-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 7 55 (cider-locals ("sm") fontified t help-echo cider--help-echo) 55 56 (cider-locals ("sm") fontified t help-echo cider--help-echo)) . 3546) (undo-tree-id151 . -2) (undo-tree-id152 . 53) (undo-tree-id153 . -2) (undo-tree-id154 . -2) (undo-tree-id155 . -2) (undo-tree-id156 . -2) (undo-tree-id157 . -2) 3548) nil (25529 58636 817157 653000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3726) (undo-tree-id148 . -1) (undo-tree-id149 . 1) (undo-tree-id150 . -1)) nil (25529 58636 817051 146000) 0 nil])
([nil nil ((#("  " 0 2 (cider-locals nil fontified t help-echo cider--help-echo)) . -3674) (#("  " 0 2 (cider-locals nil fontified t help-echo cider--help-echo)) . -3625) (#("  " 0 2 (cider-locals nil fontified t help-echo cider--help-echo)) . -3600) (#("  " 0 2 (cider-locals nil fontified t help-echo cider--help-echo)) . -3590) (#("  " 0 2 (cider-locals nil fontified t help-echo cider--help-echo)) . -3548) 3540) nil (25529 58636 816994 365000) 0 nil])
([nil nil ((#("(" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674) (undo-tree-id146 . 1) (undo-tree-id147 . -1)) nil (25529 58636 816969 850000) 0 nil])
([nil nil ((#("u" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674)) nil (25529 58636 816930 530000) 0 nil])
([nil nil ((#("p" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674)) nil (25529 58636 816918 866000) 0 nil])
([nil nil ((#("d" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674)) nil (25529 58636 816907 971000) 0 nil])
([nil nil ((#("a" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674)) nil (25529 58636 816896 936000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674)) nil (25529 58636 816885 622000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674)) nil (25529 58636 816874 517000) 0 nil])
([nil nil ((#("-" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674)) nil (25529 58636 816862 853000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674)) nil (25529 58636 816851 190000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674)) nil (25529 58636 816839 876000) 0 nil])
([nil nil ((#("a" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674)) nil (25529 58636 816828 701000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674)) nil (25529 58636 816817 596000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674)) nil (25529 58636 816805 723000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674)) nil (25529 58636 816793 990000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674)) nil (25529 58636 816782 47000) 0 nil])
([nil nil ((#("m" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674)) nil (25529 58636 816770 453000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674) (undo-tree-id144 . 1) (undo-tree-id145 . -1)) nil (25529 58636 816755 996000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674) (undo-tree-id142 . 1) (undo-tree-id143 . -1)) nil (25529 58636 816715 558000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3674) (undo-tree-id140 . 1) (undo-tree-id141 . -1)) nil (25529 58636 816675 190000) 0 nil])
([nil nil ((3667 . 3670)) nil (25529 58636 816636 638000) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3670)) nil (25529 58636 816625 253000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -3667) (undo-tree-id130 . -1) (undo-tree-id131 . 1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#(")" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -3668) (undo-tree-id134 . -1) (undo-tree-id135 . 1) (undo-tree-id136 . -1) (#(")" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -3669) (undo-tree-id137 . -1) (undo-tree-id138 . 1) (undo-tree-id139 . -1) 3670) nil (25529 58636 816604 161000) 0 nil])
([nil nil ((3667 . 3669)) nil (25529 58636 816416 79000) 0 nil])
([nil nil ((3699 . 3700) (t 25529 58636 838312 578000)) nil (25529 58697 77228 506000) 0 nil])
([nil nil ((#("O" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 3699)) nil (25529 58697 77214 259000) 0 nil])
([nil nil ((3699 . 3700)) nil (25529 58697 77203 363000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4254 . 4255) (#("
" 0 1 (fontified nil cider-locals ("power" "args"))) . -4318) (4252 . 4319) 4234) nil (25529 58697 77189 605000) 0 nil])
([nil nil ((4277 . 4280) (4264 . 4270) (#("statemachine" 0 12 (cider-locals ("power" "args") help-echo cider--help-echo fontified t)) . 4264)) nil (25529 58697 77170 608000) 0 nil])
([nil nil ((#("d" 0 1 (cider-locals ("power" "args") help-echo cider--help-echo fontified t)) . 4277)) nil (25529 58697 77154 614000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals ("power" "args") help-echo cider--help-echo fontified t)) . 4277) (undo-tree-id171 . 1)) nil (25529 58697 77141 274000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("power" "args") help-echo cider--help-echo fontified t)) . 4277) (undo-tree-id168 . 1) (undo-tree-id169 . 1) (undo-tree-id170 . -1)) nil (25529 58697 77112 220000) 0 nil])
([nil nil ((#(" kettler-control demo-pars :start" 0 27 (cider-locals ("power" "args") help-echo cider--help-echo fontified t) 27 28 (face clojure-keyword-face cider-locals ("power" "args") help-echo cider--help-echo fontified t) 28 33 (face clojure-keyword-face cider-locals ("power" "args") help-echo cider--help-echo fontified t)) . 4277) (undo-tree-id167 . 33)) nil (25529 58697 77043 497000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("power" "args") help-echo cider--help-echo fontified t)) . 4277) (undo-tree-id164 . 1) (undo-tree-id165 . 1) (undo-tree-id166 . -1)) nil (25529 58697 77013 814000) 0 nil])
([nil nil ((4278 . 4279)) nil (25529 58697 76919 319000) 0 nil])
([nil nil ((3544 . 3548) (t 25529 58697 98611 393000)) nil (25529 58742 665000 248000) 0 nil])
([nil nil ((4281 . 4291)) nil (25529 58742 664967 74000) 0 nil])
([nil nil ((#("        (mu/update-kettler kettler-state sim-pars)
" 0 8 (cider-locals ("pars" "start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t) 8 9 (cider-locals ("pars" "start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t) 9 11 (face font-lock-type-face cider-locals ("pars" "start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t) 11 50 (cider-locals ("pars" "start-state" "pars" "control" "sm") help-echo cider--help-echo fontified t) 50 51 (cider-locals ("pars" "start-state" "pars" "control" "sm") fontified t help-echo cider--help-echo)) . 3415) (undo-tree-id172 . 30) (undo-tree-id173 . -8) (undo-tree-id174 . -20) (undo-tree-id175 . -20) 3435 (t 25529 58742 686837 453000)) nil (25529 58857 281161 8000) 0 nil])
([nil nil ((#("(def sim-pars {
               :time-inc 0.1
               :relax-time 7
               :max-pulse 170
               :ctrl-treshold 10
               :pulse-perf-drift 0.08
               :max-drift 20
               :rest-pulse 70})

;; labels taken from serial :pulse :rpm :speed :dist :req-power :energy :time :power
(def kettler-state (atom {
                          :pulse 70
                          :pulse-target 145
                          :power 80
                          :req-power 80
                          :time 0 
                          :rpm 100
                          :speed 10
                          :dist 0
                          :energy 0}))


(def demo-pars (ref 
                {
                 :mode \"hr-target\"
                 :pulse-target 135
                 :buf {:sum 0 :prev-dev 0 :response 0}
                 }))
" 0 1 (cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 1 4 (face font-lock-keyword-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 4 5 (cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 5 13 (face font-lock-variable-name-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 13 31 (cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 31 32 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 32 40 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 40 60 (cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 60 61 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 61 71 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 71 89 (cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 89 90 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 90 99 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 99 119 (cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 119 120 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 120 133 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 133 137 (cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 137 152 (cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 152 153 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 153 169 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 169 190 (cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 190 191 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 191 200 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 200 219 (cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 219 220 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 220 230 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 230 235 (cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 235 237 (cider-locals nil fontified t help-echo cider--help-echo) 237 240 (face font-lock-comment-delimiter-face cider-locals nil fontified t help-echo cider--help-echo) 240 322 (face font-lock-comment-face cider-locals nil fontified t help-echo cider--help-echo) 322 323 (cider-locals nil fontified t help-echo cider--help-echo) 323 326 (face font-lock-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 326 327 (cider-locals ("atom") fontified t help-echo cider--help-echo) 327 340 (face font-lock-variable-name-face cider-locals ("atom") fontified t help-echo cider--help-echo) 340 375 (cider-locals ("atom") fontified t help-echo cider--help-echo) 375 376 (face clojure-keyword-face cider-locals ("atom") fontified t help-echo cider--help-echo) 376 381 (face clojure-keyword-face cider-locals ("atom") fontified t help-echo cider--help-echo) 381 397 (cider-locals ("atom") fontified t help-echo cider--help-echo) 397 399 (cider-locals ("atom") fontified t help-echo cider--help-echo) 399 411 (cider-locals ("atom") fontified t help-echo cider--help-echo) 411 412 (face clojure-keyword-face cider-locals ("atom") fontified t help-echo cider--help-echo) 412 424 (face clojure-keyword-face cider-locals ("atom") fontified t help-echo cider--help-echo) 424 449 (cider-locals ("atom") fontified t help-echo cider--help-echo) 449 455 (cider-locals ("atom") help-echo cider--help-echo fontified t) 455 456 (face clojure-keyword-face cider-locals ("atom") help-echo cider--help-echo fontified t) 456 461 (face clojure-keyword-face cider-locals ("atom") help-echo cider--help-echo fontified t) 461 476 (cider-locals ("atom") help-echo cider--help-echo fontified t) 476 491 (fontified t cider-locals ("atom")) 491 492 (face clojure-keyword-face fontified t cider-locals ("atom")) 492 501 (face clojure-keyword-face fontified t cider-locals ("atom")) 501 531 (fontified t cider-locals ("atom")) 531 532 (face clojure-keyword-face fontified t cider-locals ("atom")) 532 536 (face clojure-keyword-face fontified t cider-locals ("atom")) 536 566 (fontified t cider-locals ("atom")) 566 567 (face clojure-keyword-face fontified t cider-locals ("atom")) 567 570 (face clojure-keyword-face fontified t cider-locals ("atom")) 570 601 (fontified t cider-locals ("atom")) 601 602 (face clojure-keyword-face fontified t cider-locals ("atom")) 602 607 (face clojure-keyword-face fontified t cider-locals ("atom")) 607 637 (fontified t cider-locals ("atom")) 637 638 (face clojure-keyword-face fontified t cider-locals ("atom")) 638 642 (face clojure-keyword-face fontified t cider-locals ("atom")) 642 645 (fontified t cider-locals ("atom")) 645 671 (cider-locals ("atom") help-echo cider--help-echo fontified t) 671 672 (face clojure-keyword-face cider-locals ("atom") help-echo cider--help-echo fontified t) 672 678 (face clojure-keyword-face cider-locals ("atom") help-echo cider--help-echo fontified t) 678 683 (cider-locals ("atom") help-echo cider--help-echo fontified t) 683 684 (cider-locals ("atom") help-echo cider--help-echo fontified t) 684 687 (cider-locals ("atom") fontified t help-echo cider--help-echo) 687 690 (face font-lock-keyword-face cider-locals ("atom") fontified t help-echo cider--help-echo) 690 691 (cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 691 700 (face font-lock-variable-name-face cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 700 742 (cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 742 743 (face clojure-keyword-face cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 743 747 (face clojure-keyword-face cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 747 748 (cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 748 759 (face font-lock-string-face cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 759 777 (cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 777 778 (face clojure-keyword-face cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 778 790 (face clojure-keyword-face cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 790 812 (cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 812 813 (face clojure-keyword-face cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 813 816 (face clojure-keyword-face cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 816 818 (cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 818 819 (face clojure-keyword-face cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 819 822 (face clojure-keyword-face cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 822 825 (cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 825 826 (face clojure-keyword-face cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 826 834 (face clojure-keyword-face cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 834 837 (cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 837 838 (face clojure-keyword-face cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 838 846 (face clojure-keyword-face cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 846 870 (cider-locals ("atom" "ref") fontified t help-echo cider--help-echo) 870 871 (cider-locals nil fontified t help-echo cider--help-echo)) . 1104) (undo-tree-id196 . -864) (undo-tree-id197 . -14) (undo-tree-id198 . -864) (undo-tree-id199 . -864) (undo-tree-id200 . -505) (undo-tree-id201 . -14) (undo-tree-id202 . -864) 1968 (t 25529 58857 303405 806000)) nil (25529 59367 642764 895000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1320 . 1321) (#("
" 0 1 (fontified nil cider-locals nil)) . -2191) (1320 . 2192)) nil (25529 59367 642658 247000) 0 nil])
([nil nil ((#("(def sim-pars {
               :time-inc 0.1
               :relax-time 7
               :max-pulse 170
               :ctrl-treshold 10
               :pulse-perf-drift 0.08
               :max-drift 20
               :rest-pulse 70})

;; labels taken from serial :pulse :rpm :speed :dist :req-power :energy :time :power
(def kettler-state (atom {
                          :pulse 70
                          :pulse-target 145
                          :power 80
                          :req-power 80
                          :time 0 
                          :rpm 100
                          :speed 10
                          :dist 0
                          :energy 0}))


(def demo-pars (ref 
                {
                 :mode \"hr-target\"
                 :pulse-target 135
                 :buf {:sum 0 :prev-dev 0 :response 0}
                 }))
(def my-buf (ref {:dev-sum 0 :prev-dev 0})) 
(def my-pid (pid/get-pid-control my-buf 1.70 0.03 1.4))
" 0 1 (cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 1 4 (face font-lock-keyword-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 4 5 (cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 5 13 (face font-lock-variable-name-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 13 31 (cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 31 32 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 32 40 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 40 60 (cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 60 61 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 61 71 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 71 89 (cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 89 90 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 90 99 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 99 119 (cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 119 120 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 120 133 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 133 137 (cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 137 152 (cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 152 153 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 153 169 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 169 190 (cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 190 191 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 191 200 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 200 219 (cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 219 220 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 220 230 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 230 235 (cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 235 237 (cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 237 240 (face font-lock-comment-delimiter-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 240 322 (face font-lock-comment-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 322 323 (cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 323 326 (face font-lock-keyword-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 326 327 (cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 327 340 (face font-lock-variable-name-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 340 375 (cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 375 376 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 376 381 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 381 397 (cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 397 399 (cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 399 411 (cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 411 412 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 412 424 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 424 449 (cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 449 455 (cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 455 456 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 456 461 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 461 476 (cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 476 491 (cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 491 492 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 492 501 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 501 531 (cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 531 532 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 532 536 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 536 566 (cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 566 567 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 567 570 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 570 601 (cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 601 602 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 602 607 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 607 637 (cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 637 638 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 638 642 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 642 645 (cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 645 671 (cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 671 672 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 672 678 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 678 683 (cider-locals ("ts" "on-success" "transition" "conds" "atom") help-echo cider--help-echo fontified t) 683 684 (cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 684 687 (cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 687 690 (face font-lock-keyword-face cider-locals ("ts" "on-success" "transition" "conds") help-echo cider--help-echo fontified t) 690 691 (cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 691 700 (face font-lock-variable-name-face cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 700 742 (cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 742 743 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 743 747 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 747 748 (cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 748 759 (face font-lock-string-face cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 759 777 (cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 777 778 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 778 790 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 790 812 (cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 812 813 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 813 816 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 816 818 (cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 818 819 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 819 822 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 822 825 (cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 825 826 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 826 834 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 834 837 (cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 837 838 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 838 846 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 846 870 (cider-locals ("ts" "on-success" "transition" "conds" "ref") help-echo cider--help-echo fontified t) 870 871 (cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 871 872 (cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 872 875 (face font-lock-keyword-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 875 876 (cider-locals ("ts" "on-success" "transition" "conds" "ref") fontified t help-echo cider--help-echo) 876 882 (face font-lock-variable-name-face cider-locals ("ts" "on-success" "transition" "conds" "ref") fontified t help-echo cider--help-echo) 882 889 (cider-locals ("ts" "on-success" "transition" "conds" "ref") fontified t help-echo cider--help-echo) 889 890 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "ref") fontified t help-echo cider--help-echo) 890 897 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "ref") fontified t help-echo cider--help-echo) 897 900 (cider-locals ("ts" "on-success" "transition" "conds" "ref") fontified t help-echo cider--help-echo) 900 901 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "ref") fontified t help-echo cider--help-echo) 901 909 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "ref") fontified t help-echo cider--help-echo) 909 914 (cider-locals ("ts" "on-success" "transition" "conds" "ref") fontified t help-echo cider--help-echo) 914 916 (cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 916 917 (cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 917 920 (face font-lock-keyword-face cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo) 920 921 (cider-locals ("ts" "on-success" "transition" "conds" "pid/get-pid-control") fontified t help-echo cider--help-echo) 921 927 (face font-lock-variable-name-face cider-locals ("ts" "on-success" "transition" "conds" "pid/get-pid-control") fontified t help-echo cider--help-echo) 927 929 (cider-locals ("ts" "on-success" "transition" "conds" "pid/get-pid-control") fontified t help-echo cider--help-echo) 929 932 (face font-lock-type-face cider-locals ("ts" "on-success" "transition" "conds" "pid/get-pid-control") fontified t help-echo cider--help-echo) 932 956 (cider-locals ("ts" "on-success" "transition" "conds" "pid/get-pid-control") fontified t help-echo cider--help-echo) 956 968 (cider-locals ("ts" "on-success" "transition" "conds" "pid/get-pid-control") fontified t help-echo cider--help-echo) 968 969 (cider-locals ("ts" "on-success" "transition" "conds" "pid/get-pid-control") fontified t help-echo cider--help-echo) 969 970 (cider-locals ("ts" "on-success" "transition" "conds" "pid/get-pid-control") fontified t help-echo cider--help-echo) 970 971 (cider-locals ("ts" "on-success" "transition" "conds" "pid/get-pid-control") fontified t help-echo cider--help-echo) 971 972 (cider-locals ("ts" "on-success" "transition" "conds") fontified t help-echo cider--help-echo)) . 1321) (undo-tree-id176 . -916) (undo-tree-id177 . -870) (undo-tree-id178 . -916) (undo-tree-id179 . -916) (undo-tree-id180 . -956) (undo-tree-id181 . -958) (undo-tree-id182 . -956) (undo-tree-id183 . -964) (undo-tree-id184 . -966) (undo-tree-id185 . -966) (undo-tree-id186 . -966) (undo-tree-id187 . -966) (undo-tree-id188 . -969) (undo-tree-id189 . -916) (undo-tree-id190 . -175) (undo-tree-id191 . -916) (undo-tree-id192 . 56) (undo-tree-id193 . -917) (undo-tree-id194 . 2) (undo-tree-id195 . -971) 2237) nil (25529 59367 642631 847000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3213 . 3214) (#("
" 0 1 (fontified nil cider-locals ("ts" "on-success" "transition" "conds"))) . -4185) (3213 . 4186) 3203) nil (25529 59367 642333 765000) 0 nil])
([nil nil ((4182 . 4184) (4135 . 4137) (4129 . 4131) (4072 . 4074) (4035 . 4037) (3998 . 4000) (3977 . 3979) (3938 . 3940) (3921 . 3923) (3885 . 3887) (3847 . 3849) (3810 . 3812) (3773 . 3775) (3731 . 3733) (3693 . 3695) (3647 . 3649) (3609 . 3611) (3554 . 3556) (3467 . 3469) (3432 . 3449) (#("               " 0 15 (cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args") help-echo cider--help-echo fontified t)) . 3432) (3401 . 3418) (#("               " 0 15 (cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args") help-echo cider--help-echo fontified t)) . 3401) (3361 . 3378) (#("               " 0 15 (cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args") help-echo cider--help-echo fontified t)) . 3361) (3326 . 3343) (#("               " 0 15 (cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args") help-echo cider--help-echo fontified t)) . 3326) (3294 . 3311) (#("               " 0 15 (cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args") help-echo cider--help-echo fontified t)) . 3294) (3263 . 3280) (#("               " 0 15 (cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args") help-echo cider--help-echo fontified t)) . 3263) (3232 . 3249) (#("               " 0 15 (cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args") help-echo cider--help-echo fontified t)) . 3232) (3214 . 3216) 4130) nil (25529 59367 642275 727000) 0 nil])
([nil nil ((#("                    :buf {:sum 0 :prev-dev 0 :response 0}
" 0 20 (cider-locals ("ts" "on-success" "transition" "conds" "hr-target") fontified t help-echo cider--help-echo) 20 21 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "hr-target") fontified t help-echo cider--help-echo) 21 24 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "hr-target") fontified t help-echo cider--help-echo) 24 26 (cider-locals ("ts" "on-success" "transition" "conds" "hr-target") fontified t help-echo cider--help-echo) 26 27 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "hr-target") fontified t help-echo cider--help-echo) 27 30 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "hr-target") fontified t help-echo cider--help-echo) 30 33 (cider-locals ("ts" "on-success" "transition" "conds" "hr-target") fontified t help-echo cider--help-echo) 33 34 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "hr-target") fontified t help-echo cider--help-echo) 34 42 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "hr-target") fontified t help-echo cider--help-echo) 42 45 (cider-locals ("ts" "on-success" "transition" "conds" "hr-target") fontified t help-echo cider--help-echo) 45 46 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "hr-target") fontified t help-echo cider--help-echo) 46 54 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "hr-target") fontified t help-echo cider--help-echo) 54 58 (cider-locals ("ts" "on-success" "transition" "conds" "hr-target") fontified t help-echo cider--help-echo)) . 2989) (undo-tree-id205 . -17) 3006 (t 25529 59367 677936 616000)) nil (25529 59484 364595 935000) 0 nil])
([nil nil ((#("                   :buf {:sum 0 :prev-dev 0 :response 0}
" 0 19 (cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args" "ref") fontified t help-echo cider--help-echo) 19 20 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args" "ref") fontified t help-echo cider--help-echo) 20 23 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args" "ref") fontified t help-echo cider--help-echo) 23 25 (cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args" "ref") fontified t help-echo cider--help-echo) 25 26 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args" "ref") fontified t help-echo cider--help-echo) 26 29 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args" "ref") fontified t help-echo cider--help-echo) 29 32 (cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args" "ref") fontified t help-echo cider--help-echo) 32 33 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args" "ref") fontified t help-echo cider--help-echo) 33 41 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args" "ref") fontified t help-echo cider--help-echo) 41 44 (cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args" "ref") fontified t help-echo cider--help-echo) 44 45 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args" "ref") fontified t help-echo cider--help-echo) 45 53 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args" "ref") fontified t help-echo cider--help-echo) 53 57 (cider-locals ("ts" "on-success" "transition" "conds" "hr-target" "args" "ref") fontified t help-echo cider--help-echo)) . 3997) (undo-tree-id203 . -19) (undo-tree-id204 . -19) 4016) nil (25529 59484 364552 354000) 0 nil])
([nil nil ((2705 . 2710) (t 25529 59484 394515 383000)) nil (25529 60304 369716 650000) 0 nil])
([nil nil ((#("d" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "pars" "power") fontified t help-echo cider--help-echo)) . -2731) (undo-tree-id221 . -1) (#("e" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "pars" "power") fontified t help-echo cider--help-echo)) . -2732) (undo-tree-id222 . -1) (#("m" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "pars" "power") fontified t help-echo cider--help-echo)) . -2733) (undo-tree-id223 . -1) (#("o" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "pars" "power") fontified t help-echo cider--help-echo)) . -2734) (undo-tree-id224 . -1) (#("-" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "pars" "power") fontified t help-echo cider--help-echo)) . -2735) (undo-tree-id225 . -1) 2736) nil (25529 60304 369694 859000) 0 nil])
([nil nil ((2806 . 2811)) nil (25529 60304 369609 443000) 0 nil])
([nil nil ((#("d" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "pars" "power" "pars" "hr-target") fontified t help-echo cider--help-echo)) . -2880) (undo-tree-id216 . -1) (#("e" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "pars" "power" "pars" "hr-target") fontified t help-echo cider--help-echo)) . -2881) (undo-tree-id217 . -1) (#("m" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "pars" "power" "pars" "hr-target") fontified t help-echo cider--help-echo)) . -2882) (undo-tree-id218 . -1) (#("o" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "pars" "power" "pars" "hr-target") fontified t help-echo cider--help-echo)) . -2883) (undo-tree-id219 . -1) (#("-" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "pars" "power" "pars" "hr-target") fontified t help-echo cider--help-echo)) . -2884) (undo-tree-id220 . -1) 2885) nil (25529 60304 369589 119000) 0 nil])
([nil nil ((3035 . 3039)) nil (25529 60304 369504 542000) 0 nil])
([nil nil ((#("d" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "pars" "power" "pars" "hr-target" "pars") fontified t help-echo cider--help-echo)) . -3060) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("e" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "pars" "power" "pars" "hr-target" "pars") fontified t help-echo cider--help-echo)) . -3061) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (#("m" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "pars" "power" "pars" "hr-target" "pars") fontified t help-echo cider--help-echo)) . -3062) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (#("o" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "pars" "power" "pars" "hr-target" "pars") fontified t help-echo cider--help-echo)) . -3063) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (#("-" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "pars" "power" "pars" "hr-target" "pars") fontified t help-echo cider--help-echo)) . -3064) (undo-tree-id214 . -1) (undo-tree-id215 . -1) 3065) nil (25529 60304 369470 249000) 0 nil])
([nil nil ((4142 . 4146) (t 25529 60304 398581 563000)) nil (25529 60344 378014 703000) 0 nil])
([nil nil ((#("," 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "pars" "power" "pars" "hr-target" "pars" "args") fontified t help-echo cider--help-echo)) . -4145) (undo-tree-id226 . -1) (undo-tree-id227 . -1) 4146) nil (25529 60344 377997 173000) 0 nil])
([nil nil ((4145 . 4152)) nil (25529 60344 377914 132000) 0 nil])
([nil nil ((2253 . 2254) (t 25529 60344 406779 953000)) nil (25529 60408 770943 722000) 0 nil])
([nil nil ((#("i" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -2253) (undo-tree-id228 . -1) 2254) nil (25529 60408 770926 471000) 0 nil])
([nil nil ((2253 . 2254)) nil (25529 60408 770855 861000) 0 nil])
([nil nil ((#("G" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo)) . -1503) (undo-tree-id229 . -1) (undo-tree-id230 . -1) 1504 (1503 . 1504) (t 25529 60408 803099 277000)) nil (25529 60424 820402 37000) 0 nil])
([nil nil ((4109 . 4110) (#("3" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "args" "pid/get-pid-control") help-echo cider--help-echo fontified t)) . 4109) (4109 . 4110) (#("1" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "args" "atom" "pid/get-pid-control") fontified t help-echo cider--help-echo)) . 4109)) nil (25529 60424 820310 195000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2502 . 2503) (#("
" 0 1 (fontified nil cider-locals ("pars" "state" "dist-inc" "energy-inc" "pulse-inc" "eq-pulse" "cur-dist" "cur-time" "cur-pulse" "cur-energy" "cur-power" "args" "atom" "n"))) . -2591) (2498 . 2592) 2497 (t 25529 60424 851178 855000)) nil (25529 60683 200915 934000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2591 . 2592) (#("
" 0 1 (fontified nil cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars"))) . -2773) (2591 . 2774) 2499) nil (25529 60683 200894 563000) 0 nil])
([nil nil ((2602 . 2612) (2599 . 2602) (#("m" 0 1 (face font-lock-function-name-face cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "pars") help-echo cider--help-echo fontified t)) . -2599) (undo-tree-id242 . -1) (#("o" 0 1 (face font-lock-function-name-face cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "pars") help-echo cider--help-echo fontified t)) . -2600) (undo-tree-id243 . -1) (#("c" 0 1 (face font-lock-function-name-face cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "pars") help-echo cider--help-echo fontified t)) . -2601) (undo-tree-id244 . -1) (#("k" 0 1 (face font-lock-function-name-face cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "pars") help-echo cider--help-echo fontified t)) . -2602) (undo-tree-id245 . -1) (#("u" 0 1 (face font-lock-function-name-face cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "pars") help-echo cider--help-echo fontified t)) . -2603) (undo-tree-id246 . -1) (#("p" 0 1 (face font-lock-function-name-face cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "pars") help-echo cider--help-echo fontified t)) . -2604) (undo-tree-id247 . -1) 2605 (2592 . 2593) (2774 . 2775) (#("O" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . -2774) (undo-tree-id248 . -1) 2775 (2774 . 2775)) nil (25529 60683 200861 528000) 0 nil])
([nil nil ((2699 . 2700)) nil (25529 60683 200735 534000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") rear-nonsticky t)) . -2795) (2702 . 2796) 2701) nil (25529 60683 200723 521000) 0 nil])
([nil nil ((#("(mu/update-kettler kettler-state sim-pars" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "pars") help-echo cider--help-echo fontified t) 1 3 (face font-lock-type-face cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "pars") help-echo cider--help-echo fontified t) 3 41 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "pars") help-echo cider--help-echo fontified t)) . 2802) (undo-tree-id240 . 41) (undo-tree-id241 . -1)) nil (25529 60683 200706 620000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "pars") help-echo cider--help-echo fontified t)) . 2802) (undo-tree-id238 . 1) (undo-tree-id239 . -1)) nil (25529 60683 200667 20000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "pars") help-echo cider--help-echo fontified t)) . 2802) (undo-tree-id236 . 1) (undo-tree-id237 . -1)) nil (25529 60683 200627 350000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "pars") help-echo cider--help-echo fontified t)) . 2802) (undo-tree-id234 . 1) (undo-tree-id235 . -1)) nil (25529 60683 200586 562000) 0 nil])
([nil nil ((2810 . 2812) (2795 . 2797)) nil (25529 60683 200547 32000) 0 nil])
([nil nil ((#("            dd
" 0 6 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo) 6 14 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo) 14 15 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "pars") fontified t help-echo cider--help-echo)) . 2798) (undo-tree-id231 . 1) (undo-tree-id232 . -13) (undo-tree-id233 . -13) 2811) nil (25529 60683 200529 223000) 0 nil])
([nil nil ((2746 . 2749)) nil (25529 60683 200431 794000) 0 nil])
([nil nil ((2541 . 2543) (t 25529 60683 232460 99000)) nil (25529 60731 457340 722000) 0 nil])
([nil nil ((#("    (spit \"hr1.csv\" (clojure.string/join [dd(state-string @kettler-state) \"\\n\"]) :append true)
" 0 3 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 3 4 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo rear-nonsticky t fontified t) 4 5 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 5 9 (face font-lock-function-name-face cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 9 10 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 10 19 (face font-lock-string-face cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 19 21 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 21 35 (face font-lock-type-face cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 35 44 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 44 74 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 74 75 (face font-lock-string-face cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 75 77 (face (bold font-lock-string-face) cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 77 78 (face font-lock-string-face cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 78 81 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 81 82 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 82 88 (face clojure-keyword-face cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 88 89 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 89 93 (face font-lock-constant-face cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 93 94 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t) 94 95 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo rear-nonsticky t fontified t)) . 2499) (undo-tree-id253 . 51) (undo-tree-id254 . -3) (undo-tree-id255 . -3) (undo-tree-id256 . -42) (undo-tree-id257 . -43) (undo-tree-id258 . -43) 2542) nil (25529 60731 457321 516000) 0 nil])
([nil nil ((#("  
" 0 2 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") fontified t help-echo cider--help-echo) 2 3 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars") help-echo cider--help-echo fontified t)) . 2496) (undo-tree-id249 . -3) (undo-tree-id250 . -3) (undo-tree-id251 . -3) (undo-tree-id252 . -3)) nil (25529 60731 457216 684000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args" "atom"))) . -4524) (4487 . 4525) 4422 (t 25529 60731 488699 389000)) nil (25529 60768 66441 853000) 0 nil])
([nil nil ((#("m" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66424 532000) 0 nil])
([nil nil ((#("o" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66412 938000) 0 nil])
([nil nil ((#("c" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66401 345000) 0 nil])
([nil nil ((#("k" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66390 589000) 0 nil])
([nil nil ((#("u" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66379 973000) 0 nil])
([nil nil ((#("p" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66369 218000) 0 nil])
([nil nil ((#("-" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66358 462000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66347 567000) 0 nil])
([nil nil ((#("h" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66336 253000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-function-name-face cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66324 938000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66313 694000) 0 nil])
([nil nil ((#("a" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66302 938000) 0 nil])
([nil nil ((#("d" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66292 113000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66281 8000) 0 nil])
([nil nil ((#("d" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66270 43000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66258 938000) 0 nil])
([nil nil ((#("m" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66247 764000) 0 nil])
([nil nil ((#("o" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66236 240000) 0 nil])
([nil nil ((#("-" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66225 275000) 0 nil])
([nil nil ((#("p" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60768 66214 449000) 0 nil])
([nil nil ((#("a" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60769 279107 94000) 0 nil])
([nil nil ((#("r" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60805 503764 924000) 0 nil] [nil nil ((#("r" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) ((4499 . 4500)) (25529 60768 497465 309000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) nil (25529 60805 503749 489000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4499)) ((4499 . 4500)) (25529 60768 66839 668000) 0 nil])
([nil nil ((4499 . 4515)) nil (25529 60805 503734 54000) 0 nil])
([nil nil ((4503 . 4504) (#(")" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") fontified t help-echo cider--help-echo)) . 4503) (undo-tree-id259 . 1) (undo-tree-id260 . -1)) ((4503 . 4504) (#("i" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "args") help-echo cider--help-echo fontified t)) . 4503)) (25529 60768 66149 776000) 0 nil])
([nil nil ((4515 . 4519)) nil (25529 60805 503715 616000) 0 nil])
nil
([nil nil ((4519 . 4529)) nil (25529 60805 503559 800000) 0 nil])
([nil nil ((#("1" 0 1 (cider-locals ("ts" "on-success" "transition" "conds" "state" "on-success" "_" "transition" "transition-list" "pars" "start-state" "pars" "control" "pars") fontified t help-echo cider--help-echo)) . -2601) (undo-tree-id261 . -1) (undo-tree-id262 . -1) 2602 (t 25529 60805 593066 852000)) nil (25529 61465 105247 503000) 0 nil])
([nil current ((2601 . 2602)) nil (25529 61465 105153 78000) 0 nil])
nil
