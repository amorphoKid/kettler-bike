(undo-tree-save-format-version . 1)
"0cd11f993b2517d76ca4644fc1ff960b185652c7"
[nil nil nil nil (25715 54244 322830 731000) 0 nil]
([nil nil ((#("t" 0 1 (cider-locals ("pair-seq") help-echo cider--help-echo fontified t)) . 337) (t 25715 53992 716787 585000)) nil (25715 54244 322826 380000) 0 nil])
([nil nil ((#("u" 0 1 (cider-locals ("pair-seq") help-echo cider--help-echo fontified t)) . 337)) nil (25715 54244 322821 917000) 0 nil])
([nil nil ((#("p" 0 1 (cider-locals ("pair-seq") help-echo cider--help-echo fontified t)) . 337)) nil (25715 54244 322817 991000) 0 nil])
([nil nil ((#("l" 0 1 (cider-locals ("pair-seq") help-echo cider--help-echo fontified t)) . 337)) nil (25715 54244 322814 65000) 0 nil])
([nil nil ((#("e" 0 1 (cider-locals ("pair-seq") help-echo cider--help-echo fontified t)) . 337)) nil (25715 54244 322810 121000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals ("pair-seq") help-echo cider--help-echo fontified t)) . 337)) nil (25715 54244 322805 824000) 0 nil])
([nil nil ((nil rear-nonsticky nil 338 . 339) (nil fontified nil 338 . 339) (338 . 339) 337) nil (25715 54244 322801 158000) 0 nil])
([nil nil ((339 . 342)) nil (25715 54244 322795 195000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("pair-seq") help-echo cider--help-echo fontified t)) . -337) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#("s" 0 1 (cider-locals ("pair-seq") help-echo cider--help-echo rear-nonsticky t fontified t)) . -338) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("i" 0 1 (cider-locals ("pair-seq") help-echo cider--help-echo fontified t)) . -339) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("r" 0 1 (cider-locals ("pair-seq") help-echo cider--help-echo fontified t)) . -340) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("s" 0 1 (cider-locals ("pair-seq") help-echo cider--help-echo fontified t)) . -341) (undo-tree-id11 . -1) (undo-tree-id12 . -1) 342) nil (25715 54244 322785 640000) 0 nil])
([nil nil ((337 . 343)) nil (25715 54244 322690 104000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-comment-delimiter-face)) . 359) (t 25715 54244 332819 78000)) nil (25715 55356 790778 62000) 0 nil])
([nil nil ((359 . 360) (t 25715 55356 791236 20000)) nil (25715 55381 169675 920000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-comment-face)) . -360) (undo-tree-id0 . -1) 361 (360 . 361) (t 25715 55381 170984 128000)) nil (25715 55572 677989 137000) 0 nil])
([nil nil ((#("[" 0 1 (cider-locals ("120" "0" "160" "2" "190" "12" "100" "14" "0" "16") help-echo cider--help-echo fontified t)) . -52) (undo-tree-id1 . -1) 53 (t 25717 6283 130415 684000)) nil (25718 6777 187298 367000) 0 nil])
([nil nil ((52 . 53)) nil (25718 6777 187288 701000) 0 nil])
([nil nil ((#("]" 0 1 (cider-locals ("0" "16") help-echo cider--help-echo fontified t)) . -93) (undo-tree-id0 . -1) 94) nil (25718 6777 187282 367000) 0 nil])
([nil nil ((93 . 94)) nil (25718 6777 187228 645000) 0 nil])
([nil nil ((#("j" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -37) (undo-tree-id3 . -1) (37 . 38) (#("j" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -37) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("k" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -38) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 39 (37 . 39) (#("j" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -37) (undo-tree-id8 . -1) (37 . 38) (#("v" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -37) (undo-tree-id9 . -1) (undo-tree-id10 . -1) 38 (37 . 38) (t 25718 6777 191028 809000)) nil (25718 6799 70859 933000) 0 nil])
([nil nil ((nil rear-nonsticky nil 97 . 98) (#("
" 0 1 (fontified nil cider-locals nil)) . -157) (97 . 158)) nil (25718 6799 70799 785000) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil help-echo cider--help-echo rear-nonsticky t fontified t)) . 97) (undo-tree-id2 . -1)) nil (25718 6799 70787 748000) 0 nil])
([nil nil ((157 . 158)) nil (25718 6799 70739 582000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-variable-name-face cider-locals ("0" "16") help-echo cider--help-echo fontified t)) . -108) (undo-tree-id34 . -1) (#("e" 0 1 (face font-lock-variable-name-face cider-locals ("0" "16") help-echo cider--help-echo fontified t)) . -109) (undo-tree-id35 . -1) (#("q" 0 1 (face font-lock-variable-name-face cider-locals ("0" "16") help-echo cider--help-echo fontified t)) . -110) (undo-tree-id36 . -1) 111 (t 25718 6799 70907 136000)) nil (25718 6892 936816 960000) 0 nil])
([nil nil ((108 . 112)) nil (25718 6892 936780 793000) 0 nil])
([nil nil ((#("1" 0 1 (cider-locals ("10") help-echo cider--help-echo fontified t)) . -115) (undo-tree-id31 . -1) (#("6" 0 1 (cider-locals ("160") help-echo cider--help-echo fontified t)) . -116) (undo-tree-id32 . -1) (#(" " 0 1 (cider-locals ("0" "16") help-echo cider--help-echo fontified t)) . -117) (undo-tree-id33 . -1) 118) nil (25718 6892 936766 219000) 0 nil])
([nil nil ((116 . 120)) nil (25718 6892 936731 645000) 0 nil])
([nil nil ((#("1" 0 1 (cider-locals ("120" "0") help-echo cider--help-echo fontified t)) . -123) (undo-tree-id29 . -1) (#("4" 0 1 (cider-locals ("120" "0") help-echo cider--help-echo fontified t)) . -124) (undo-tree-id30 . -1) 125) nil (25718 6892 936717 627000) 0 nil])
([nil nil ((123 . 124)) nil (25718 6892 936690 164000) 0 nil])
([nil nil ((#("0" 0 1 (cider-locals ("120" "0") help-echo cider--help-echo fontified t)) . -126) (undo-tree-id27 . -1) (#("0" 0 1 (cider-locals ("120" "0") help-echo cider--help-echo fontified t)) . -127) (undo-tree-id28 . -1) 128) nil (25718 6892 936676 998000) 0 nil])
([nil nil ((126 . 128)) nil (25718 6892 936650 53000) 0 nil])
([nil nil ((#("2" 0 1 (cider-locals ("120" "0") help-echo cider--help-echo fontified t)) . -140) (undo-tree-id26 . -1) 141) nil (25718 6892 936638 720000) 0 nil])
([nil nil ((140 . 142)) nil (25718 6892 936620 91000) 0 nil])
([nil nil ((#("6" 0 1 (cider-locals ("120" "0") help-echo cider--help-echo fontified t)) . -144) (undo-tree-id25 . -1) 145) nil (25718 6892 936608 479000) 0 nil])
([nil nil ((144 . 145)) nil (25718 6892 936589 665000) 0 nil])
([nil nil ((#("1" 0 1 (cider-locals ("120" "0") help-echo cider--help-echo fontified t)) . -151) (undo-tree-id22 . -1) (#("2" 0 1 (cider-locals ("120" "0") help-echo cider--help-echo fontified t)) . -152) (undo-tree-id23 . -1) (#("0" 0 1 (cider-locals ("120" "0") help-echo cider--help-echo fontified t)) . -153) (undo-tree-id24 . -1) 154) nil (25718 6892 936575 91000) 0 nil])
([nil nil ((151 . 152)) nil (25718 6892 936539 554000) 0 nil])
([nil nil ((#("2" 0 1 (cider-locals ("120" "0") help-echo cider--help-echo fontified t)) . -132) (undo-tree-id21 . -1) 133) nil (25718 6892 936527 276000) 0 nil])
([nil nil ((132 . 133)) nil (25718 6892 936507 776000) 0 nil])
([nil nil ((#("1" 0 1 (cider-locals ("120" "0") help-echo cider--help-echo fontified t)) . -140) (undo-tree-id19 . -1) (#("4" 0 1 (cider-locals ("120" "0") help-echo cider--help-echo fontified t)) . -141) (undo-tree-id20 . -1) 142) nil (25718 6892 936493 906000) 0 nil])
([nil nil ((140 . 141)) nil (25718 6892 936465 591000) 0 nil])
([nil nil ((#("0" 0 1 (cider-locals ("120" "0") help-echo cider--help-echo fontified t)) . -115) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 116) nil (25718 6892 936452 888000) 0 nil])
([nil nil ((115 . 116)) nil (25718 6892 936426 369000) 0 nil])
([nil nil ((#("2" 0 1 (cider-locals ("120" "2") help-echo cider--help-echo fontified t)) . -123) (undo-tree-id15 . -1) (undo-tree-id16 . -1) 124) nil (25718 6892 936413 481000) 0 nil])
([nil nil ((123 . 125)) nil (25718 6892 936385 55000) 0 nil])
([nil nil ((#("1" 0 1 (cider-locals ("120" "2") help-echo cider--help-echo fontified t)) . -132) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("0" 0 1 (cider-locals ("120" "2") help-echo cider--help-echo fontified t)) . -133) (undo-tree-id13 . -1) (undo-tree-id14 . -1) 134) nil (25718 6892 936368 351000) 0 nil])
([nil nil ((132 . 133)) nil (25718 6892 936282 129000) 0 nil])
([nil nil ((156 . 158) (t 25718 6892 940391 903000)) nil (25718 7060 248752 907000) 0 nil])
([nil nil ((157 . 162)) nil (25718 7060 248748 833000) 0 nil])
([nil nil ((#("
" 0 1 (font-lock-multiline t cider-locals ("defn" "defn") fontified t help-echo cider--help-echo)) . 162)) nil (25718 7060 248744 704000) 0 nil])
([nil nil ((162 . 165)) nil (25718 7060 248740 963000) 0 nil])
([nil nil ((#("b" 0 1 (face font-lock-keyword-face font-lock-multiline t cider-locals nil fontified t help-echo cider--help-echo)) . -161) (undo-tree-id51 . -1) 162) nil (25718 7060 248735 889000) 0 nil])
([nil nil ((161 . 176)) nil (25718 7060 248728 334000) 0 nil])
([nil nil ((176 . 179)) nil (25718 7060 248724 427000) 0 nil])
([nil nil ((179 . 190)) nil (25718 7060 248720 649000) 0 nil])
([nil nil ((190 . 193)) nil (25718 7060 248717 38000) 0 nil])
([nil nil ((193 . 199)) nil (25718 7060 248713 335000) 0 nil])
([nil nil ((199 . 200)) nil (25718 7060 248709 705000) 0 nil])
([nil nil ((200 . 206)) nil (25718 7060 248705 927000) 0 nil])
([nil nil ((#("(" 0 1 (cider-locals ("int-pairs") fontified t help-echo cider--help-echo)) . -193) (undo-tree-id38 . -1) (#("l" 0 1 (cider-locals ("int-pairs") fontified t help-echo cider--help-echo)) . -194) (undo-tree-id39 . -1) (#("o" 0 1 (cider-locals ("int-pairs") fontified t help-echo cider--help-echo)) . -195) (undo-tree-id40 . -1) (#("o" 0 1 (cider-locals ("int-pairs") fontified t help-echo cider--help-echo)) . -196) (undo-tree-id41 . -1) (#("p" 0 1 (face font-lock-keyword-face cider-locals ("int-pairs") fontified t help-echo cider--help-echo)) . -197) (undo-tree-id42 . -1) (#(" " 0 1 (cider-locals ("int-pairs") fontified t help-echo cider--help-echo)) . -198) (undo-tree-id43 . -1) (#("[" 0 1 (cider-locals ("int-pairs" "pair-seq" "%" "first" "x" ">=" "#" "filter" "first" "second" "pair-seq" "last" "second" "0" "x" "<" "cond" "x" "pair-seq" "choose-value-from-pairs" "defn") fontified t help-echo cider--help-echo)) . -199) (undo-tree-id44 . -1) (#("t" 0 1 (cider-locals ("int-pairs" "%" "pair-seq" "choose-value-from-pairs" "#" "partial" "pair-seq" "time-to-value" "defn" "t") fontified t help-echo cider--help-echo)) . -200) (undo-tree-id45 . -1) (#("o" 0 1 (cider-locals ("int-pairs" "%" "pair-seq" "choose-value-from-pairs" "#" "partial" "pair-seq" "time-to-value" "defn" "to") fontified t help-echo cider--help-echo)) . -201) (undo-tree-id46 . -1) (#("t" 0 1 (cider-locals ("int-pairs" "%" "pair-seq" "choose-value-from-pairs" "#" "partial" "pair-seq" "time-to-value" "defn" "tot") fontified t help-echo cider--help-echo)) . -202) (undo-tree-id47 . -1) (#("a" 0 1 (cider-locals ("int-pairs" "%" "pair-seq" "choose-value-from-pairs" "#" "partial" "pair-seq" "time-to-value" "defn" "tota") fontified t help-echo cider--help-echo)) . -203) (undo-tree-id48 . -1) (#("l" 0 1 (cider-locals ("int-pairs" "%" "pair-seq" "choose-value-from-pairs" "#" "partial" "pair-seq" "time-to-value" "defn" "total") fontified t help-echo cider--help-echo)) . -204) (undo-tree-id49 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "%" "pair-seq" "choose-value-from-pairs" "#" "partial" "pair-seq" "time-to-value" "defn" "total") fontified t help-echo cider--help-echo)) . -205) (undo-tree-id50 . -1) 206) nil (25718 7060 248694 132000) 0 nil])
([nil nil ((193 . 198)) nil (25718 7060 248645 689000) 0 nil])
([nil nil ((#("-" 0 1 (cider-locals ("int-pairs") fontified t help-echo cider--help-echo)) . -197) (undo-tree-id37 . -1) 198) nil (25718 7060 248639 338000) 0 nil])
([nil nil ((197 . 203)) nil (25718 7060 248597 543000) 0 nil])
([nil nil ((#(":" 0 1 (face font-lock-variable-name-face cider-locals ("120" "2") help-echo cider--help-echo fontified t)) . -109) (undo-tree-id52 . -1) (#("3" 0 1 (face font-lock-variable-name-face cider-locals ("120" "2") help-echo cider--help-echo fontified t)) . -110) (undo-tree-id53 . -1) 111 (109 . 111) (t 25718 7060 255376 126000)) nil (25718 7105 907563 492000) 0 nil])
([nil nil ((52 . 53)) nil (25718 7105 907511 568000) 0 nil])
([nil nil ((114 . 115)) nil (25718 7105 907491 902000) 0 nil])
([nil nil ((192 . 195) (t 25718 7106 63650 268000)) nil (25718 7471 669636 5000) 0 nil])
([nil nil ((195 . 206)) nil (25718 7471 669628 635000) 0 nil])
([nil nil ((206 . 207)) nil (25718 7471 669622 449000) 0 nil])
([nil nil ((207 . 208)) nil (25718 7471 669615 950000) 0 nil])
([nil nil ((208 . 211)) nil (25718 7471 669609 172000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("int-pairs" "total") fontified t help-echo cider--help-echo)) . -206) (undo-tree-id76 . -1) (#("" 0 1 (cider-locals ("int-pairs" "int-pairs" "total") fontified t help-echo cider--help-echo)) . -207) (undo-tree-id77 . -1) (#("[" 0 1 (cider-locals ("int-pairs" "%" "pair-seq" "choose-value-from-pairs" "#" "partial" "pair-seq" "time-to-value" "defn" "int-pairs" "total") fontified t help-echo cider--help-echo)) . -208) (undo-tree-id78 . -1) (#("3" 0 1 (cider-locals ("int-pairs" "%" "pair-seq" "choose-value-from-pairs" "#" "partial" "pair-seq" "time-to-value" "defn" "int-pairs" "3" "total") fontified t help-echo cider--help-echo)) . -209) (undo-tree-id79 . -1) (#("~" 0 1 (cider-locals ("int-pairs" "%" "pair-seq" "choose-value-from-pairs" "#" "partial" "pair-seq" "time-to-value" "defn" "int-pairs" "3" "total") fontified t help-echo cider--help-echo)) . -210) (undo-tree-id80 . -1) 211) nil (25718 7471 669595 950000) 0 nil])
([nil nil ((206 . 207)) nil (25718 7471 669559 284000) 0 nil])
([nil nil ((nil rear-nonsticky nil 250 . 251) (nil fontified nil 207 . 251) (207 . 251)) nil (25718 7471 669551 562000) 0 nil])
([nil nil ((251 . 252)) nil (25718 7471 669542 414000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("int-pairs" "total") help-echo cider--help-echo fontified t)) . -249) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total") help-echo cider--help-echo rear-nonsticky t fontified t)) . -250) (undo-tree-id74 . -1) (undo-tree-id75 . -1) 251) nil (25718 7471 669532 25000) 0 nil])
([nil nil ((263 . 264)) nil (25718 7471 669493 673000) 0 nil])
([nil nil ((#("i" 0 1 (cider-locals ("int-pairs" "total") fontified t help-echo cider--help-echo)) . -259) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("r" 0 1 (cider-locals ("int-pairs" "total") fontified t help-echo cider--help-echo)) . -260) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("s" 0 1 (cider-locals ("int-pairs" "total") fontified t help-echo cider--help-echo)) . -261) (undo-tree-id70 . -1) (undo-tree-id71 . -1) 262) nil (25718 7471 669482 174000) 0 nil])
([nil nil ((#("i" 0 1 (cider-locals ("int-pairs" "total") fontified t help-echo cider--help-echo)) . -253) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("n" 0 1 (cider-locals ("int-pairs" "total") fontified t help-echo cider--help-echo)) . -254) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("t" 0 1 (face font-lock-function-name-face cider-locals ("int-pairs" "total") fontified t help-echo cider--help-echo)) . -255) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("-" 0 1 (cider-locals ("int-pairs" "total") fontified t help-echo cider--help-echo)) . -256) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("p" 0 1 (cider-locals ("int-pairs" "total") fontified t help-echo cider--help-echo)) . -257) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("a" 0 1 (cider-locals ("int-pairs" "total") fontified t help-echo cider--help-echo)) . -258) (undo-tree-id64 . -1) (undo-tree-id65 . -1) 259) nil (25718 7471 669432 211000) 0 nil])
([nil nil ((253 . 258)) nil (25718 7471 669321 583000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals ("int-pairs" "total") help-echo cider--help-echo fontified t)) . 233) (#("t" 0 1 (cider-locals ("int-pairs" "total") help-echo cider--help-echo fontified t)) . 233) (#("n" 0 1 (cider-locals ("int-pairs" "total") help-echo cider--help-echo fontified t)) . 233) (#("i" 0 1 (face font-lock-function-name-face cider-locals ("int-pairs" "total") help-echo cider--help-echo fontified t)) . 233) (#("-" 0 1 (cider-locals ("int-pairs" "total") help-echo cider--help-echo fontified t)) . 233) (#("r" 0 1 (cider-locals ("int-pairs" "total") help-echo cider--help-echo fontified t)) . 233) (#("e" 0 1 (cider-locals ("int-pairs" "total") help-echo cider--help-echo fontified t)) . 233) (#("w" 0 1 (cider-locals ("int-pairs" "total") help-echo cider--help-echo fontified t)) . 233) (#("o" 0 1 (cider-locals ("int-pairs" "total") help-echo cider--help-echo fontified t)) . 233) (#("p" 0 1 (cider-locals ("int-pairs" "total") help-echo cider--help-echo fontified t)) . 233) (#("/" 0 1 (cider-locals ("int-pairs" "total") help-echo cider--help-echo fontified t)) . 233) (#("v" 0 1 (face font-lock-type-face cider-locals ("int-pairs" "total") help-echo cider--help-echo fontified t)) . 233) (#("t" 0 1 (face font-lock-type-face cider-locals ("int-pairs" "total") help-echo cider--help-echo fontified t)) . 233) (#("t" 0 1 (face font-lock-type-face cider-locals ("int-pairs" "total") help-echo cider--help-echo fontified t)) . 233) (t 25718 7471 676535 965000)) nil (25718 7600 177078 717000) 0 nil])
([nil nil ((233 . 236)) nil (25718 7600 177065 69000) 0 nil])
([nil nil ((#("z" 0 1 (cider-locals ("int-pairs" "total") help-echo cider--help-echo fontified t)) . -235) (undo-tree-id81 . -1) (undo-tree-id82 . -1) 236) nil (25718 7600 177058 680000) 0 nil])
([nil nil ((235 . 242)) nil (25718 7600 177018 385000) 0 nil])
([nil nil ((247 . 251) (#("    " 0 4 (cider-locals ("int-pairs" "total") fontified nil help-echo cider--help-echo)) . 246) (undo-tree-id139 . -2) (248 . 250) (248 . 249) (t 25718 7600 182563 738000)) nil (25718 7739 21282 830000) 0 nil])
([nil nil ((246 . 248)) nil (25718 7739 21273 423000) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals ("int-pairs" "total") fontified t help-echo cider--help-echo)) . -245) (undo-tree-id136 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total") fontified t help-echo cider--help-echo)) . -246) (undo-tree-id137 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total") fontified t help-echo cider--help-echo)) . -247) (undo-tree-id138 . -1) 248) nil (25718 7739 21267 645000) 0 nil])
([nil nil ((245 . 250)) nil (25718 7739 21252 998000) 0 nil])
([nil nil ((250 . 254)) nil (25718 7739 21249 331000) 0 nil])
([nil nil ((254 . 260)) nil (25718 7739 21245 553000) 0 nil])
([nil nil ((260 . 272)) nil (25718 7739 21242 128000) 0 nil])
([nil nil ((272 . 279)) nil (25718 7739 21238 591000) 0 nil])
([nil nil ((279 . 285)) nil (25718 7739 21234 887000) 0 nil])
([nil nil ((273 . 274)) nil (25718 7739 21230 961000) 0 nil])
([nil nil ((286 . 297)) nil (25718 7739 21226 998000) 0 nil])
([nil nil ((297 . 298)) nil (25718 7739 21223 498000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("int-pairs" "total" "int-pairs" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -297) (undo-tree-id135 . -1) 298) nil (25718 7739 21218 869000) 0 nil])
([nil nil ((#("(" 0 1 (cider-locals ("int-pairs" "total" "total" "int-pairs" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -272) (undo-tree-id134 . -1) 273) nil (25718 7739 21210 369000) 0 nil])
([nil nil ((296 . 297)) nil (25718 7739 21202 591000) 0 nil])
([nil nil ((297 . 304)) nil (25718 7739 21199 147000) 0 nil])
([nil nil ((304 . 307)) nil (25718 7739 21195 462000) 0 nil])
([nil nil ((304 . 305)) nil (25718 7739 21191 592000) 0 nil])
([nil nil ((308 . 309)) nil (25718 7739 21187 758000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -308) (undo-tree-id133 . -1) 309) nil (25718 7739 21183 147000) 0 nil])
([nil nil ((308 . 311)) nil (25718 7739 21175 55000) 0 nil])
([nil nil ((#("c" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -308) (undo-tree-id130 . -1) (#("o" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -309) (undo-tree-id131 . -1) (#("u" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -310) (undo-tree-id132 . -1) 311) nil (25718 7739 21168 777000) 0 nil])
([nil nil ((308 . 314)) nil (25718 7739 21154 259000) 0 nil])
([nil nil ((#("c" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -313) (undo-tree-id129 . -1) 314) nil (25718 7739 21149 408000) 0 nil])
([nil nil ((313 . 316)) nil (25718 7739 21141 593000) 0 nil])
([nil nil ((316 . 326)) nil (25718 7739 21138 167000) 0 nil])
([nil nil ((326 . 335)) nil (25718 7739 21134 408000) 0 nil])
([nil nil ((335 . 336)) nil (25718 7739 21130 852000) 0 nil])
([nil nil ((#("(" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -335) (undo-tree-id128 . -1) 336) nil (25718 7739 21125 593000) 0 nil])
([nil nil ((335 . 336)) nil (25718 7739 21117 760000) 0 nil])
([nil nil ((336 . 345)) nil (25718 7739 21114 94000) 0 nil])
([nil nil ((345 . 349)) nil (25718 7739 21110 1000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -347) (undo-tree-id126 . -1) (#(")" 0 1 (cider-locals ("int-pairs" "total") help-echo cider--help-echo fontified t)) . -348) (undo-tree-id127 . -1) 349) nil (25718 7739 21104 501000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("int-pairs" "total") fontified t help-echo cider--help-echo)) . 358)) nil (25718 7739 21092 483000) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -347) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -348) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -349) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -350) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -351) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("t" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -352) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("o" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -353) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("t" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -354) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("a" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -355) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("l" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -356) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#(")" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -357) (undo-tree-id124 . -1) (undo-tree-id125 . -1) 358) nil (25718 7739 21077 631000) 0 nil])
([nil nil ((347 . 350)) nil (25718 7739 20909 413000) 0 nil])
([nil nil ((#("2" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -345) (undo-tree-id183 . -1) 346 (t 25718 7739 28869 668000)) nil (25718 7815 948801 627000) 0 nil])
([nil nil ((345 . 352)) nil (25718 7815 948793 701000) 0 nil])
([nil nil ((352 . 355)) nil (25718 7815 948790 71000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -354) (undo-tree-id182 . -1) 355) nil (25718 7815 948784 608000) 0 nil])
([nil nil ((354 . 357)) nil (25718 7815 948776 405000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -353) (undo-tree-id178 . -1) (#("+" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -354) (undo-tree-id179 . -1) (#("1" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -355) (undo-tree-id180 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -356) (undo-tree-id181 . -1) 357) nil (25718 7815 948769 664000) 0 nil])
([nil nil ((353 . 356)) nil (25718 7815 948751 702000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -354) (undo-tree-id176 . -1) (#("1" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -355) (undo-tree-id177 . -1) 356) nil (25718 7815 948746 480000) 0 nil])
([nil nil ((354 . 359)) nil (25718 7815 948722 573000) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 359) (#(")" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . 359) (undo-tree-id173 . -1) (#(")" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . 359) (#(")" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . 359) (#(")" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . 359) (undo-tree-id174 . -1) (undo-tree-id175 . -1)) nil (25718 7815 948715 480000) 0 nil])
([nil nil ((360 . 375) (#("  " 0 2 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified nil help-echo cider--help-echo)) . 360) (359 . 360)) nil (25718 7815 948698 36000) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -359) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -360) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -361) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -362) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -363) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -364) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -365) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -366) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -367) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -368) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -369) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -370) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -371) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -372) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -373) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -374) (undo-tree-id171 . -1) (undo-tree-id172 . -1) 375) nil (25718 7815 948680 685000) 0 nil])
([nil nil ((359 . 366)) nil (25718 7815 948550 725000) 0 nil])
([nil nil ((366 . 369)) nil (25718 7815 948536 799000) 0 nil])
([nil nil ((#("1" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . -335) (undo-tree-id184 . -1) (undo-tree-id185 . -1) 336 (t 25718 7815 947124 737000)) nil (25718 7826 882351 917000) 0 nil])
([nil nil ((335 . 336)) nil (25718 7826 882306 66000) 0 nil])
([nil nil ((369 . 371) (t 25718 7826 886889 394000)) nil (25718 7856 566537 806000) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") help-echo cider--help-echo fontified t)) . 370) (undo-tree-id186 . 1)) nil (25718 7856 566526 306000) 0 nil])
([nil nil ((297 . 304) (t 25718 7856 566264 682000)) nil (25718 7926 384979 268000) 0 nil])
([nil nil ((304 . 309)) nil (25718 7926 384969 102000) 0 nil])
([nil nil ((#("'" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -52) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#("(" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -53) (undo-tree-id191 . -1) (undo-tree-id192 . -1) 54) nil (25718 7926 384956 602000) 0 nil])
([nil nil ((52 . 53)) nil (25718 7926 384917 621000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("120" "0" "160" "2" "190" "12" "100" "14" "0" "16") help-echo cider--help-echo fontified t)) . -93) (undo-tree-id187 . -1) (undo-tree-id188 . -1) 94) nil (25718 7926 384904 585000) 0 nil])
([nil nil ((93 . 94)) nil (25718 10498 618325 388000) 0 nil])
([nil nil ((259 . 271) 258) nil (25718 10519 668582 870000) 0 nil] [nil nil ((259 . 271) (t 25718 10406 656307 883000)) ((#("
           " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 1 12 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 259) (undo-tree-id292 . -11) (undo-tree-id293 . -1) (undo-tree-id294 . -12) (undo-tree-id295 . -1) (undo-tree-id296 . -11)) (25718 10494 853047 245000) 0 nil] [nil nil ((297 . 308) (#("           " 0 11 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified nil help-echo cider--help-echo)) . 296) (undo-tree-id195 . -11) (295 . 308) (t 25718 7926 404863 604000)) ((#("
           
" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 1 12 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified nil help-echo cider--help-echo) 12 13 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified nil help-echo cider--help-echo)) . 295) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -12) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (296 . 307) (#("           " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 1 2 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 2 3 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 3 4 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 4 5 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 5 6 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 6 7 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 7 8 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 8 9 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 9 10 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 10 11 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 297)) (25718 10404 237017 547000) 0 nil])
([nil nil ((271 . 283)) nil (25718 10519 668577 426000) 0 nil])
([nil nil ((271 . 277)) ((#("seq []" 0 3 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq" "t") fontified t help-echo cider--help-echo) 3 6 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq" "t") fontified t help-echo cider--help-echo)) . 271)) (25718 10494 394308 871000) 0 nil])
([nil nil ((296 . 307)) ((#("           " 0 11 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 296) (undo-tree-id252 . -11) (undo-tree-id253 . -11) (undo-tree-id254 . -11) (undo-tree-id255 . -11) (undo-tree-id256 . -10) (undo-tree-id257 . -11) (undo-tree-id258 . -11) (undo-tree-id259 . -11) (undo-tree-id260 . -11) (undo-tree-id261 . -11) (undo-tree-id262 . -10)) (25718 10403 489721 492000) 0 nil])
([nil nil ((395 . 405)) nil (25718 10576 775632 139000) 0 nil])
([nil nil ((645 . 649) (t 25718 10442 355689 942000)) ((#("seq " 0 3 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq" "t" "pair-seq") fontified t help-echo cider--help-echo) 3 4 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq" "t" "pair-seq") fontified t help-echo cider--help-echo)) . 645) (undo-tree-id290 . -4) (undo-tree-id291 . -4) (t 25718 10458 805405 456000)) (25718 10493 761452 634000) 0 nil])
([nil nil ((307 . 312)) ((#("[] se" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 1 2 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 2 3 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 3 5 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 307) (undo-tree-id242 . -5) (undo-tree-id243 . -5) (undo-tree-id244 . -5) (undo-tree-id245 . -5) (undo-tree-id246 . -4) (undo-tree-id247 . -5) (undo-tree-id248 . -5) (undo-tree-id249 . -5) (undo-tree-id250 . -5) (undo-tree-id251 . -4)) (25718 10402 835569 749000) 0 nil])
([nil nil ((#("1" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . 392) (t 25718 10519 684353 876000)) nil (25718 10599 410856 895000) 0 nil] [nil nil ((340 . 356) (337 . 340) (#("." 0 1 (cider-locals ("int-pairs" "total" "cur." "rest" "cur-pair" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -337) (undo-tree-id297 . -1) 338 (334 . 338) (322 . 334) (301 . 304) (#("
" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -259) (undo-tree-id298 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -260) (undo-tree-id299 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -261) (undo-tree-id300 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -262) (undo-tree-id301 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -263) (undo-tree-id302 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -264) (undo-tree-id303 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -265) (undo-tree-id304 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -266) (undo-tree-id305 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -267) (undo-tree-id306 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -268) (undo-tree-id307 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -269) (undo-tree-id308 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -270) (undo-tree-id309 . -1) (#("c" 0 1 (cider-locals ("int-pairs" "total" "int-pairs" "c" "t") fontified t help-echo cider--help-echo)) . -271) (undo-tree-id310 . -1) (#("u" 0 1 (cider-locals ("int-pairs" "total" "int-pairs" "cu" "t") fontified t help-echo cider--help-echo)) . -272) (undo-tree-id311 . -1) (#("r" 0 1 (cider-locals ("int-pairs" "total" "int-pairs" "cur" "t") fontified t help-echo cider--help-echo)) . -273) (undo-tree-id312 . -1) (#("-" 0 1 (cider-locals ("int-pairs" "total" "int-pairs" "cur-" "t") fontified t help-echo cider--help-echo)) . -274) (undo-tree-id313 . -1) (#("t" 0 1 (cider-locals ("int-pairs" "total" "int-pairs" "cur-t" "t") fontified t help-echo cider--help-echo)) . -275) (undo-tree-id314 . -1) 276 (271 . 276) (259 . 271) (t 25718 10519 684353 876000)) ((#("
           " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified nil help-echo cider--help-echo) 1 2 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified nil help-echo cider--help-echo) 2 3 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified nil help-echo cider--help-echo) 3 4 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified nil help-echo cider--help-echo) 4 5 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified nil help-echo cider--help-echo) 5 6 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified nil help-echo cider--help-echo) 6 7 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified nil help-echo cider--help-echo) 7 8 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified nil help-echo cider--help-echo) 8 9 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified nil help-echo cider--help-echo) 9 10 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified nil help-echo cider--help-echo) 10 11 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified nil help-echo cider--help-echo) 11 12 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified nil help-echo cider--help-echo)) . 259) (#("cur-t" 0 1 (cider-locals ("int-pairs" "total" "int-pairs" "c" "t") fontified nil help-echo cider--help-echo) 1 2 (cider-locals ("int-pairs" "total" "int-pairs" "cu" "t") fontified nil help-echo cider--help-echo) 2 3 (cider-locals ("int-pairs" "total" "int-pairs" "cur" "t") fontified nil help-echo cider--help-echo) 3 4 (cider-locals ("int-pairs" "total" "int-pairs" "cur-" "t") fontified nil help-echo cider--help-echo) 4 5 (cider-locals ("int-pairs" "total" "int-pairs" "cur-t" "t") fontified nil help-echo cider--help-echo)) . 271) (259 . 276) (#("air" 0 3 (cider-locals ("int-pairs" "total" "cur-t" "rest" "cur-pair" "seq-pairs" "t") fontified nil help-echo cider--help-echo)) . 301) (#("
           " 0 1 (cider-locals ("int-pairs" "total" "cur-t" "rest" "cur-pair" "seq-pairs" "t") fontified t help-echo cider--help-echo) 1 12 (cider-locals ("int-pairs" "total" "cur-t" "rest" "cur-pair" "seq-pairs" "t") fontified nil help-echo cider--help-echo)) . 322) (undo-tree-id315 . -12) (undo-tree-id316 . -1) (undo-tree-id317 . -12) (#("cur." 0 3 (cider-locals ("int-pairs" "total" "cur-t" "rest" "cur-pair" "seq-pairs" "t") fontified nil help-echo cider--help-echo) 3 4 (cider-locals ("int-pairs" "total" "cur." "rest" "cur-pair" "seq-pairs" "t") fontified nil help-echo cider--help-echo)) . 334) (undo-tree-id318 . -4) (undo-tree-id319 . -3) (337 . 338) (#("-t " 0 3 (cider-locals ("int-pairs" "total" "cur-t" "rest" "cur-pair" "seq-pairs" "t") fontified nil help-echo cider--help-echo)) . 337) (undo-tree-id320 . -3) (undo-tree-id321 . -3) (#("(first cur-pair)" 0 1 (cider-locals ("int-pairs" "total" "cur-t" "rest" "cur-pair" "seq-pairs" "t") fontified t help-echo cider--help-echo) 1 6 (face font-lock-function-name-face cider-locals ("int-pairs" "total" "cur-t" "rest" "cur-pair" "seq-pairs" "t") fontified t help-echo cider--help-echo) 6 16 (cider-locals ("int-pairs" "total" "cur-t" "rest" "cur-pair" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . 340) (undo-tree-id322 . -15) (undo-tree-id323 . -15)) (25718 10576 772643 486000) 0 nil])
([nil nil ((277 . 280) (275 . 277) (#("P" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-P" "t") fontified t help-echo cider--help-echo)) . -275) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (#("A" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-PA" "t") fontified t help-echo cider--help-echo)) . -276) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (#("I" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-PAI" "t") fontified t help-echo cider--help-echo)) . -277) (undo-tree-id276 . -1) (undo-tree-id277 . -1) 278 (275 . 278) (#("P" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-P" "t") fontified t help-echo cider--help-echo)) . -275) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("A" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-PA" "t") fontified t help-echo cider--help-echo)) . -276) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (#("I" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-PAI" "t") fontified t help-echo cider--help-echo)) . -277) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (#("R" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-PAIR" "t") fontified t help-echo cider--help-echo)) . -278) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("S" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-PAIRS" "t") fontified t help-echo cider--help-echo)) . -279) (undo-tree-id286 . -1) (undo-tree-id287 . -1) 280 (275 . 280) (#("p" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-p" "t") fontified t help-echo cider--help-echo)) . -275) (undo-tree-id288 . -1) (undo-tree-id289 . -1) 276 (274 . 276) (t 25718 10458 805405 456000)) ((#("-p" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified nil help-echo cider--help-echo) 1 2 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-p" "t") fontified nil help-echo cider--help-echo)) . 274) (275 . 276) (#("PAIRS" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-P" "t") fontified nil help-echo cider--help-echo) 1 2 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-PA" "t") fontified nil help-echo cider--help-echo) 2 3 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-PAI" "t") fontified nil help-echo cider--help-echo) 3 4 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-PAIR" "t") fontified nil help-echo cider--help-echo) 4 5 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-PAIRS" "t") fontified nil help-echo cider--help-echo)) . 275) (275 . 280) (#("PAI" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-P" "t") fontified nil help-echo cider--help-echo) 1 2 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-PA" "t") fontified nil help-echo cider--help-echo) 2 3 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-PAI" "t") fontified nil help-echo cider--help-echo)) . 275) (275 . 278) (#("pa" 0 2 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified nil help-echo cider--help-echo)) . 275) (#("irs" 0 3 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . 277)) (25718 10493 760277 580000) 0 nil])
([nil nil ((312 . 319)) ((#("q-pairs" 0 6 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 6 7 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 312) (undo-tree-id233 . -6) (undo-tree-id234 . -6) (undo-tree-id235 . -6) (undo-tree-id236 . -6) (undo-tree-id237 . -6) (undo-tree-id238 . -6) (undo-tree-id239 . -6) (undo-tree-id240 . -7) (undo-tree-id241 . -6)) (25718 10402 443041 197000) 0 nil])
([nil nil ((392 . 398)) nil (25718 10599 410847 395000) 0 nil])
nil
nil
([nil nil ((#("s" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -318) (undo-tree-id193 . -1) 319) ((318 . 319)) (25718 10401 986729 750000) 0 nil])
([nil nil ((#("d" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -393) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (#("i" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -394) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (#("r" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -395) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (#("s" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -396) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (#("t" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -397) (undo-tree-id332 . -1) (undo-tree-id333 . -1) 398) nil (25718 10599 410829 766000) 0 nil])
([nil nil ((318 . 319)) ((#("s" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 318) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1)) (25718 10401 424832 391000) 0 nil])
([nil nil ((393 . 404)) nil (25718 10599 410728 286000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 319) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 319) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 319) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 319) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 319) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 319) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 319) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 319) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 319) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 319) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 319) (#("
" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 319)) ((319 . 320) (319 . 320) (319 . 320) (319 . 320) (319 . 320) (319 . 320) (319 . 320) (319 . 320) (319 . 320) (319 . 320) (319 . 320) (319 . 320)) (25718 10400 576421 89000) 0 nil])
([nil nil ((404 . 405)) nil (25718 10599 410709 842000) 0 nil])
([nil nil ((#("[" 0 1 (cider-locals ("int-pairs" "total" "seq-pairs" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -307) (undo-tree-id197 . -1) (#("]" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -308) (undo-tree-id199 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -309) (undo-tree-id201 . -1) 310 (t 25718 7961 84198 66000)) ((307 . 310)) (25718 10399 961221 247000) 0 nil])
([nil nil ((#("d" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -332) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#("d" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -333) (undo-tree-id339 . -1) (undo-tree-id340 . -1) 334 (332 . 334) (t 25718 10599 432979 107000)) nil (25718 10628 741477 29000) 0 nil])
([nil nil ((316 . 319)) ((#(" []" 0 3 (cider-locals ("int-pairs" "total" "seq-pairs" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 316) (undo-tree-id226 . -3) (undo-tree-id227 . -3)) (25718 10399 488501 918000) 0 nil])
([nil nil ((#("           
" 0 12 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . 321) (undo-tree-id334 . 1) (undo-tree-id335 . -10) (undo-tree-id336 . -10) 331) nil (25718 10628 741451 177000) 0 nil])
([nil nil ((400 . 401) (t 25718 7980 13841 959000)) ((#(" " 0 1 (cider-locals ("int-pairs" "total" "seq-pairs" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 400) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1)) (25718 10398 737922 441000) 0 nil])
([nil nil ((#("v" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-t") fontified t help-echo cider--help-echo)) . -389) (undo-tree-id353 . -1) (undo-tree-id354 . -1) 390 (389 . 390) (428 . 429) (339 . 341) (327 . 339) (t 25718 10628 752474 377000)) nil (25718 10699 39058 680000) 0 nil])
([nil nil ((401 . 403)) ((#("[]" 0 1 (cider-locals ("int-pairs" "total" "seq-pairs" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 1 2 (cider-locals ("int-pairs" "total" "seq-pairs" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 401) (undo-tree-id218 . -2) (undo-tree-id219 . -2)) (25718 10398 339297 791000) 0 nil])
([nil nil ((#("(+ t (first cur-p)) " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-t") fontified t help-echo cider--help-echo) 1 2 (face font-lock-function-name-face cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-t") fontified t help-echo cider--help-echo) 2 6 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-t") fontified t help-echo cider--help-echo) 6 11 (face font-lock-function-name-face cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-t") fontified t help-echo cider--help-echo) 11 18 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-t") fontified t help-echo cider--help-echo) 18 20 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-t") fontified t help-echo cider--help-echo)) . 389) (undo-tree-id343 . -19) (undo-tree-id344 . 20) (undo-tree-id345 . -19) (undo-tree-id346 . -19) (undo-tree-id347 . -19) (undo-tree-id348 . -18) (undo-tree-id349 . -19) (undo-tree-id350 . -20) (undo-tree-id351 . -19) (undo-tree-id352 . -19) 408) nil (25718 10699 39032 903000) 0 nil])
([nil nil ((#(")" 0 1 (cider-locals ("int-pairs") fontified t help-echo cider--help-echo)) . -406) (undo-tree-id211 . -1) 407 (t 25718 8008 163320 827000)) ((406 . 407)) (25718 10397 869257 28000) 0 nil])
([nil nil ((#("p" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-tp") fontified t help-echo cider--help-echo)) . -338) (undo-tree-id341 . -1) (undo-tree-id342 . -1) 339 (338 . 339) (389 . 395)) nil (25718 10699 38975 922000) 0 nil])
([nil nil ((406 . 407)) ((#(")" 0 1 (cider-locals ("int-pairs" "total" "seq-pairs" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 406)) (25718 10397 363016 799000) 0 nil])
([nil nil ((nil rear-nonsticky nil 358 . 359) (nil fontified nil 339 . 359) (339 . 359) 338) nil (25718 10699 38929 90000) 0 nil])
([nil nil ((#("[" 0 1 (cider-locals ("int-pairs" "total" "seq-pairs" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -401) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("]" 0 1 (cider-locals ("int-pairs" "total" "seq-pairs" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -402) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) 403) ((401 . 403)) (25718 10396 566902 315000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-t") help-echo cider--help-echo rear-nonsticky t fontified t)) . 358)) nil (25718 10699 38907 238000) 0 nil])
([nil nil ((401 . 409)) ((#("seq-pais" 0 7 (cider-locals ("int-pairs" "total" "seq-pairs" "rest" "cur-p" "t") fontified t help-echo cider--help-echo) 7 8 (cider-locals ("int-pairs" "total" "seq-pairs" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 401) (undo-tree-id214 . -7) (undo-tree-id215 . -7) (undo-tree-id216 . -8) (undo-tree-id217 . -8)) (25718 10396 129700 223000) 0 nil])
([nil nil ((360 . 368) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-t") fontified nil help-echo cider--help-echo)) . 359) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (360 . 361) (t 25718 10699 51265 563000)) nil (25718 10720 766091 177000) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals ("int-pairs" "total" "seq-pairs" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . -408) (undo-tree-id203 . -1) 409) ((408 . 409)) (25718 10395 307469 156000) 0 nil])
([nil nil ((358 . 371) (t 25718 10720 790892 103000)) nil (25718 11955 96149 347000) 0 nil])
([nil nil ((408 . 410)) ((#("rs" 0 2 (cider-locals ("int-pairs" "total" "seq-pairs" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 408) (undo-tree-id212 . -2) (undo-tree-id213 . -2) (t 25718 8066 372271 84000)) (25718 10394 903947 111000) 0 nil])
([nil nil ((371 . 379)) nil (25718 11955 96144 477000) 0 nil])
([nil nil ((339 . 340) (t 25718 8066 372271 84000)) ((#("u" 0 1 (cider-locals ("int-pairs" "total" "seq-pairs" "rest" "cur-p" "t") fontified t help-echo cider--help-echo)) . 339)) (25718 10394 903289 715000) 0 nil])
([nil nil ((379 . 383)) nil (25718 11955 96140 792000) 0 nil])
nil
([nil nil ((379 . 380)) nil (25718 11955 96137 70000) 0 nil])
([nil nil ((384 . 385)) nil (25718 11955 96133 107000) 0 nil])
([nil nil ((385 . 392)) nil (25718 11955 96129 126000) 0 nil])
([nil nil ((392 . 405)) nil (25718 11955 96124 885000) 0 nil])
([nil nil ((405 . 408)) nil (25718 11955 96120 700000) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "new-t") fontified t help-echo cider--help-echo)) . -449) (undo-tree-id357 . -1) 450) nil (25718 11955 96114 811000) 0 nil])
([nil nil ((449 . 456)) nil (25718 11955 96076 257000) 0 nil])
([nil nil ((407 . 417) (387 . 392) (#("e" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "new-t") help-echo cider--help-echo fontified t)) . -387) (undo-tree-id389 . -1) (#("w" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "new-t") help-echo cider--help-echo fontified t)) . -388) (undo-tree-id390 . -1) (#("-" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "new-t") help-echo cider--help-echo fontified t)) . -389) (undo-tree-id391 . -1) (#("t" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "new-t") help-echo cider--help-echo fontified t)) . -390) (undo-tree-id392 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "new-t") help-echo cider--help-echo fontified t)) . -391) (undo-tree-id393 . -1) 392 (t 25718 11955 110951 35000)) nil (25718 12058 153542 865000) 0 nil])
([nil nil ((#(" (second cur-p)]" 0 2 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "new-t") help-echo cider--help-echo fontified t) 2 8 (face font-lock-function-name-face cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "new-t") help-echo cider--help-echo fontified t) 8 16 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "new-t") help-echo cider--help-echo fontified t)) . 391) (undo-tree-id382 . -15) (undo-tree-id383 . 15) (undo-tree-id384 . -15) (undo-tree-id385 . -15) (undo-tree-id386 . -16) (undo-tree-id387 . -15) (undo-tree-id388 . -15) 406) nil (25718 12058 153517 607000) 0 nil])
([nil nil ((374 . 379) (372 . 374) (#("o" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "seq-pairs" "new-t" "cons" "co" "new-t") help-echo cider--help-echo fontified t)) . -372) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (#("r" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "seq-pairs" "new-t" "cons" "cor" "new-t") help-echo cider--help-echo fontified t)) . -373) (undo-tree-id360 . -1) (undo-tree-id361 . -1) 374 (373 . 374) (#("u" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "seq-pairs" "new-t" "cons" "cou" "new-t") help-echo cider--help-echo fontified t)) . -373) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#("e" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "seq-pairs" "new-t" "cons" "coue" "new-t") help-echo cider--help-echo fontified t)) . -374) (undo-tree-id364 . -1) (undo-tree-id365 . -1) 375 (371 . 375) (#("n" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "seq-pairs" "new-t" "cons" "n" "new-t") help-echo cider--help-echo fontified t)) . -371) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (#("e" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "seq-pairs" "new-t" "cons" "ne" "new-t") help-echo cider--help-echo fontified t)) . -372) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (#("w" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "seq-pairs" "new-t" "cons" "new" "new-t") help-echo cider--help-echo fontified t)) . -373) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (#("-" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "seq-pairs" "new-t" "cons" "new-" "new-t") help-echo cider--help-echo fontified t)) . -374) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (#("p" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "seq-pairs" "new-t" "cons" "new-p" "new-t") help-echo cider--help-echo fontified t)) . -375) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (#("o" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "seq-pairs" "new-t" "cons" "new-po" "new-t") help-echo cider--help-echo fontified t)) . -376) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (#("w" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "seq-pairs" "new-t" "cons" "new-pow" "new-t") help-echo cider--help-echo fontified t)) . -377) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "seq-pairs" "new-t" "cons" "new-pow" "new-t") help-echo cider--help-echo fontified t)) . -378) (undo-tree-id380 . -1) (undo-tree-id381 . -1) 379 (378 . 379) (371 . 378) (358 . 371) 357) nil (25718 12058 153482 108000) 0 nil])
([nil nil ((nil rear-nonsticky nil 394 . 395) (nil fontified nil 379 . 395) (379 . 395) 378) nil (25718 12069 229696 157000) 0 nil])
([nil nil ((#("]" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "cur-pow" "new-t") help-echo cider--help-echo rear-nonsticky t fontified t)) . 394)) nil (25718 12090 118020 681000) 0 nil] [nil nil ((#("p" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "cur-pow" "new-t") help-echo cider--help-echo fontified t)) . -392) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (#(")" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "seq-pairs" "cur-pow" "new-t") help-echo cider--help-echo fontified t)) . -393) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (#("r" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "rseq-pairs" "cur-pow" "new-t") help-echo cider--help-echo fontified t)) . -394) (undo-tree-id408 . -1) (undo-tree-id409 . -1) 395 (394 . 395) (#("]
            new-seq (cons [new-t " 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "cur-pow" "new-t") help-echo cider--help-echo rear-nonsticky t fontified nil) 1 2 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "rest" "seq-pairs" "new-t" "recur" "new-seq" "rest" "count" "0" "=" "if" "new-seq" "cur-pow" "new-t") help-echo cider--help-echo fontified nil) 2 23 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "rest" "seq-pairs" "new-t" "recur" "new-seq" "rest" "count" "0" "=" "if" "new-seq" "cur-pow" "new-t") help-echo cider--help-echo fontified t) 23 27 (face font-lock-function-name-face cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "rest" "seq-pairs" "new-t" "recur" "new-seq" "rest" "count" "0" "=" "if" "new-seq" "cur-pow" "new-t") help-echo cider--help-echo fontified t) 27 34 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "rest" "seq-pairs" "new-t" "recur" "new-seq" "rest" "count" "0" "=" "if" "new-seq" "cur-pow" "new-t") help-echo cider--help-echo fontified t) 34 35 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "rest" "seq-pairs" "new-t" "recur" "new-seq" "rest" "count" "0" "=" "if" "new-seq" "cur-pow" "new-t") help-echo cider--help-echo fontified t)) . 394) (undo-tree-id410 . 34) (undo-tree-id411 . -34) (undo-tree-id412 . 1) (undo-tree-id413 . -34) (undo-tree-id414 . -34) (undo-tree-id415 . -35) (undo-tree-id416 . -34) (undo-tree-id417 . -2) (undo-tree-id418 . -35)) ((394 . 429) (#("r" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "rseq-pairs" "cur-pow" "new-t") help-echo cider--help-echo fontified nil)) . 394) (392 . 395)) (25718 12069 229209 506000) 0 nil] [nil nil ((#("]" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "cur-pow" "new-t") help-echo cider--help-echo rear-nonsticky t fontified t)) . 394)) ((394 . 395)) (25718 12058 153358 575000) 0 nil])
([nil nil ((428 . 437)) nil (25718 12090 118007 644000) 0 nil])
nil
nil
([nil nil ((#("s" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "cur-pow" "new-t") fontified t help-echo cider--help-echo)) . -517) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (#("e" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "cur-pow" "new-t") fontified t help-echo cider--help-echo)) . -518) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (#("q" 0 1 (face font-lock-function-name-face cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "cur-pow" "new-t") fontified t help-echo cider--help-echo)) . -519) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (#("-" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "cur-pow" "new-t") fontified t help-echo cider--help-echo)) . -520) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (#("p" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "cur-pow" "new-t") fontified t help-echo cider--help-echo)) . -521) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (#("a" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "cur-pow" "new-t") fontified t help-echo cider--help-echo)) . -522) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (#("i" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "cur-pow" "new-t") fontified t help-echo cider--help-echo)) . -523) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (#("r" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "cur-pow" "new-t") fontified t help-echo cider--help-echo)) . -524) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (#("s" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "cur-pow" "new-t") fontified t help-echo cider--help-echo)) . -525) (undo-tree-id437 . -1) (undo-tree-id438 . -1) 526 (t 25718 12090 126461 24000)) nil (25718 12123 305841 906000) 0 nil])
([nil nil ((517 . 519)) nil (25718 12123 305781 19000) 0 nil])
([nil nil ((#("w" 0 1 (cider-locals ("int-pairs" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "cur-pow" "new-t") fontified t help-echo cider--help-echo)) . -518) (undo-tree-id419 . -1) (undo-tree-id420 . -1) 519) nil (25718 12123 305774 890000) 0 nil])
([nil nil ((518 . 525)) nil (25718 12123 305731 798000) 0 nil])
([nil nil ((243 . 252) (t 25718 12123 325416 741000)) nil (25718 12243 573904 894000) 0 nil])
([nil nil ((252 . 258)) nil (25718 12243 573900 524000) 0 nil])
([nil nil ((258 . 265)) nil (25718 12243 573896 765000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("int-pairs" "rest" "new-seq" "new-t" "recur" "new-seq" "rest" "count" "0" "=" "if" "seq-pairs" "cur-pow" "new-t" "cons" "new-seq" "cur-p" "second" "cur-pow" "cur-p" "first" "t" "+" "new-t" "let" "int-pairs" "rest" "cur-p" "seq-pairs" "0" "t" "loop" "start" "total") fontified t help-echo cider--help-echo)) . -264) (undo-tree-id439 . -1) (undo-tree-id440 . -1) 265) nil (25718 12243 573891 6000) 0 nil])
([nil nil ((264 . 271)) nil (25718 12243 573857 25000) 0 nil])
([nil nil ((271 . 275)) nil (25718 12243 573853 99000) 0 nil])
([nil nil ((258 . 265)) nil (25718 12243 573848 729000) 0 nil])
([nil nil ((282 . 283)) nil (25718 12243 573835 230000) 0 nil])
([nil nil ((#("0" 0 1 (cider-locals ("int-pairs" "start" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -298) (undo-tree-id441 . -1) (undo-tree-id442 . -1) 299 (t 25718 12243 591797 299000)) nil (25718 12283 867467 880000) 0 nil])
([nil nil ((298 . 304)) nil (25718 12283 867432 566000) 0 nil])
([nil nil ((304 . 310)) nil (25718 12283 867419 233000) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals ("int-pairs" "start" "total" "int-pairs" "t") fontified t help-echo cider--help-echo)) . -297) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#("(" 0 1 (cider-locals ("int-pairs" "start" "total" "rest" "new-seq" "new-t" "recur" "new-seq" "rest" "count" "0" "=" "if" "seq-pairs" "cur-pow" "new-t" "cons" "new-seq" "cur-p" "second" "cur-pow" "cur-p" "first" "t" "+" "new-t" "let" "t") fontified t help-echo cider--help-echo)) . -298) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (#("*" 0 1 (face font-lock-function-name-face cider-locals ("int-pairs" "start" "total" "rest" "new-seq" "new-t" "recur" "new-seq" "rest" "count" "0" "=" "if" "seq-pairs" "cur-pow" "new-t" "cons" "new-seq" "cur-p" "second" "cur-pow" "cur-p" "first" "t" "+" "new-t" "let" "t") fontified t help-echo cider--help-echo)) . -299) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "start" "total" "rest" "new-seq" "new-t" "recur" "new-seq" "rest" "count" "0" "=" "if" "seq-pairs" "cur-pow" "new-t" "cons" "new-seq" "cur-p" "second" "cur-pow" "cur-p" "first" "t" "+" "new-t" "let" "t") fontified t help-echo cider--help-echo)) . -300) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (#("-" 0 1 (face font-lock-function-name-face cider-locals ("int-pairs" "start" "total" "rest" "new-seq" "new-t" "recur" "new-seq" "rest" "count" "0" "=" "if" "seq-pairs" "cur-pow" "new-t" "cons" "new-seq" "cur-p" "second" "cur-pow" "cur-p" "first" "t" "+" "new-t" "let" "t") fontified t help-echo cider--help-echo)) . -301) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (#("1" 0 1 (cider-locals ("int-pairs" "start" "total" "rest" "new-seq" "new-t" "recur" "new-seq" "rest" "count" "0" "=" "if" "seq-pairs" "cur-pow" "new-t" "cons" "new-seq" "cur-p" "second" "cur-pow" "cur-p" "first" "t" "+" "new-t" "let" "t") fontified t help-echo cider--help-echo)) . -302) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (#(" " 0 1 (cider-locals ("int-pairs" "start" "total" "rest" "new-seq" "new-t" "recur" "new-seq" "rest" "count" "0" "=" "if" "seq-pairs" "cur-pow" "new-t" "cons" "new-seq" "cur-p" "second" "cur-pow" "cur-p" "first" "t" "+" "new-t" "let" "t") fontified t help-echo cider--help-echo)) . -303) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (#("s" 0 1 (cider-locals ("int-pairs" "start" "total" "rest" "new-seq" "new-t" "recur" "new-seq" "rest" "count" "0" "=" "if" "seq-pairs" "cur-pow" "new-t" "cons" "new-seq" "cur-p" "second" "cur-pow" "cur-p" "first" "t" "+" "new-t" "let" "t") fontified t help-echo cider--help-echo)) . -304) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (#("t" 0 1 (cider-locals ("int-pairs" "start" "total" "rest" "new-seq" "new-t" "recur" "new-seq" "rest" "count" "0" "=" "if" "seq-pairs" "cur-pow" "new-t" "cons" "new-seq" "cur-p" "second" "cur-pow" "cur-p" "first" "t" "+" "new-t" "let" "t") fontified t help-echo cider--help-echo)) . -305) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (#("a" 0 1 (cider-locals ("int-pairs" "start" "total" "rest" "new-seq" "new-t" "recur" "new-seq" "rest" "count" "0" "=" "if" "seq-pairs" "cur-pow" "new-t" "cons" "new-seq" "cur-p" "second" "cur-pow" "cur-p" "first" "t" "+" "new-t" "let" "t") fontified t help-echo cider--help-echo)) . -306) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (#("r" 0 1 (cider-locals ("int-pairs" "start" "total" "rest" "new-seq" "new-t" "recur" "new-seq" "rest" "count" "0" "=" "if" "seq-pairs" "cur-pow" "new-t" "cons" "new-seq" "cur-p" "second" "cur-pow" "cur-p" "first" "t" "+" "new-t" "let" "t") fontified t help-echo cider--help-echo)) . -307) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (#("t" 0 1 (cider-locals ("int-pairs" "start" "total" "rest" "new-seq" "new-t" "recur" "new-seq" "rest" "count" "0" "=" "if" "seq-pairs" "cur-pow" "new-t" "cons" "new-seq" "cur-p" "second" "cur-pow" "cur-p" "first" "t" "+" "new-t" "let" "t") fontified t help-echo cider--help-echo)) . -308) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (#(")" 0 1 (cider-locals ("int-pairs" "start" "total" "rest" "cur-p" "seq-pairs" "t") fontified t help-echo cider--help-echo)) . -309) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) 310 (t 25718 12283 880635 337000)) nil (25718 12482 278679 820000) 0 nil])
([nil nil ((297 . 299)) nil (25718 12482 278357 773000) 0 nil])
([nil nil ((#("n" 0 1 (cider-locals ("int-pairs" "start" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "cur-pow" "new-t") help-echo cider--help-echo fontified t)) . -462) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (#("e" 0 1 (cider-locals ("int-pairs" "start" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "cur-pow" "new-t") help-echo cider--help-echo fontified t)) . -463) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (#("w" 0 1 (cider-locals ("int-pairs" "start" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "cur-pow" "new-t") help-echo cider--help-echo fontified t)) . -464) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (#("-" 0 1 (cider-locals ("int-pairs" "start" "total" "rest" "cur-p" "seq-pairs" "t" "new-seq" "cur-pow" "new-t") help-echo cider--help-echo fontified t)) . -465) (undo-tree-id488 . -1) (undo-tree-id489 . -1) 466 (t 25718 12482 305206 307000)) nil (25718 12520 141271 305000) 0 nil])
([nil nil ((#("[" 0 1 (cider-locals ("120" "0" "160" "2" "190" "12" "100" "14" "0" "16") help-echo cider--help-echo fontified t)) . -52) (undo-tree-id493 . -1) 53 (t 25718 12520 154217 43000)) nil (25718 12557 294345 450000) 0 nil])
([nil nil ((52 . 53)) nil (25718 12557 294336 709000) 0 nil])
([nil nil ((#("]" 0 1 (cider-locals ("0" "16") help-echo cider--help-echo fontified t)) . -93) (undo-tree-id492 . -1) 94) nil (25718 12557 294331 913000) 0 nil])
([nil nil ((93 . 94)) nil (25718 12557 294323 950000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-function-name-face cider-locals ("defn" "defn" "defn" "def" "0" "16") help-echo cider--help-echo fontified t)) . -93) (undo-tree-id490 . -1) (undo-tree-id491 . -1) 94) nil (25718 12557 294318 413000) 0 nil])
([nil nil ((93 . 94)) nil (25718 12557 294283 322000) 0 nil])
([nil nil ((52 . 53)) nil (25718 12557 294270 544000) 0 nil])
([nil current ((#("(def power-seq '([16 0] [14 100] [12 190] [2 160] [0 120])) 
(def power-ints '([2 120] [10 160] [2 190] [2 100] [0 0])) 
" 0 1 (fontified t help-echo cider--help-echo cider-locals nil) 1 4 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-keyword-face) 4 5 (fontified t help-echo cider--help-echo cider-locals nil) 5 14 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-variable-name-face) 14 62 (fontified t help-echo cider--help-echo cider-locals nil) 62 65 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-keyword-face) 65 66 (fontified t help-echo cider--help-echo cider-locals nil) 66 76 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-variable-name-face) 76 121 (fontified t help-echo cider--help-echo cider-locals nil)) . 37) (undo-tree-id0 . -61) (undo-tree-id1 . -61) (undo-tree-id2 . -61) (undo-tree-id3 . -61) 98 (t 25718 12557 313257 835000)) nil (25719 42763 981566 474000) 0 nil])
nil
